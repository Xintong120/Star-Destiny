import {
  require_lib
} from "./chunk-5OJSRUFT.js";
import {
  require_dayjs_min
} from "./chunk-WAVGCWYK.js";
import {
  __commonJS
} from "./chunk-5WRI5ZAA.js";

// node_modules/iztro/lib/data/constants.js
var require_constants = __commonJS({
  "node_modules/iztro/lib/data/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RAT_RULE = exports.TIGER_RULE = exports.TIME_RANGE = exports.CHINESE_TIME = exports.FiveElementsClass = exports.GENDER = exports.PALACES = exports.ZODIAC = exports.EARTHLY_BRANCHES = exports.HEAVENLY_STEMS = exports.LANGUAGES = void 0;
    exports.LANGUAGES = ["en-US", "ja-JP", "ko-KR", "zh-CN", "zh-TW", "vi-VN"];
    exports.HEAVENLY_STEMS = [
      "jiaHeavenly",
      "yiHeavenly",
      "bingHeavenly",
      "dingHeavenly",
      "wuHeavenly",
      "jiHeavenly",
      "gengHeavenly",
      "xinHeavenly",
      "renHeavenly",
      "guiHeavenly"
    ];
    exports.EARTHLY_BRANCHES = [
      "ziEarthly",
      "chouEarthly",
      "yinEarthly",
      "maoEarthly",
      "chenEarthly",
      "siEarthly",
      "wuEarthly",
      "weiEarthly",
      "shenEarthly",
      "youEarthly",
      "xuEarthly",
      "haiEarthly"
    ];
    exports.ZODIAC = [
      "rat",
      "ox",
      "tiger",
      "rabbit",
      "dragon",
      "snake",
      "horse",
      "sheep",
      "monkey",
      "rooster",
      "dog",
      "pig"
    ];
    exports.PALACES = [
      "soulPalace",
      "parentsPalace",
      "spiritPalace",
      "propertyPalace",
      "careerPalace",
      "friendsPalace",
      "surfacePalace",
      "healthPalace",
      "wealthPalace",
      "childrenPalace",
      "spousePalace",
      "siblingsPalace"
    ];
    exports.GENDER = {
      male: "阳",
      female: "阴"
    };
    var FiveElementsClass;
    (function(FiveElementsClass2) {
      FiveElementsClass2[FiveElementsClass2["water2nd"] = 2] = "water2nd";
      FiveElementsClass2[FiveElementsClass2["wood3rd"] = 3] = "wood3rd";
      FiveElementsClass2[FiveElementsClass2["metal4th"] = 4] = "metal4th";
      FiveElementsClass2[FiveElementsClass2["earth5th"] = 5] = "earth5th";
      FiveElementsClass2[FiveElementsClass2["fire6th"] = 6] = "fire6th";
    })(FiveElementsClass || (exports.FiveElementsClass = FiveElementsClass = {}));
    exports.CHINESE_TIME = [
      "earlyRatHour",
      "oxHour",
      "tigerHour",
      "rabbitHour",
      "dragonHour",
      "snakeHour",
      "horseHour",
      "goatHour",
      "monkeyHour",
      "roosterHour",
      "dogHour",
      "pigHour",
      "lateRatHour"
      // : '23:00~00:00',
    ];
    exports.TIME_RANGE = [
      "00:00~01:00",
      "01:00~03:00",
      "03:00~05:00",
      "05:00~07:00",
      "07:00~09:00",
      "09:00~11:00",
      "11:00~13:00",
      "13:00~15:00",
      "15:00~17:00",
      "17:00~19:00",
      "19:00~21:00",
      "21:00~23:00",
      "23:00~00:00"
    ];
    exports.TIGER_RULE = {
      jiaHeavenly: "bingHeavenly",
      yiHeavenly: "wuHeavenly",
      bingHeavenly: "gengHeavenly",
      dingHeavenly: "renHeavenly",
      wuHeavenly: "jiaHeavenly",
      jiHeavenly: "bingHeavenly",
      gengHeavenly: "wuHeavenly",
      xinHeavenly: "gengHeavenly",
      renHeavenly: "renHeavenly",
      guiHeavenly: "jiaHeavenly"
    };
    exports.RAT_RULE = {
      jiaHeavenly: "jiaHeavenly",
      yiHeavenly: "bingHeavenly",
      bingHeavenly: "wuHeavenly",
      dingHeavenly: "gengHeavenly",
      wuHeavenly: "renHeavenly",
      jiHeavenly: "jiaHeavenly",
      gengHeavenly: "bingHeavenly",
      xinHeavenly: "wuHeavenly",
      renHeavenly: "gengHeavenly",
      guiHeavenly: "renHeavenly"
    };
  }
});

// node_modules/iztro/lib/data/stars.js
var require_stars = __commonJS({
  "node_modules/iztro/lib/data/stars.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STARS_INFO = exports.MUTAGEN = void 0;
    exports.MUTAGEN = ["sihuaLu", "sihuaQuan", "sihuaKe", "sihuaJi"];
    exports.STARS_INFO = {
      ziweiMaj: {
        brightness: ["wang", "wang", "de", "wang", "miao", "miao", "wang", "wang", "de", "wang", "ping", "miao"],
        fiveElements: "土",
        yinYang: "阴"
      },
      tianjiMaj: {
        brightness: ["de", "wang", "li", "ping", "miao", "xian", "de", "wang", "li", "ping", "miao", "xian"],
        fiveElements: "木",
        yinYang: "阴"
      },
      taiyangMaj: {
        brightness: ["wang", "miao", "wang", "wang", "wang", "de", "de", "xian", "bu", "xian", "xian", "bu"],
        fiveElements: "",
        yinYang: ""
      },
      wuquMaj: {
        brightness: ["de", "li", "miao", "ping", "wang", "miao", "de", "li", "miao", "ping", "wang", "miao"],
        fiveElements: "金",
        yinYang: "阴"
      },
      tiantongMaj: {
        brightness: ["li", "ping", "ping", "miao", "xian", "bu", "wang", "ping", "ping", "miao", "wang", "bu"],
        fiveElements: "水",
        yinYang: "阳"
      },
      lianzhenMaj: {
        brightness: ["miao", "ping", "li", "xian", "ping", "li", "miao", "ping", "li", "xian", "ping", "li"],
        fiveElements: "火",
        yinYang: "阴"
      },
      tianfuMaj: {
        brightness: ["miao", "de", "miao", "de", "wang", "miao", "de", "wang", "miao", "de", "miao", "miao"],
        fiveElements: "土",
        yinYang: "阳"
      },
      taiyinMaj: {
        brightness: ["wang", "xian", "xian", "xian", "bu", "bu", "li", "bu", "wang", "miao", "miao", "miao"],
        fiveElements: "水",
        yinYang: "阴"
      },
      tanlangMaj: {
        brightness: ["ping", "li", "miao", "xian", "wang", "miao", "ping", "li", "miao", "xian", "wang", "miao"],
        fiveElements: "水",
        yinYang: ""
      },
      jumenMaj: {
        brightness: ["miao", "miao", "xian", "wang", "wang", "bu", "miao", "miao", "xian", "wang", "wang", "bu"],
        fiveElements: "土",
        yinYang: "阴"
      },
      tianxiangMaj: {
        brightness: ["miao", "xian", "de", "de", "miao", "de", "miao", "xian", "de", "de", "miao", "miao"],
        fiveElements: "水",
        yinYang: ""
      },
      tianliangMaj: {
        brightness: ["miao", "miao", "miao", "xian", "miao", "wang", "xian", "de", "miao", "xian", "miao", "wang"],
        fiveElements: "土",
        yinYang: ""
      },
      qishaMaj: {
        brightness: ["miao", "wang", "miao", "ping", "wang", "miao", "miao", "miao", "miao", "ping", "wang", "miao"],
        fiveElements: "",
        yinYang: ""
      },
      pojunMaj: {
        brightness: ["de", "xian", "wang", "ping", "miao", "wang", "de", "xian", "wang", "ping", "miao", "wang"],
        fiveElements: "水",
        yinYang: ""
      },
      wenchangMin: {
        brightness: ["xian", "li", "de", "miao", "xian", "li", "de", "miao", "xian", "li", "de", "miao"]
      },
      wenquMin: {
        brightness: ["ping", "wang", "de", "miao", "xian", "wang", "de", "miao", "xian", "wang", "de", "miao"]
      },
      huoxingMin: {
        brightness: ["miao", "li", "xian", "de", "miao", "li", "xian", "de", "miao", "li", "xian", "de"]
      },
      lingxingMin: {
        brightness: ["miao", "li", "xian", "de", "miao", "li", "xian", "de", "miao", "li", "xian", "de"]
      },
      qingyangMin: {
        brightness: ["", "xian", "miao", "", "xian", "miao", "", "xian", "miao", "", "xian", "miao"]
      },
      tuoluoMin: {
        brightness: ["xian", "", "miao", "xian", "", "miao", "xian", "", "miao", "xian", "", "miao"]
      }
    };
  }
});

// node_modules/iztro/lib/data/heavenlyStems.js
var require_heavenlyStems = __commonJS({
  "node_modules/iztro/lib/data/heavenlyStems.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.heavenlyStems = void 0;
    exports.heavenlyStems = {
      jiaHeavenly: {
        yinYang: "阳",
        fiveElements: "木",
        crash: "gengHeavenly",
        mutagen: ["lianzhenMaj", "pojunMaj", "wuquMaj", "taiyangMaj"]
      },
      yiHeavenly: {
        yinYang: "阴",
        fiveElements: "木",
        crash: "xinHeavenly",
        mutagen: ["tianjiMaj", "tianliangMaj", "ziweiMaj", "taiyinMaj"]
      },
      bingHeavenly: {
        yinYang: "阳",
        fiveElements: "火",
        crash: "renHeavenly",
        mutagen: ["tiantongMaj", "tianjiMaj", "wenchangMin", "lianzhenMaj"]
      },
      dingHeavenly: {
        yinYang: "阴",
        fiveElements: "火",
        crash: "guiHeavenly",
        mutagen: ["taiyinMaj", "tiantongMaj", "tianjiMaj", "jumenMaj"]
      },
      wuHeavenly: {
        yinYang: "阳",
        fiveElements: "土",
        mutagen: ["tanlangMaj", "taiyinMaj", "youbiMin", "tianjiMaj"]
      },
      jiHeavenly: {
        yinYang: "阴",
        fiveElements: "土",
        mutagen: ["wuquMaj", "tanlangMaj", "tianliangMaj", "wenquMin"]
      },
      gengHeavenly: {
        yinYang: "阳",
        fiveElements: "金",
        crash: "jiaHeavenly",
        mutagen: ["taiyangMaj", "wuquMaj", "taiyinMaj", "tiantongMaj"]
      },
      xinHeavenly: {
        yinYang: "阴",
        fiveElements: "金",
        crash: "yiHeavenly",
        mutagen: ["jumenMaj", "taiyangMaj", "wenquMin", "wenchangMin"]
      },
      renHeavenly: {
        yinYang: "阳",
        fiveElements: "水",
        crash: "bingHeavenly",
        mutagen: ["tianliangMaj", "ziweiMaj", "zuofuMin", "wuquMaj"]
      },
      guiHeavenly: {
        yinYang: "阴",
        fiveElements: "水",
        crash: "dingHeavenly",
        mutagen: ["pojunMaj", "jumenMaj", "taiyinMaj", "tanlangMaj"]
      }
    };
  }
});

// node_modules/iztro/lib/data/earthlyBranches.js
var require_earthlyBranches = __commonJS({
  "node_modules/iztro/lib/data/earthlyBranches.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.earthlyBranches = void 0;
    exports.earthlyBranches = {
      ziEarthly: {
        yinYang: "阳",
        fiveElements: "水",
        crash: "wuEarthly",
        soul: "tanlangMaj",
        body: "huoxingMin",
        inside: "胆",
        outside: "下体",
        healthTip: "生殖系统、膀胱、尿道之疾病，听觉障碍"
      },
      chouEarthly: {
        yinYang: "阴",
        fiveElements: "土",
        crash: "weiEarthly",
        soul: "jumenMaj",
        body: "tianxiangMaj",
        inside: "肝",
        outside: "小腿、脚（右）",
        healthTip: "胸部、肋膜炎、胃病、脚部"
      },
      yinEarthly: {
        yinYang: "阳",
        fiveElements: "木",
        crash: "shenEarthly",
        soul: "lucunMin",
        body: "tianliangMaj",
        inside: "肺",
        outside: "大腿（右）",
        healthTip: "胆囊、关节、胫部、神经痛、风湿"
      },
      maoEarthly: {
        yinYang: "阴",
        fiveElements: "木",
        crash: "youEarthly",
        soul: "wenquMin",
        body: "tiantongMaj",
        inside: "大肠",
        outside: "腰（右）、背",
        healthTip: "肝病、颜面神经、失眠、神经衰弱"
      },
      chenEarthly: {
        yinYang: "阳",
        fiveElements: "土",
        crash: "xuEarthly",
        soul: "lianzhenMaj",
        body: "wenchangMin",
        inside: "胃",
        outside: "胸、胳膊（右）",
        healthTip: "消化系统、脊椎、皮肤疾病"
      },
      siEarthly: {
        yinYang: "阴",
        fiveElements: "火",
        crash: "haiEarthly",
        soul: "wuquMaj",
        body: "tianjiMaj",
        inside: "脾",
        outside: "左肩",
        healthTip: "喉头、牙病、感冒"
      },
      wuEarthly: {
        yinYang: "阳",
        fiveElements: "火",
        crash: "ziEarthly",
        soul: "pojunMaj",
        body: "huoxingMin",
        inside: "心",
        outside: "头",
        healthTip: "心脏、视觉、味觉障碍、火难"
      },
      weiEarthly: {
        yinYang: "阴",
        fiveElements: "土",
        crash: "chouEarthly",
        soul: "wuquMaj",
        body: "tianxiangMaj",
        inside: "小肠",
        outside: "脸",
        healthTip: "消化系统、胰脏、健忘症、疲倦、手腕、嘴唇"
      },
      shenEarthly: {
        yinYang: "阳",
        fiveElements: "金",
        crash: "yinEarthly",
        soul: "lianzhenMaj",
        body: "tianliangMaj",
        inside: "膀胱",
        outside: "胸、胳膊（左）",
        healthTip: "呼吸系统、肺部、消化系统、大肠"
      },
      youEarthly: {
        yinYang: "阴",
        fiveElements: "金",
        crash: "maoEarthly",
        soul: "wenquMin",
        body: "tiantongMaj",
        inside: "肾",
        outside: "腰（左）、腹",
        healthTip: "吐血、痢血、小肠之疾、脑出血、头腕部"
      },
      xuEarthly: {
        yinYang: "阳",
        fiveElements: "土",
        crash: "chenEarthly",
        soul: "lucunMin",
        body: "wenchangMin",
        inside: "心包",
        outside: "大腿（左）",
        healthTip: "下半身之疾、子宫、痔疮、脚部"
      },
      haiEarthly: {
        yinYang: "阴",
        fiveElements: "水",
        crash: "siEarthly",
        soul: "jumenMaj",
        body: "tianjiMaj",
        inside: "三焦",
        outside: "小腿、脚（左）",
        healthTip: "排泄机能障碍、肾脏、尿道、偏头痛"
      }
    };
  }
});

// node_modules/iztro/lib/data/index.js
var require_data = __commonJS({
  "node_modules/iztro/lib/data/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_constants(), exports);
    __exportStar(require_stars(), exports);
    __exportStar(require_heavenlyStems(), exports);
    __exportStar(require_earthlyBranches(), exports);
  }
});

// node_modules/i18next/dist/cjs/i18next.js
var require_i18next = __commonJS({
  "node_modules/i18next/dist/cjs/i18next.js"(exports, module) {
    "use strict";
    var isString = (obj) => typeof obj === "string";
    var defer = () => {
      let res;
      let rej;
      const promise = new Promise((resolve, reject) => {
        res = resolve;
        rej = reject;
      });
      promise.resolve = res;
      promise.reject = rej;
      return promise;
    };
    var makeString = (object) => {
      if (object == null) return "";
      return "" + object;
    };
    var copy = (a, s, t) => {
      a.forEach((m) => {
        if (s[m]) t[m] = s[m];
      });
    };
    var lastOfPathSeparatorRegExp = /###/g;
    var cleanKey = (key) => key && key.indexOf("###") > -1 ? key.replace(lastOfPathSeparatorRegExp, ".") : key;
    var canNotTraverseDeeper = (object) => !object || isString(object);
    var getLastOfPath = (object, path, Empty) => {
      const stack = !isString(path) ? path : path.split(".");
      let stackIndex = 0;
      while (stackIndex < stack.length - 1) {
        if (canNotTraverseDeeper(object)) return {};
        const key = cleanKey(stack[stackIndex]);
        if (!object[key] && Empty) object[key] = new Empty();
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          object = object[key];
        } else {
          object = {};
        }
        ++stackIndex;
      }
      if (canNotTraverseDeeper(object)) return {};
      return {
        obj: object,
        k: cleanKey(stack[stackIndex])
      };
    };
    var setPath = (object, path, newValue) => {
      const {
        obj,
        k
      } = getLastOfPath(object, path, Object);
      if (obj !== void 0 || path.length === 1) {
        obj[k] = newValue;
        return;
      }
      let e = path[path.length - 1];
      let p = path.slice(0, path.length - 1);
      let last = getLastOfPath(object, p, Object);
      while (last.obj === void 0 && p.length) {
        e = `${p[p.length - 1]}.${e}`;
        p = p.slice(0, p.length - 1);
        last = getLastOfPath(object, p, Object);
        if (last && last.obj && typeof last.obj[`${last.k}.${e}`] !== "undefined") {
          last.obj = void 0;
        }
      }
      last.obj[`${last.k}.${e}`] = newValue;
    };
    var pushPath = (object, path, newValue, concat) => {
      const {
        obj,
        k
      } = getLastOfPath(object, path, Object);
      obj[k] = obj[k] || [];
      obj[k].push(newValue);
    };
    var getPath = (object, path) => {
      const {
        obj,
        k
      } = getLastOfPath(object, path);
      if (!obj) return void 0;
      return obj[k];
    };
    var getPathWithDefaults = (data, defaultData, key) => {
      const value = getPath(data, key);
      if (value !== void 0) {
        return value;
      }
      return getPath(defaultData, key);
    };
    var deepExtend = (target, source, overwrite) => {
      for (const prop in source) {
        if (prop !== "__proto__" && prop !== "constructor") {
          if (prop in target) {
            if (isString(target[prop]) || target[prop] instanceof String || isString(source[prop]) || source[prop] instanceof String) {
              if (overwrite) target[prop] = source[prop];
            } else {
              deepExtend(target[prop], source[prop], overwrite);
            }
          } else {
            target[prop] = source[prop];
          }
        }
      }
      return target;
    };
    var regexEscape = (str) => str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
    var _entityMap = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
      "/": "&#x2F;"
    };
    var escape = (data) => {
      if (isString(data)) {
        return data.replace(/[&<>"'\/]/g, (s) => _entityMap[s]);
      }
      return data;
    };
    var RegExpCache = class {
      constructor(capacity) {
        this.capacity = capacity;
        this.regExpMap = /* @__PURE__ */ new Map();
        this.regExpQueue = [];
      }
      getRegExp(pattern) {
        const regExpFromCache = this.regExpMap.get(pattern);
        if (regExpFromCache !== void 0) {
          return regExpFromCache;
        }
        const regExpNew = new RegExp(pattern);
        if (this.regExpQueue.length === this.capacity) {
          this.regExpMap.delete(this.regExpQueue.shift());
        }
        this.regExpMap.set(pattern, regExpNew);
        this.regExpQueue.push(pattern);
        return regExpNew;
      }
    };
    var chars = [" ", ",", "?", "!", ";"];
    var looksLikeObjectPathRegExpCache = new RegExpCache(20);
    var looksLikeObjectPath = (key, nsSeparator, keySeparator) => {
      nsSeparator = nsSeparator || "";
      keySeparator = keySeparator || "";
      const possibleChars = chars.filter((c) => nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0);
      if (possibleChars.length === 0) return true;
      const r = looksLikeObjectPathRegExpCache.getRegExp(`(${possibleChars.map((c) => c === "?" ? "\\?" : c).join("|")})`);
      let matched = !r.test(key);
      if (!matched) {
        const ki = key.indexOf(keySeparator);
        if (ki > 0 && !r.test(key.substring(0, ki))) {
          matched = true;
        }
      }
      return matched;
    };
    var deepFind = function(obj, path) {
      let keySeparator = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ".";
      if (!obj) return void 0;
      if (obj[path]) return obj[path];
      const tokens = path.split(keySeparator);
      let current = obj;
      for (let i = 0; i < tokens.length; ) {
        if (!current || typeof current !== "object") {
          return void 0;
        }
        let next;
        let nextPath = "";
        for (let j = i; j < tokens.length; ++j) {
          if (j !== i) {
            nextPath += keySeparator;
          }
          nextPath += tokens[j];
          next = current[nextPath];
          if (next !== void 0) {
            if (["string", "number", "boolean"].indexOf(typeof next) > -1 && j < tokens.length - 1) {
              continue;
            }
            i += j - i + 1;
            break;
          }
        }
        current = next;
      }
      return current;
    };
    var getCleanedCode = (code) => code && code.replace("_", "-");
    var consoleLogger = {
      type: "logger",
      log(args) {
        this.output("log", args);
      },
      warn(args) {
        this.output("warn", args);
      },
      error(args) {
        this.output("error", args);
      },
      output(type, args) {
        if (console && console[type]) console[type].apply(console, args);
      }
    };
    var Logger = class _Logger {
      constructor(concreteLogger) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.init(concreteLogger, options);
      }
      init(concreteLogger) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.prefix = options.prefix || "i18next:";
        this.logger = concreteLogger || consoleLogger;
        this.options = options;
        this.debug = options.debug;
      }
      log() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return this.forward(args, "log", "", true);
      }
      warn() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        return this.forward(args, "warn", "", true);
      }
      error() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }
        return this.forward(args, "error", "");
      }
      deprecate() {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
      }
      forward(args, lvl, prefix, debugOnly) {
        if (debugOnly && !this.debug) return null;
        if (isString(args[0])) args[0] = `${prefix}${this.prefix} ${args[0]}`;
        return this.logger[lvl](args);
      }
      create(moduleName) {
        return new _Logger(this.logger, {
          ...{
            prefix: `${this.prefix}:${moduleName}:`
          },
          ...this.options
        });
      }
      clone(options) {
        options = options || this.options;
        options.prefix = options.prefix || this.prefix;
        return new _Logger(this.logger, options);
      }
    };
    var baseLogger = new Logger();
    var EventEmitter = class {
      constructor() {
        this.observers = {};
      }
      on(events, listener) {
        events.split(" ").forEach((event) => {
          if (!this.observers[event]) this.observers[event] = /* @__PURE__ */ new Map();
          const numListeners = this.observers[event].get(listener) || 0;
          this.observers[event].set(listener, numListeners + 1);
        });
        return this;
      }
      off(event, listener) {
        if (!this.observers[event]) return;
        if (!listener) {
          delete this.observers[event];
          return;
        }
        this.observers[event].delete(listener);
      }
      emit(event) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        if (this.observers[event]) {
          const cloned = Array.from(this.observers[event].entries());
          cloned.forEach((_ref) => {
            let [observer, numTimesAdded] = _ref;
            for (let i = 0; i < numTimesAdded; i++) {
              observer(...args);
            }
          });
        }
        if (this.observers["*"]) {
          const cloned = Array.from(this.observers["*"].entries());
          cloned.forEach((_ref2) => {
            let [observer, numTimesAdded] = _ref2;
            for (let i = 0; i < numTimesAdded; i++) {
              observer.apply(observer, [event, ...args]);
            }
          });
        }
      }
    };
    var ResourceStore = class extends EventEmitter {
      constructor(data) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          ns: ["translation"],
          defaultNS: "translation"
        };
        super();
        this.data = data || {};
        this.options = options;
        if (this.options.keySeparator === void 0) {
          this.options.keySeparator = ".";
        }
        if (this.options.ignoreJSONStructure === void 0) {
          this.options.ignoreJSONStructure = true;
        }
      }
      addNamespaces(ns) {
        if (this.options.ns.indexOf(ns) < 0) {
          this.options.ns.push(ns);
        }
      }
      removeNamespaces(ns) {
        const index = this.options.ns.indexOf(ns);
        if (index > -1) {
          this.options.ns.splice(index, 1);
        }
      }
      getResource(lng, ns, key) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        const ignoreJSONStructure = options.ignoreJSONStructure !== void 0 ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
        let path;
        if (lng.indexOf(".") > -1) {
          path = lng.split(".");
        } else {
          path = [lng, ns];
          if (key) {
            if (Array.isArray(key)) {
              path.push(...key);
            } else if (isString(key) && keySeparator) {
              path.push(...key.split(keySeparator));
            } else {
              path.push(key);
            }
          }
        }
        const result = getPath(this.data, path);
        if (!result && !ns && !key && lng.indexOf(".") > -1) {
          lng = path[0];
          ns = path[1];
          key = path.slice(2).join(".");
        }
        if (result || !ignoreJSONStructure || !isString(key)) return result;
        return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
      }
      addResource(lng, ns, key, value) {
        let options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : {
          silent: false
        };
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        let path = [lng, ns];
        if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);
        if (lng.indexOf(".") > -1) {
          path = lng.split(".");
          value = ns;
          ns = path[1];
        }
        this.addNamespaces(ns);
        setPath(this.data, path, value);
        if (!options.silent) this.emit("added", lng, ns, key, value);
      }
      addResources(lng, ns, resources) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {
          silent: false
        };
        for (const m in resources) {
          if (isString(resources[m]) || Array.isArray(resources[m])) this.addResource(lng, ns, m, resources[m], {
            silent: true
          });
        }
        if (!options.silent) this.emit("added", lng, ns, resources);
      }
      addResourceBundle(lng, ns, resources, deep, overwrite) {
        let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {
          silent: false,
          skipCopy: false
        };
        let path = [lng, ns];
        if (lng.indexOf(".") > -1) {
          path = lng.split(".");
          deep = resources;
          resources = ns;
          ns = path[1];
        }
        this.addNamespaces(ns);
        let pack = getPath(this.data, path) || {};
        if (!options.skipCopy) resources = JSON.parse(JSON.stringify(resources));
        if (deep) {
          deepExtend(pack, resources, overwrite);
        } else {
          pack = {
            ...pack,
            ...resources
          };
        }
        setPath(this.data, path, pack);
        if (!options.silent) this.emit("added", lng, ns, resources);
      }
      removeResourceBundle(lng, ns) {
        if (this.hasResourceBundle(lng, ns)) {
          delete this.data[lng][ns];
        }
        this.removeNamespaces(ns);
        this.emit("removed", lng, ns);
      }
      hasResourceBundle(lng, ns) {
        return this.getResource(lng, ns) !== void 0;
      }
      getResourceBundle(lng, ns) {
        if (!ns) ns = this.options.defaultNS;
        if (this.options.compatibilityAPI === "v1") return {
          ...{},
          ...this.getResource(lng, ns)
        };
        return this.getResource(lng, ns);
      }
      getDataByLanguage(lng) {
        return this.data[lng];
      }
      hasLanguageSomeTranslations(lng) {
        const data = this.getDataByLanguage(lng);
        const n = data && Object.keys(data) || [];
        return !!n.find((v) => data[v] && Object.keys(data[v]).length > 0);
      }
      toJSON() {
        return this.data;
      }
    };
    var postProcessor = {
      processors: {},
      addPostProcessor(module2) {
        this.processors[module2.name] = module2;
      },
      handle(processors, value, key, options, translator) {
        processors.forEach((processor) => {
          if (this.processors[processor]) value = this.processors[processor].process(value, key, options, translator);
        });
        return value;
      }
    };
    var checkedLoadedFor = {};
    var Translator = class _Translator extends EventEmitter {
      constructor(services) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        super();
        copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector", "i18nFormat", "utils"], services, this);
        this.options = options;
        if (this.options.keySeparator === void 0) {
          this.options.keySeparator = ".";
        }
        this.logger = baseLogger.create("translator");
      }
      changeLanguage(lng) {
        if (lng) this.language = lng;
      }
      exists(key) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        if (key === void 0 || key === null) {
          return false;
        }
        const resolved = this.resolve(key, options);
        return resolved && resolved.res !== void 0;
      }
      extractFromKey(key, options) {
        let nsSeparator = options.nsSeparator !== void 0 ? options.nsSeparator : this.options.nsSeparator;
        if (nsSeparator === void 0) nsSeparator = ":";
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        let namespaces = options.ns || this.options.defaultNS || [];
        const wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
        const seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);
        if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
          const m = key.match(this.interpolator.nestingRegexp);
          if (m && m.length > 0) {
            return {
              key,
              namespaces: isString(namespaces) ? [namespaces] : namespaces
            };
          }
          const parts = key.split(nsSeparator);
          if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
          key = parts.join(keySeparator);
        }
        return {
          key,
          namespaces: isString(namespaces) ? [namespaces] : namespaces
        };
      }
      translate(keys, options, lastKey) {
        if (typeof options !== "object" && this.options.overloadTranslationOptionHandler) {
          options = this.options.overloadTranslationOptionHandler(arguments);
        }
        if (typeof options === "object") options = {
          ...options
        };
        if (!options) options = {};
        if (keys === void 0 || keys === null) return "";
        if (!Array.isArray(keys)) keys = [String(keys)];
        const returnDetails = options.returnDetails !== void 0 ? options.returnDetails : this.options.returnDetails;
        const keySeparator = options.keySeparator !== void 0 ? options.keySeparator : this.options.keySeparator;
        const {
          key,
          namespaces
        } = this.extractFromKey(keys[keys.length - 1], options);
        const namespace = namespaces[namespaces.length - 1];
        const lng = options.lng || this.language;
        const appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
        if (lng && lng.toLowerCase() === "cimode") {
          if (appendNamespaceToCIMode) {
            const nsSeparator = options.nsSeparator || this.options.nsSeparator;
            if (returnDetails) {
              return {
                res: `${namespace}${nsSeparator}${key}`,
                usedKey: key,
                exactUsedKey: key,
                usedLng: lng,
                usedNS: namespace,
                usedParams: this.getUsedParamsDetails(options)
              };
            }
            return `${namespace}${nsSeparator}${key}`;
          }
          if (returnDetails) {
            return {
              res: key,
              usedKey: key,
              exactUsedKey: key,
              usedLng: lng,
              usedNS: namespace,
              usedParams: this.getUsedParamsDetails(options)
            };
          }
          return key;
        }
        const resolved = this.resolve(keys, options);
        let res = resolved && resolved.res;
        const resUsedKey = resolved && resolved.usedKey || key;
        const resExactUsedKey = resolved && resolved.exactUsedKey || key;
        const resType = Object.prototype.toString.apply(res);
        const noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
        const joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
        const handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
        const handleAsObject = !isString(res) && typeof res !== "boolean" && typeof res !== "number";
        if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(isString(joinArrays) && Array.isArray(res))) {
          if (!options.returnObjects && !this.options.returnObjects) {
            if (!this.options.returnedObjectHandler) {
              this.logger.warn("accessing an object - but returnObjects options is not enabled!");
            }
            const r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, {
              ...options,
              ns: namespaces
            }) : `key '${key} (${this.language})' returned an object instead of string.`;
            if (returnDetails) {
              resolved.res = r;
              resolved.usedParams = this.getUsedParamsDetails(options);
              return resolved;
            }
            return r;
          }
          if (keySeparator) {
            const resTypeIsArray = Array.isArray(res);
            const copy2 = resTypeIsArray ? [] : {};
            const newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;
            for (const m in res) {
              if (Object.prototype.hasOwnProperty.call(res, m)) {
                const deepKey = `${newKeyToUse}${keySeparator}${m}`;
                copy2[m] = this.translate(deepKey, {
                  ...options,
                  ...{
                    joinArrays: false,
                    ns: namespaces
                  }
                });
                if (copy2[m] === deepKey) copy2[m] = res[m];
              }
            }
            res = copy2;
          }
        } else if (handleAsObjectInI18nFormat && isString(joinArrays) && Array.isArray(res)) {
          res = res.join(joinArrays);
          if (res) res = this.extendTranslation(res, keys, options, lastKey);
        } else {
          let usedDefault = false;
          let usedKey = false;
          const needsPluralHandling = options.count !== void 0 && !isString(options.count);
          const hasDefaultValue = _Translator.hasDefaultValue(options);
          const defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : "";
          const defaultValueSuffixOrdinalFallback = options.ordinal && needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, {
            ordinal: false
          }) : "";
          const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
          const defaultValue = needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] || options[`defaultValue${defaultValueSuffix}`] || options[`defaultValue${defaultValueSuffixOrdinalFallback}`] || options.defaultValue;
          if (!this.isValidLookup(res) && hasDefaultValue) {
            usedDefault = true;
            res = defaultValue;
          }
          if (!this.isValidLookup(res)) {
            usedKey = true;
            res = key;
          }
          const missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
          const resForMissing = missingKeyNoValueFallbackToKey && usedKey ? void 0 : res;
          const updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;
          if (usedKey || usedDefault || updateMissing) {
            this.logger.log(updateMissing ? "updateKey" : "missingKey", lng, namespace, key, updateMissing ? defaultValue : res);
            if (keySeparator) {
              const fk = this.resolve(key, {
                ...options,
                keySeparator: false
              });
              if (fk && fk.res) this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.");
            }
            let lngs = [];
            const fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
            if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
              for (let i = 0; i < fallbackLngs.length; i++) {
                lngs.push(fallbackLngs[i]);
              }
            } else if (this.options.saveMissingTo === "all") {
              lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
            } else {
              lngs.push(options.lng || this.language);
            }
            const send = (l, k, specificDefaultValue) => {
              const defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;
              if (this.options.missingKeyHandler) {
                this.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
              } else if (this.backendConnector && this.backendConnector.saveMissing) {
                this.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
              }
              this.emit("missingKey", l, namespace, k, res);
            };
            if (this.options.saveMissing) {
              if (this.options.saveMissingPlurals && needsPluralHandling) {
                lngs.forEach((language) => {
                  const suffixes = this.pluralResolver.getSuffixes(language, options);
                  if (needsZeroSuffixLookup && options[`defaultValue${this.options.pluralSeparator}zero`] && suffixes.indexOf(`${this.options.pluralSeparator}zero`) < 0) {
                    suffixes.push(`${this.options.pluralSeparator}zero`);
                  }
                  suffixes.forEach((suffix) => {
                    send([language], key + suffix, options[`defaultValue${suffix}`] || defaultValue);
                  });
                });
              } else {
                send(lngs, key, defaultValue);
              }
            }
          }
          res = this.extendTranslation(res, keys, options, resolved, lastKey);
          if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = `${namespace}:${key}`;
          if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
            if (this.options.compatibilityAPI !== "v1") {
              res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? `${namespace}:${key}` : key, usedDefault ? res : void 0);
            } else {
              res = this.options.parseMissingKeyHandler(res);
            }
          }
        }
        if (returnDetails) {
          resolved.res = res;
          resolved.usedParams = this.getUsedParamsDetails(options);
          return resolved;
        }
        return res;
      }
      extendTranslation(res, key, options, resolved, lastKey) {
        var _this = this;
        if (this.i18nFormat && this.i18nFormat.parse) {
          res = this.i18nFormat.parse(res, {
            ...this.options.interpolation.defaultVariables,
            ...options
          }, options.lng || this.language || resolved.usedLng, resolved.usedNS, resolved.usedKey, {
            resolved
          });
        } else if (!options.skipInterpolation) {
          if (options.interpolation) this.interpolator.init({
            ...options,
            ...{
              interpolation: {
                ...this.options.interpolation,
                ...options.interpolation
              }
            }
          });
          const skipOnVariables = isString(res) && (options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
          let nestBef;
          if (skipOnVariables) {
            const nb = res.match(this.interpolator.nestingRegexp);
            nestBef = nb && nb.length;
          }
          let data = options.replace && !isString(options.replace) ? options.replace : options;
          if (this.options.interpolation.defaultVariables) data = {
            ...this.options.interpolation.defaultVariables,
            ...data
          };
          res = this.interpolator.interpolate(res, data, options.lng || this.language || resolved.usedLng, options);
          if (skipOnVariables) {
            const na = res.match(this.interpolator.nestingRegexp);
            const nestAft = na && na.length;
            if (nestBef < nestAft) options.nest = false;
          }
          if (!options.lng && this.options.compatibilityAPI !== "v1" && resolved && resolved.res) options.lng = this.language || resolved.usedLng;
          if (options.nest !== false) res = this.interpolator.nest(res, function() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            if (lastKey && lastKey[0] === args[0] && !options.context) {
              _this.logger.warn(`It seems you are nesting recursively key: ${args[0]} in key: ${key[0]}`);
              return null;
            }
            return _this.translate(...args, key);
          }, options);
          if (options.interpolation) this.interpolator.reset();
        }
        const postProcess = options.postProcess || this.options.postProcess;
        const postProcessorNames = isString(postProcess) ? [postProcess] : postProcess;
        if (res !== void 0 && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
          res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? {
            i18nResolved: {
              ...resolved,
              usedParams: this.getUsedParamsDetails(options)
            },
            ...options
          } : options, this);
        }
        return res;
      }
      resolve(keys) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let found;
        let usedKey;
        let exactUsedKey;
        let usedLng;
        let usedNS;
        if (isString(keys)) keys = [keys];
        keys.forEach((k) => {
          if (this.isValidLookup(found)) return;
          const extracted = this.extractFromKey(k, options);
          const key = extracted.key;
          usedKey = key;
          let namespaces = extracted.namespaces;
          if (this.options.fallbackNS) namespaces = namespaces.concat(this.options.fallbackNS);
          const needsPluralHandling = options.count !== void 0 && !isString(options.count);
          const needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && this.pluralResolver.shouldUseIntlApi();
          const needsContextHandling = options.context !== void 0 && (isString(options.context) || typeof options.context === "number") && options.context !== "";
          const codes = options.lngs ? options.lngs : this.languageUtils.toResolveHierarchy(options.lng || this.language, options.fallbackLng);
          namespaces.forEach((ns) => {
            if (this.isValidLookup(found)) return;
            usedNS = ns;
            if (!checkedLoadedFor[`${codes[0]}-${ns}`] && this.utils && this.utils.hasLoadedNamespace && !this.utils.hasLoadedNamespace(usedNS)) {
              checkedLoadedFor[`${codes[0]}-${ns}`] = true;
              this.logger.warn(`key "${usedKey}" for languages "${codes.join(", ")}" won't get resolved as namespace "${usedNS}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
            }
            codes.forEach((code) => {
              if (this.isValidLookup(found)) return;
              usedLng = code;
              const finalKeys = [key];
              if (this.i18nFormat && this.i18nFormat.addLookupKeys) {
                this.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
              } else {
                let pluralSuffix;
                if (needsPluralHandling) pluralSuffix = this.pluralResolver.getSuffix(code, options.count, options);
                const zeroSuffix = `${this.options.pluralSeparator}zero`;
                const ordinalPrefix = `${this.options.pluralSeparator}ordinal${this.options.pluralSeparator}`;
                if (needsPluralHandling) {
                  finalKeys.push(key + pluralSuffix);
                  if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                    finalKeys.push(key + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                  }
                  if (needsZeroSuffixLookup) {
                    finalKeys.push(key + zeroSuffix);
                  }
                }
                if (needsContextHandling) {
                  const contextKey = `${key}${this.options.contextSeparator}${options.context}`;
                  finalKeys.push(contextKey);
                  if (needsPluralHandling) {
                    finalKeys.push(contextKey + pluralSuffix);
                    if (options.ordinal && pluralSuffix.indexOf(ordinalPrefix) === 0) {
                      finalKeys.push(contextKey + pluralSuffix.replace(ordinalPrefix, this.options.pluralSeparator));
                    }
                    if (needsZeroSuffixLookup) {
                      finalKeys.push(contextKey + zeroSuffix);
                    }
                  }
                }
              }
              let possibleKey;
              while (possibleKey = finalKeys.pop()) {
                if (!this.isValidLookup(found)) {
                  exactUsedKey = possibleKey;
                  found = this.getResource(code, ns, possibleKey, options);
                }
              }
            });
          });
        });
        return {
          res: found,
          usedKey,
          exactUsedKey,
          usedLng,
          usedNS
        };
      }
      isValidLookup(res) {
        return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
      }
      getResource(code, ns, key) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
        return this.resourceStore.getResource(code, ns, key, options);
      }
      getUsedParamsDetails() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        const optionsKeys = ["defaultValue", "ordinal", "context", "replace", "lng", "lngs", "fallbackLng", "ns", "keySeparator", "nsSeparator", "returnObjects", "returnDetails", "joinArrays", "postProcess", "interpolation"];
        const useOptionsReplaceForData = options.replace && !isString(options.replace);
        let data = useOptionsReplaceForData ? options.replace : options;
        if (useOptionsReplaceForData && typeof options.count !== "undefined") {
          data.count = options.count;
        }
        if (this.options.interpolation.defaultVariables) {
          data = {
            ...this.options.interpolation.defaultVariables,
            ...data
          };
        }
        if (!useOptionsReplaceForData) {
          data = {
            ...data
          };
          for (const key of optionsKeys) {
            delete data[key];
          }
        }
        return data;
      }
      static hasDefaultValue(options) {
        const prefix = "defaultValue";
        for (const option in options) {
          if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && void 0 !== options[option]) {
            return true;
          }
        }
        return false;
      }
    };
    var capitalize = (string) => string.charAt(0).toUpperCase() + string.slice(1);
    var LanguageUtil = class {
      constructor(options) {
        this.options = options;
        this.supportedLngs = this.options.supportedLngs || false;
        this.logger = baseLogger.create("languageUtils");
      }
      getScriptPartFromCode(code) {
        code = getCleanedCode(code);
        if (!code || code.indexOf("-") < 0) return null;
        const p = code.split("-");
        if (p.length === 2) return null;
        p.pop();
        if (p[p.length - 1].toLowerCase() === "x") return null;
        return this.formatLanguageCode(p.join("-"));
      }
      getLanguagePartFromCode(code) {
        code = getCleanedCode(code);
        if (!code || code.indexOf("-") < 0) return code;
        const p = code.split("-");
        return this.formatLanguageCode(p[0]);
      }
      formatLanguageCode(code) {
        if (isString(code) && code.indexOf("-") > -1) {
          if (typeof Intl !== "undefined" && typeof Intl.getCanonicalLocales !== "undefined") {
            try {
              let formattedCode = Intl.getCanonicalLocales(code)[0];
              if (formattedCode && this.options.lowerCaseLng) {
                formattedCode = formattedCode.toLowerCase();
              }
              if (formattedCode) return formattedCode;
            } catch (e) {
            }
          }
          const specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
          let p = code.split("-");
          if (this.options.lowerCaseLng) {
            p = p.map((part) => part.toLowerCase());
          } else if (p.length === 2) {
            p[0] = p[0].toLowerCase();
            p[1] = p[1].toUpperCase();
            if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
          } else if (p.length === 3) {
            p[0] = p[0].toLowerCase();
            if (p[1].length === 2) p[1] = p[1].toUpperCase();
            if (p[0] !== "sgn" && p[2].length === 2) p[2] = p[2].toUpperCase();
            if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
            if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
          }
          return p.join("-");
        }
        return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
      }
      isSupportedCode(code) {
        if (this.options.load === "languageOnly" || this.options.nonExplicitSupportedLngs) {
          code = this.getLanguagePartFromCode(code);
        }
        return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
      }
      getBestMatchFromCodes(codes) {
        if (!codes) return null;
        let found;
        codes.forEach((code) => {
          if (found) return;
          const cleanedLng = this.formatLanguageCode(code);
          if (!this.options.supportedLngs || this.isSupportedCode(cleanedLng)) found = cleanedLng;
        });
        if (!found && this.options.supportedLngs) {
          codes.forEach((code) => {
            if (found) return;
            const lngOnly = this.getLanguagePartFromCode(code);
            if (this.isSupportedCode(lngOnly)) return found = lngOnly;
            found = this.options.supportedLngs.find((supportedLng) => {
              if (supportedLng === lngOnly) return supportedLng;
              if (supportedLng.indexOf("-") < 0 && lngOnly.indexOf("-") < 0) return;
              if (supportedLng.indexOf("-") > 0 && lngOnly.indexOf("-") < 0 && supportedLng.substring(0, supportedLng.indexOf("-")) === lngOnly) return supportedLng;
              if (supportedLng.indexOf(lngOnly) === 0 && lngOnly.length > 1) return supportedLng;
            });
          });
        }
        if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
        return found;
      }
      getFallbackCodes(fallbacks, code) {
        if (!fallbacks) return [];
        if (typeof fallbacks === "function") fallbacks = fallbacks(code);
        if (isString(fallbacks)) fallbacks = [fallbacks];
        if (Array.isArray(fallbacks)) return fallbacks;
        if (!code) return fallbacks.default || [];
        let found = fallbacks[code];
        if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
        if (!found) found = fallbacks[this.formatLanguageCode(code)];
        if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
        if (!found) found = fallbacks.default;
        return found || [];
      }
      toResolveHierarchy(code, fallbackCode) {
        const fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
        const codes = [];
        const addCode = (c) => {
          if (!c) return;
          if (this.isSupportedCode(c)) {
            codes.push(c);
          } else {
            this.logger.warn(`rejecting language code not found in supportedLngs: ${c}`);
          }
        };
        if (isString(code) && (code.indexOf("-") > -1 || code.indexOf("_") > -1)) {
          if (this.options.load !== "languageOnly") addCode(this.formatLanguageCode(code));
          if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly") addCode(this.getScriptPartFromCode(code));
          if (this.options.load !== "currentOnly") addCode(this.getLanguagePartFromCode(code));
        } else if (isString(code)) {
          addCode(this.formatLanguageCode(code));
        }
        fallbackCodes.forEach((fc) => {
          if (codes.indexOf(fc) < 0) addCode(this.formatLanguageCode(fc));
        });
        return codes;
      }
    };
    var sets = [{
      lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "pt", "pt-BR", "tg", "tl", "ti", "tr", "uz", "wa"],
      nr: [1, 2],
      fc: 1
    }, {
      lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "hi", "hu", "hy", "ia", "it", "kk", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt-PT", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"],
      nr: [1, 2],
      fc: 2
    }, {
      lngs: ["ay", "bo", "cgg", "fa", "ht", "id", "ja", "jbo", "ka", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"],
      nr: [1],
      fc: 3
    }, {
      lngs: ["be", "bs", "cnr", "dz", "hr", "ru", "sr", "uk"],
      nr: [1, 2, 5],
      fc: 4
    }, {
      lngs: ["ar"],
      nr: [0, 1, 2, 3, 11, 100],
      fc: 5
    }, {
      lngs: ["cs", "sk"],
      nr: [1, 2, 5],
      fc: 6
    }, {
      lngs: ["csb", "pl"],
      nr: [1, 2, 5],
      fc: 7
    }, {
      lngs: ["cy"],
      nr: [1, 2, 3, 8],
      fc: 8
    }, {
      lngs: ["fr"],
      nr: [1, 2],
      fc: 9
    }, {
      lngs: ["ga"],
      nr: [1, 2, 3, 7, 11],
      fc: 10
    }, {
      lngs: ["gd"],
      nr: [1, 2, 3, 20],
      fc: 11
    }, {
      lngs: ["is"],
      nr: [1, 2],
      fc: 12
    }, {
      lngs: ["jv"],
      nr: [0, 1],
      fc: 13
    }, {
      lngs: ["kw"],
      nr: [1, 2, 3, 4],
      fc: 14
    }, {
      lngs: ["lt"],
      nr: [1, 2, 10],
      fc: 15
    }, {
      lngs: ["lv"],
      nr: [1, 2, 0],
      fc: 16
    }, {
      lngs: ["mk"],
      nr: [1, 2],
      fc: 17
    }, {
      lngs: ["mnk"],
      nr: [0, 1, 2],
      fc: 18
    }, {
      lngs: ["mt"],
      nr: [1, 2, 11, 20],
      fc: 19
    }, {
      lngs: ["or"],
      nr: [2, 1],
      fc: 2
    }, {
      lngs: ["ro"],
      nr: [1, 2, 20],
      fc: 20
    }, {
      lngs: ["sl"],
      nr: [5, 1, 2, 3],
      fc: 21
    }, {
      lngs: ["he", "iw"],
      nr: [1, 2, 20, 21],
      fc: 22
    }];
    var _rulesPluralsTypes = {
      1: (n) => Number(n > 1),
      2: (n) => Number(n != 1),
      3: (n) => 0,
      4: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
      5: (n) => Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5),
      6: (n) => Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2),
      7: (n) => Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
      8: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3),
      9: (n) => Number(n >= 2),
      10: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4),
      11: (n) => Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3),
      12: (n) => Number(n % 10 != 1 || n % 100 == 11),
      13: (n) => Number(n !== 0),
      14: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3),
      15: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2),
      16: (n) => Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2),
      17: (n) => Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1),
      18: (n) => Number(n == 0 ? 0 : n == 1 ? 1 : 2),
      19: (n) => Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3),
      20: (n) => Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2),
      21: (n) => Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0),
      22: (n) => Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3)
    };
    var nonIntlVersions = ["v1", "v2", "v3"];
    var intlVersions = ["v4"];
    var suffixesOrder = {
      zero: 0,
      one: 1,
      two: 2,
      few: 3,
      many: 4,
      other: 5
    };
    var createRules = () => {
      const rules = {};
      sets.forEach((set) => {
        set.lngs.forEach((l) => {
          rules[l] = {
            numbers: set.nr,
            plurals: _rulesPluralsTypes[set.fc]
          };
        });
      });
      return rules;
    };
    var PluralResolver = class {
      constructor(languageUtils) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        this.languageUtils = languageUtils;
        this.options = options;
        this.logger = baseLogger.create("pluralResolver");
        if ((!this.options.compatibilityJSON || intlVersions.includes(this.options.compatibilityJSON)) && (typeof Intl === "undefined" || !Intl.PluralRules)) {
          this.options.compatibilityJSON = "v3";
          this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.");
        }
        this.rules = createRules();
        this.pluralRulesCache = {};
      }
      addRule(lng, obj) {
        this.rules[lng] = obj;
      }
      clearCache() {
        this.pluralRulesCache = {};
      }
      getRule(code) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (this.shouldUseIntlApi()) {
          const cleanedCode = getCleanedCode(code === "dev" ? "en" : code);
          const type = options.ordinal ? "ordinal" : "cardinal";
          const cacheKey = JSON.stringify({
            cleanedCode,
            type
          });
          if (cacheKey in this.pluralRulesCache) {
            return this.pluralRulesCache[cacheKey];
          }
          let rule;
          try {
            rule = new Intl.PluralRules(cleanedCode, {
              type
            });
          } catch (err) {
            if (!code.match(/-|_/)) return;
            const lngPart = this.languageUtils.getLanguagePartFromCode(code);
            rule = this.getRule(lngPart, options);
          }
          this.pluralRulesCache[cacheKey] = rule;
          return rule;
        }
        return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
      }
      needsPlural(code) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const rule = this.getRule(code, options);
        if (this.shouldUseIntlApi()) {
          return rule && rule.resolvedOptions().pluralCategories.length > 1;
        }
        return rule && rule.numbers.length > 1;
      }
      getPluralFormsOfKey(code, key) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        return this.getSuffixes(code, options).map((suffix) => `${key}${suffix}`);
      }
      getSuffixes(code) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        const rule = this.getRule(code, options);
        if (!rule) {
          return [];
        }
        if (this.shouldUseIntlApi()) {
          return rule.resolvedOptions().pluralCategories.sort((pluralCategory1, pluralCategory2) => suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2]).map((pluralCategory) => `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${pluralCategory}`);
        }
        return rule.numbers.map((number) => this.getSuffix(code, number, options));
      }
      getSuffix(code, count) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        const rule = this.getRule(code, options);
        if (rule) {
          if (this.shouldUseIntlApi()) {
            return `${this.options.prepend}${options.ordinal ? `ordinal${this.options.prepend}` : ""}${rule.select(count)}`;
          }
          return this.getSuffixRetroCompatible(rule, count);
        }
        this.logger.warn(`no plural rule found for: ${code}`);
        return "";
      }
      getSuffixRetroCompatible(rule, count) {
        const idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
        let suffix = rule.numbers[idx];
        if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          if (suffix === 2) {
            suffix = "plural";
          } else if (suffix === 1) {
            suffix = "";
          }
        }
        const returnSuffix = () => this.options.prepend && suffix.toString() ? this.options.prepend + suffix.toString() : suffix.toString();
        if (this.options.compatibilityJSON === "v1") {
          if (suffix === 1) return "";
          if (typeof suffix === "number") return `_plural_${suffix.toString()}`;
          return returnSuffix();
        } else if (this.options.compatibilityJSON === "v2") {
          return returnSuffix();
        } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
          return returnSuffix();
        }
        return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
      }
      shouldUseIntlApi() {
        return !nonIntlVersions.includes(this.options.compatibilityJSON);
      }
    };
    var deepFindWithDefaults = function(data, defaultData, key) {
      let keySeparator = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : ".";
      let ignoreJSONStructure = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
      let path = getPathWithDefaults(data, defaultData, key);
      if (!path && ignoreJSONStructure && isString(key)) {
        path = deepFind(data, key, keySeparator);
        if (path === void 0) path = deepFind(defaultData, key, keySeparator);
      }
      return path;
    };
    var regexSafe = (val) => val.replace(/\$/g, "$$$$");
    var Interpolator = class {
      constructor() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.logger = baseLogger.create("interpolator");
        this.options = options;
        this.format = options.interpolation && options.interpolation.format || ((value) => value);
        this.init(options);
      }
      init() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        if (!options.interpolation) options.interpolation = {
          escapeValue: true
        };
        const {
          escape: escape$1,
          escapeValue,
          useRawValueToEscape,
          prefix,
          prefixEscaped,
          suffix,
          suffixEscaped,
          formatSeparator,
          unescapeSuffix,
          unescapePrefix,
          nestingPrefix,
          nestingPrefixEscaped,
          nestingSuffix,
          nestingSuffixEscaped,
          nestingOptionsSeparator,
          maxReplaces,
          alwaysFormat
        } = options.interpolation;
        this.escape = escape$1 !== void 0 ? escape$1 : escape;
        this.escapeValue = escapeValue !== void 0 ? escapeValue : true;
        this.useRawValueToEscape = useRawValueToEscape !== void 0 ? useRawValueToEscape : false;
        this.prefix = prefix ? regexEscape(prefix) : prefixEscaped || "{{";
        this.suffix = suffix ? regexEscape(suffix) : suffixEscaped || "}}";
        this.formatSeparator = formatSeparator || ",";
        this.unescapePrefix = unescapeSuffix ? "" : unescapePrefix || "-";
        this.unescapeSuffix = this.unescapePrefix ? "" : unescapeSuffix || "";
        this.nestingPrefix = nestingPrefix ? regexEscape(nestingPrefix) : nestingPrefixEscaped || regexEscape("$t(");
        this.nestingSuffix = nestingSuffix ? regexEscape(nestingSuffix) : nestingSuffixEscaped || regexEscape(")");
        this.nestingOptionsSeparator = nestingOptionsSeparator || ",";
        this.maxReplaces = maxReplaces || 1e3;
        this.alwaysFormat = alwaysFormat !== void 0 ? alwaysFormat : false;
        this.resetRegExp();
      }
      reset() {
        if (this.options) this.init(this.options);
      }
      resetRegExp() {
        const getOrResetRegExp = (existingRegExp, pattern) => {
          if (existingRegExp && existingRegExp.source === pattern) {
            existingRegExp.lastIndex = 0;
            return existingRegExp;
          }
          return new RegExp(pattern, "g");
        };
        this.regexp = getOrResetRegExp(this.regexp, `${this.prefix}(.+?)${this.suffix}`);
        this.regexpUnescape = getOrResetRegExp(this.regexpUnescape, `${this.prefix}${this.unescapePrefix}(.+?)${this.unescapeSuffix}${this.suffix}`);
        this.nestingRegexp = getOrResetRegExp(this.nestingRegexp, `${this.nestingPrefix}(.+?)${this.nestingSuffix}`);
      }
      interpolate(str, data, lng, options) {
        let match;
        let value;
        let replaces;
        const defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};
        const handleFormat = (key) => {
          if (key.indexOf(this.formatSeparator) < 0) {
            const path = deepFindWithDefaults(data, defaultData, key, this.options.keySeparator, this.options.ignoreJSONStructure);
            return this.alwaysFormat ? this.format(path, void 0, lng, {
              ...options,
              ...data,
              interpolationkey: key
            }) : path;
          }
          const p = key.split(this.formatSeparator);
          const k = p.shift().trim();
          const f = p.join(this.formatSeparator).trim();
          return this.format(deepFindWithDefaults(data, defaultData, k, this.options.keySeparator, this.options.ignoreJSONStructure), f, lng, {
            ...options,
            ...data,
            interpolationkey: k
          });
        };
        this.resetRegExp();
        const missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
        const skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== void 0 ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
        const todos = [{
          regex: this.regexpUnescape,
          safeValue: (val) => regexSafe(val)
        }, {
          regex: this.regexp,
          safeValue: (val) => this.escapeValue ? regexSafe(this.escape(val)) : regexSafe(val)
        }];
        todos.forEach((todo) => {
          replaces = 0;
          while (match = todo.regex.exec(str)) {
            const matchedVar = match[1].trim();
            value = handleFormat(matchedVar);
            if (value === void 0) {
              if (typeof missingInterpolationHandler === "function") {
                const temp = missingInterpolationHandler(str, match, options);
                value = isString(temp) ? temp : "";
              } else if (options && Object.prototype.hasOwnProperty.call(options, matchedVar)) {
                value = "";
              } else if (skipOnVariables) {
                value = match[0];
                continue;
              } else {
                this.logger.warn(`missed to pass in variable ${matchedVar} for interpolating ${str}`);
                value = "";
              }
            } else if (!isString(value) && !this.useRawValueToEscape) {
              value = makeString(value);
            }
            const safeValue = todo.safeValue(value);
            str = str.replace(match[0], safeValue);
            if (skipOnVariables) {
              todo.regex.lastIndex += value.length;
              todo.regex.lastIndex -= match[0].length;
            } else {
              todo.regex.lastIndex = 0;
            }
            replaces++;
            if (replaces >= this.maxReplaces) {
              break;
            }
          }
        });
        return str;
      }
      nest(str, fc) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        let match;
        let value;
        let clonedOptions;
        const handleHasOptions = (key, inheritedOptions) => {
          const sep = this.nestingOptionsSeparator;
          if (key.indexOf(sep) < 0) return key;
          const c = key.split(new RegExp(`${sep}[ ]*{`));
          let optionsString = `{${c[1]}`;
          key = c[0];
          optionsString = this.interpolate(optionsString, clonedOptions);
          const matchedSingleQuotes = optionsString.match(/'/g);
          const matchedDoubleQuotes = optionsString.match(/"/g);
          if (matchedSingleQuotes && matchedSingleQuotes.length % 2 === 0 && !matchedDoubleQuotes || matchedDoubleQuotes.length % 2 !== 0) {
            optionsString = optionsString.replace(/'/g, '"');
          }
          try {
            clonedOptions = JSON.parse(optionsString);
            if (inheritedOptions) clonedOptions = {
              ...inheritedOptions,
              ...clonedOptions
            };
          } catch (e) {
            this.logger.warn(`failed parsing options string in nesting for key ${key}`, e);
            return `${key}${sep}${optionsString}`;
          }
          if (clonedOptions.defaultValue && clonedOptions.defaultValue.indexOf(this.prefix) > -1) delete clonedOptions.defaultValue;
          return key;
        };
        while (match = this.nestingRegexp.exec(str)) {
          let formatters = [];
          clonedOptions = {
            ...options
          };
          clonedOptions = clonedOptions.replace && !isString(clonedOptions.replace) ? clonedOptions.replace : clonedOptions;
          clonedOptions.applyPostProcessor = false;
          delete clonedOptions.defaultValue;
          let doReduce = false;
          if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
            const r = match[1].split(this.formatSeparator).map((elem) => elem.trim());
            match[1] = r.shift();
            formatters = r;
            doReduce = true;
          }
          value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
          if (value && match[0] === str && !isString(value)) return value;
          if (!isString(value)) value = makeString(value);
          if (!value) {
            this.logger.warn(`missed to resolve ${match[1]} for nesting ${str}`);
            value = "";
          }
          if (doReduce) {
            value = formatters.reduce((v, f) => this.format(v, f, options.lng, {
              ...options,
              interpolationkey: match[1].trim()
            }), value.trim());
          }
          str = str.replace(match[0], value);
          this.regexp.lastIndex = 0;
        }
        return str;
      }
    };
    var parseFormatStr = (formatStr) => {
      let formatName = formatStr.toLowerCase().trim();
      const formatOptions = {};
      if (formatStr.indexOf("(") > -1) {
        const p = formatStr.split("(");
        formatName = p[0].toLowerCase().trim();
        const optStr = p[1].substring(0, p[1].length - 1);
        if (formatName === "currency" && optStr.indexOf(":") < 0) {
          if (!formatOptions.currency) formatOptions.currency = optStr.trim();
        } else if (formatName === "relativetime" && optStr.indexOf(":") < 0) {
          if (!formatOptions.range) formatOptions.range = optStr.trim();
        } else {
          const opts = optStr.split(";");
          opts.forEach((opt) => {
            if (opt) {
              const [key, ...rest] = opt.split(":");
              const val = rest.join(":").trim().replace(/^'+|'+$/g, "");
              const trimmedKey = key.trim();
              if (!formatOptions[trimmedKey]) formatOptions[trimmedKey] = val;
              if (val === "false") formatOptions[trimmedKey] = false;
              if (val === "true") formatOptions[trimmedKey] = true;
              if (!isNaN(val)) formatOptions[trimmedKey] = parseInt(val, 10);
            }
          });
        }
      }
      return {
        formatName,
        formatOptions
      };
    };
    var createCachedFormatter = (fn) => {
      const cache = {};
      return (val, lng, options) => {
        let optForCache = options;
        if (options && options.interpolationkey && options.formatParams && options.formatParams[options.interpolationkey] && options[options.interpolationkey]) {
          optForCache = {
            ...optForCache,
            [options.interpolationkey]: void 0
          };
        }
        const key = lng + JSON.stringify(optForCache);
        let formatter = cache[key];
        if (!formatter) {
          formatter = fn(getCleanedCode(lng), options);
          cache[key] = formatter;
        }
        return formatter(val);
      };
    };
    var Formatter = class {
      constructor() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        this.logger = baseLogger.create("formatter");
        this.options = options;
        this.formats = {
          number: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.NumberFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          }),
          currency: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.NumberFormat(lng, {
              ...opt,
              style: "currency"
            });
            return (val) => formatter.format(val);
          }),
          datetime: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.DateTimeFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          }),
          relativetime: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.RelativeTimeFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val, opt.range || "day");
          }),
          list: createCachedFormatter((lng, opt) => {
            const formatter = new Intl.ListFormat(lng, {
              ...opt
            });
            return (val) => formatter.format(val);
          })
        };
        this.init(options);
      }
      init(services) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
          interpolation: {}
        };
        this.formatSeparator = options.interpolation.formatSeparator || ",";
      }
      add(name, fc) {
        this.formats[name.toLowerCase().trim()] = fc;
      }
      addCached(name, fc) {
        this.formats[name.toLowerCase().trim()] = createCachedFormatter(fc);
      }
      format(value, format, lng) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        const formats = format.split(this.formatSeparator);
        if (formats.length > 1 && formats[0].indexOf("(") > 1 && formats[0].indexOf(")") < 0 && formats.find((f) => f.indexOf(")") > -1)) {
          const lastIndex = formats.findIndex((f) => f.indexOf(")") > -1);
          formats[0] = [formats[0], ...formats.splice(1, lastIndex)].join(this.formatSeparator);
        }
        const result = formats.reduce((mem, f) => {
          const {
            formatName,
            formatOptions
          } = parseFormatStr(f);
          if (this.formats[formatName]) {
            let formatted = mem;
            try {
              const valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
              const l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
              formatted = this.formats[formatName](mem, l, {
                ...formatOptions,
                ...options,
                ...valOptions
              });
            } catch (error) {
              this.logger.warn(error);
            }
            return formatted;
          } else {
            this.logger.warn(`there was no format function for ${formatName}`);
          }
          return mem;
        }, value);
        return result;
      }
    };
    var removePending = (q, name) => {
      if (q.pending[name] !== void 0) {
        delete q.pending[name];
        q.pendingCount--;
      }
    };
    var Connector = class extends EventEmitter {
      constructor(backend, store, services) {
        let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
        super();
        this.backend = backend;
        this.store = store;
        this.services = services;
        this.languageUtils = services.languageUtils;
        this.options = options;
        this.logger = baseLogger.create("backendConnector");
        this.waitingReads = [];
        this.maxParallelReads = options.maxParallelReads || 10;
        this.readingCalls = 0;
        this.maxRetries = options.maxRetries >= 0 ? options.maxRetries : 5;
        this.retryTimeout = options.retryTimeout >= 1 ? options.retryTimeout : 350;
        this.state = {};
        this.queue = [];
        if (this.backend && this.backend.init) {
          this.backend.init(services, options.backend, options);
        }
      }
      queueLoad(languages, namespaces, options, callback) {
        const toLoad = {};
        const pending = {};
        const toLoadLanguages = {};
        const toLoadNamespaces = {};
        languages.forEach((lng) => {
          let hasAllNamespaces = true;
          namespaces.forEach((ns) => {
            const name = `${lng}|${ns}`;
            if (!options.reload && this.store.hasResourceBundle(lng, ns)) {
              this.state[name] = 2;
            } else if (this.state[name] < 0) ;
            else if (this.state[name] === 1) {
              if (pending[name] === void 0) pending[name] = true;
            } else {
              this.state[name] = 1;
              hasAllNamespaces = false;
              if (pending[name] === void 0) pending[name] = true;
              if (toLoad[name] === void 0) toLoad[name] = true;
              if (toLoadNamespaces[ns] === void 0) toLoadNamespaces[ns] = true;
            }
          });
          if (!hasAllNamespaces) toLoadLanguages[lng] = true;
        });
        if (Object.keys(toLoad).length || Object.keys(pending).length) {
          this.queue.push({
            pending,
            pendingCount: Object.keys(pending).length,
            loaded: {},
            errors: [],
            callback
          });
        }
        return {
          toLoad: Object.keys(toLoad),
          pending: Object.keys(pending),
          toLoadLanguages: Object.keys(toLoadLanguages),
          toLoadNamespaces: Object.keys(toLoadNamespaces)
        };
      }
      loaded(name, err, data) {
        const s = name.split("|");
        const lng = s[0];
        const ns = s[1];
        if (err) this.emit("failedLoading", lng, ns, err);
        if (!err && data) {
          this.store.addResourceBundle(lng, ns, data, void 0, void 0, {
            skipCopy: true
          });
        }
        this.state[name] = err ? -1 : 2;
        if (err && data) this.state[name] = 0;
        const loaded = {};
        this.queue.forEach((q) => {
          pushPath(q.loaded, [lng], ns);
          removePending(q, name);
          if (err) q.errors.push(err);
          if (q.pendingCount === 0 && !q.done) {
            Object.keys(q.loaded).forEach((l) => {
              if (!loaded[l]) loaded[l] = {};
              const loadedKeys = q.loaded[l];
              if (loadedKeys.length) {
                loadedKeys.forEach((n) => {
                  if (loaded[l][n] === void 0) loaded[l][n] = true;
                });
              }
            });
            q.done = true;
            if (q.errors.length) {
              q.callback(q.errors);
            } else {
              q.callback();
            }
          }
        });
        this.emit("loaded", loaded);
        this.queue = this.queue.filter((q) => !q.done);
      }
      read(lng, ns, fcName) {
        let tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
        let wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : this.retryTimeout;
        let callback = arguments.length > 5 ? arguments[5] : void 0;
        if (!lng.length) return callback(null, {});
        if (this.readingCalls >= this.maxParallelReads) {
          this.waitingReads.push({
            lng,
            ns,
            fcName,
            tried,
            wait,
            callback
          });
          return;
        }
        this.readingCalls++;
        const resolver = (err, data) => {
          this.readingCalls--;
          if (this.waitingReads.length > 0) {
            const next = this.waitingReads.shift();
            this.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
          }
          if (err && data && tried < this.maxRetries) {
            setTimeout(() => {
              this.read.call(this, lng, ns, fcName, tried + 1, wait * 2, callback);
            }, wait);
            return;
          }
          callback(err, data);
        };
        const fc = this.backend[fcName].bind(this.backend);
        if (fc.length === 2) {
          try {
            const r = fc(lng, ns);
            if (r && typeof r.then === "function") {
              r.then((data) => resolver(null, data)).catch(resolver);
            } else {
              resolver(null, r);
            }
          } catch (err) {
            resolver(err);
          }
          return;
        }
        return fc(lng, ns, resolver);
      }
      prepareLoading(languages, namespaces) {
        let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        let callback = arguments.length > 3 ? arguments[3] : void 0;
        if (!this.backend) {
          this.logger.warn("No backend was added via i18next.use. Will not load resources.");
          return callback && callback();
        }
        if (isString(languages)) languages = this.languageUtils.toResolveHierarchy(languages);
        if (isString(namespaces)) namespaces = [namespaces];
        const toLoad = this.queueLoad(languages, namespaces, options, callback);
        if (!toLoad.toLoad.length) {
          if (!toLoad.pending.length) callback();
          return null;
        }
        toLoad.toLoad.forEach((name) => {
          this.loadOne(name);
        });
      }
      load(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {}, callback);
      }
      reload(languages, namespaces, callback) {
        this.prepareLoading(languages, namespaces, {
          reload: true
        }, callback);
      }
      loadOne(name) {
        let prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        const s = name.split("|");
        const lng = s[0];
        const ns = s[1];
        this.read(lng, ns, "read", void 0, void 0, (err, data) => {
          if (err) this.logger.warn(`${prefix}loading namespace ${ns} for language ${lng} failed`, err);
          if (!err && data) this.logger.log(`${prefix}loaded namespace ${ns} for language ${lng}`, data);
          this.loaded(name, err, data);
        });
      }
      saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
        let options = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : {};
        let clb = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : () => {
        };
        if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
          this.logger.warn(`did not save key "${key}" as the namespace "${namespace}" was not yet loaded`, "This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");
          return;
        }
        if (key === void 0 || key === null || key === "") return;
        if (this.backend && this.backend.create) {
          const opts = {
            ...options,
            isUpdate
          };
          const fc = this.backend.create.bind(this.backend);
          if (fc.length < 6) {
            try {
              let r;
              if (fc.length === 5) {
                r = fc(languages, namespace, key, fallbackValue, opts);
              } else {
                r = fc(languages, namespace, key, fallbackValue);
              }
              if (r && typeof r.then === "function") {
                r.then((data) => clb(null, data)).catch(clb);
              } else {
                clb(null, r);
              }
            } catch (err) {
              clb(err);
            }
          } else {
            fc(languages, namespace, key, fallbackValue, clb, opts);
          }
        }
        if (!languages || !languages[0]) return;
        this.store.addResource(languages[0], namespace, key, fallbackValue);
      }
    };
    var get = () => ({
      debug: false,
      initImmediate: true,
      ns: ["translation"],
      defaultNS: ["translation"],
      fallbackLng: ["dev"],
      fallbackNS: false,
      supportedLngs: false,
      nonExplicitSupportedLngs: false,
      load: "all",
      preload: false,
      simplifyPluralSuffix: true,
      keySeparator: ".",
      nsSeparator: ":",
      pluralSeparator: "_",
      contextSeparator: "_",
      partialBundledLanguages: false,
      saveMissing: false,
      updateMissing: false,
      saveMissingTo: "fallback",
      saveMissingPlurals: true,
      missingKeyHandler: false,
      missingInterpolationHandler: false,
      postProcess: false,
      postProcessPassResolved: false,
      returnNull: false,
      returnEmptyString: true,
      returnObjects: false,
      joinArrays: false,
      returnedObjectHandler: false,
      parseMissingKeyHandler: false,
      appendNamespaceToMissingKey: false,
      appendNamespaceToCIMode: false,
      overloadTranslationOptionHandler: (args) => {
        let ret = {};
        if (typeof args[1] === "object") ret = args[1];
        if (isString(args[1])) ret.defaultValue = args[1];
        if (isString(args[2])) ret.tDescription = args[2];
        if (typeof args[2] === "object" || typeof args[3] === "object") {
          const options = args[3] || args[2];
          Object.keys(options).forEach((key) => {
            ret[key] = options[key];
          });
        }
        return ret;
      },
      interpolation: {
        escapeValue: true,
        format: (value) => value,
        prefix: "{{",
        suffix: "}}",
        formatSeparator: ",",
        unescapePrefix: "-",
        nestingPrefix: "$t(",
        nestingSuffix: ")",
        nestingOptionsSeparator: ",",
        maxReplaces: 1e3,
        skipOnVariables: true
      }
    });
    var transformOptions = (options) => {
      if (isString(options.ns)) options.ns = [options.ns];
      if (isString(options.fallbackLng)) options.fallbackLng = [options.fallbackLng];
      if (isString(options.fallbackNS)) options.fallbackNS = [options.fallbackNS];
      if (options.supportedLngs && options.supportedLngs.indexOf("cimode") < 0) {
        options.supportedLngs = options.supportedLngs.concat(["cimode"]);
      }
      return options;
    };
    var noop = () => {
    };
    var bindMemberFunctions = (inst) => {
      const mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
      mems.forEach((mem) => {
        if (typeof inst[mem] === "function") {
          inst[mem] = inst[mem].bind(inst);
        }
      });
    };
    var I18n = class _I18n extends EventEmitter {
      constructor() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 ? arguments[1] : void 0;
        super();
        this.options = transformOptions(options);
        this.services = {};
        this.logger = baseLogger;
        this.modules = {
          external: []
        };
        bindMemberFunctions(this);
        if (callback && !this.isInitialized && !options.isClone) {
          if (!this.options.initImmediate) {
            this.init(options, callback);
            return this;
          }
          setTimeout(() => {
            this.init(options, callback);
          }, 0);
        }
      }
      init() {
        var _this = this;
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 ? arguments[1] : void 0;
        this.isInitializing = true;
        if (typeof options === "function") {
          callback = options;
          options = {};
        }
        if (!options.defaultNS && options.defaultNS !== false && options.ns) {
          if (isString(options.ns)) {
            options.defaultNS = options.ns;
          } else if (options.ns.indexOf("translation") < 0) {
            options.defaultNS = options.ns[0];
          }
        }
        const defOpts = get();
        this.options = {
          ...defOpts,
          ...this.options,
          ...transformOptions(options)
        };
        if (this.options.compatibilityAPI !== "v1") {
          this.options.interpolation = {
            ...defOpts.interpolation,
            ...this.options.interpolation
          };
        }
        if (options.keySeparator !== void 0) {
          this.options.userDefinedKeySeparator = options.keySeparator;
        }
        if (options.nsSeparator !== void 0) {
          this.options.userDefinedNsSeparator = options.nsSeparator;
        }
        const createClassOnDemand = (ClassOrObject) => {
          if (!ClassOrObject) return null;
          if (typeof ClassOrObject === "function") return new ClassOrObject();
          return ClassOrObject;
        };
        if (!this.options.isClone) {
          if (this.modules.logger) {
            baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
          } else {
            baseLogger.init(null, this.options);
          }
          let formatter;
          if (this.modules.formatter) {
            formatter = this.modules.formatter;
          } else if (typeof Intl !== "undefined") {
            formatter = Formatter;
          }
          const lu = new LanguageUtil(this.options);
          this.store = new ResourceStore(this.options.resources, this.options);
          const s = this.services;
          s.logger = baseLogger;
          s.resourceStore = this.store;
          s.languageUtils = lu;
          s.pluralResolver = new PluralResolver(lu, {
            prepend: this.options.pluralSeparator,
            compatibilityJSON: this.options.compatibilityJSON,
            simplifyPluralSuffix: this.options.simplifyPluralSuffix
          });
          if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
            s.formatter = createClassOnDemand(formatter);
            s.formatter.init(s, this.options);
            this.options.interpolation.format = s.formatter.format.bind(s.formatter);
          }
          s.interpolator = new Interpolator(this.options);
          s.utils = {
            hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
          };
          s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
          s.backendConnector.on("*", function(event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            _this.emit(event, ...args);
          });
          if (this.modules.languageDetector) {
            s.languageDetector = createClassOnDemand(this.modules.languageDetector);
            if (s.languageDetector.init) s.languageDetector.init(s, this.options.detection, this.options);
          }
          if (this.modules.i18nFormat) {
            s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
            if (s.i18nFormat.init) s.i18nFormat.init(this);
          }
          this.translator = new Translator(this.services, this.options);
          this.translator.on("*", function(event) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            _this.emit(event, ...args);
          });
          this.modules.external.forEach((m) => {
            if (m.init) m.init(this);
          });
        }
        this.format = this.options.interpolation.format;
        if (!callback) callback = noop;
        if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
          const codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
          if (codes.length > 0 && codes[0] !== "dev") this.options.lng = codes[0];
        }
        if (!this.services.languageDetector && !this.options.lng) {
          this.logger.warn("init: no languageDetector is used and no lng is defined");
        }
        const storeApi = ["getResource", "hasResourceBundle", "getResourceBundle", "getDataByLanguage"];
        storeApi.forEach((fcName) => {
          this[fcName] = function() {
            return _this.store[fcName](...arguments);
          };
        });
        const storeApiChained = ["addResource", "addResources", "addResourceBundle", "removeResourceBundle"];
        storeApiChained.forEach((fcName) => {
          this[fcName] = function() {
            _this.store[fcName](...arguments);
            return _this;
          };
        });
        const deferred = defer();
        const load = () => {
          const finish = (err, t) => {
            this.isInitializing = false;
            if (this.isInitialized && !this.initializedStoreOnce) this.logger.warn("init: i18next is already initialized. You should call init just once!");
            this.isInitialized = true;
            if (!this.options.isClone) this.logger.log("initialized", this.options);
            this.emit("initialized", this.options);
            deferred.resolve(t);
            callback(err, t);
          };
          if (this.languages && this.options.compatibilityAPI !== "v1" && !this.isInitialized) return finish(null, this.t.bind(this));
          this.changeLanguage(this.options.lng, finish);
        };
        if (this.options.resources || !this.options.initImmediate) {
          load();
        } else {
          setTimeout(load, 0);
        }
        return deferred;
      }
      loadResources(language) {
        let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
        let usedCallback = callback;
        const usedLng = isString(language) ? language : this.language;
        if (typeof language === "function") usedCallback = language;
        if (!this.options.resources || this.options.partialBundledLanguages) {
          if (usedLng && usedLng.toLowerCase() === "cimode" && (!this.options.preload || this.options.preload.length === 0)) return usedCallback();
          const toLoad = [];
          const append = (lng) => {
            if (!lng) return;
            if (lng === "cimode") return;
            const lngs = this.services.languageUtils.toResolveHierarchy(lng);
            lngs.forEach((l) => {
              if (l === "cimode") return;
              if (toLoad.indexOf(l) < 0) toLoad.push(l);
            });
          };
          if (!usedLng) {
            const fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
            fallbacks.forEach((l) => append(l));
          } else {
            append(usedLng);
          }
          if (this.options.preload) {
            this.options.preload.forEach((l) => append(l));
          }
          this.services.backendConnector.load(toLoad, this.options.ns, (e) => {
            if (!e && !this.resolvedLanguage && this.language) this.setResolvedLanguage(this.language);
            usedCallback(e);
          });
        } else {
          usedCallback(null);
        }
      }
      reloadResources(lngs, ns, callback) {
        const deferred = defer();
        if (typeof lngs === "function") {
          callback = lngs;
          lngs = void 0;
        }
        if (typeof ns === "function") {
          callback = ns;
          ns = void 0;
        }
        if (!lngs) lngs = this.languages;
        if (!ns) ns = this.options.ns;
        if (!callback) callback = noop;
        this.services.backendConnector.reload(lngs, ns, (err) => {
          deferred.resolve();
          callback(err);
        });
        return deferred;
      }
      use(module2) {
        if (!module2) throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");
        if (!module2.type) throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");
        if (module2.type === "backend") {
          this.modules.backend = module2;
        }
        if (module2.type === "logger" || module2.log && module2.warn && module2.error) {
          this.modules.logger = module2;
        }
        if (module2.type === "languageDetector") {
          this.modules.languageDetector = module2;
        }
        if (module2.type === "i18nFormat") {
          this.modules.i18nFormat = module2;
        }
        if (module2.type === "postProcessor") {
          postProcessor.addPostProcessor(module2);
        }
        if (module2.type === "formatter") {
          this.modules.formatter = module2;
        }
        if (module2.type === "3rdParty") {
          this.modules.external.push(module2);
        }
        return this;
      }
      setResolvedLanguage(l) {
        if (!l || !this.languages) return;
        if (["cimode", "dev"].indexOf(l) > -1) return;
        for (let li = 0; li < this.languages.length; li++) {
          const lngInLngs = this.languages[li];
          if (["cimode", "dev"].indexOf(lngInLngs) > -1) continue;
          if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
            this.resolvedLanguage = lngInLngs;
            break;
          }
        }
      }
      changeLanguage(lng, callback) {
        var _this2 = this;
        this.isLanguageChangingTo = lng;
        const deferred = defer();
        this.emit("languageChanging", lng);
        const setLngProps = (l) => {
          this.language = l;
          this.languages = this.services.languageUtils.toResolveHierarchy(l);
          this.resolvedLanguage = void 0;
          this.setResolvedLanguage(l);
        };
        const done = (err, l) => {
          if (l) {
            setLngProps(l);
            this.translator.changeLanguage(l);
            this.isLanguageChangingTo = void 0;
            this.emit("languageChanged", l);
            this.logger.log("languageChanged", l);
          } else {
            this.isLanguageChangingTo = void 0;
          }
          deferred.resolve(function() {
            return _this2.t(...arguments);
          });
          if (callback) callback(err, function() {
            return _this2.t(...arguments);
          });
        };
        const setLng = (lngs) => {
          if (!lng && !lngs && this.services.languageDetector) lngs = [];
          const l = isString(lngs) ? lngs : this.services.languageUtils.getBestMatchFromCodes(lngs);
          if (l) {
            if (!this.language) {
              setLngProps(l);
            }
            if (!this.translator.language) this.translator.changeLanguage(l);
            if (this.services.languageDetector && this.services.languageDetector.cacheUserLanguage) this.services.languageDetector.cacheUserLanguage(l);
          }
          this.loadResources(l, (err) => {
            done(err, l);
          });
        };
        if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
          setLng(this.services.languageDetector.detect());
        } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
          if (this.services.languageDetector.detect.length === 0) {
            this.services.languageDetector.detect().then(setLng);
          } else {
            this.services.languageDetector.detect(setLng);
          }
        } else {
          setLng(lng);
        }
        return deferred;
      }
      getFixedT(lng, ns, keyPrefix) {
        var _this3 = this;
        const fixedT = function(key, opts) {
          let options;
          if (typeof opts !== "object") {
            for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
              rest[_key3 - 2] = arguments[_key3];
            }
            options = _this3.options.overloadTranslationOptionHandler([key, opts].concat(rest));
          } else {
            options = {
              ...opts
            };
          }
          options.lng = options.lng || fixedT.lng;
          options.lngs = options.lngs || fixedT.lngs;
          options.ns = options.ns || fixedT.ns;
          if (options.keyPrefix !== "") options.keyPrefix = options.keyPrefix || keyPrefix || fixedT.keyPrefix;
          const keySeparator = _this3.options.keySeparator || ".";
          let resultKey;
          if (options.keyPrefix && Array.isArray(key)) {
            resultKey = key.map((k) => `${options.keyPrefix}${keySeparator}${k}`);
          } else {
            resultKey = options.keyPrefix ? `${options.keyPrefix}${keySeparator}${key}` : key;
          }
          return _this3.t(resultKey, options);
        };
        if (isString(lng)) {
          fixedT.lng = lng;
        } else {
          fixedT.lngs = lng;
        }
        fixedT.ns = ns;
        fixedT.keyPrefix = keyPrefix;
        return fixedT;
      }
      t() {
        return this.translator && this.translator.translate(...arguments);
      }
      exists() {
        return this.translator && this.translator.exists(...arguments);
      }
      setDefaultNamespace(ns) {
        this.options.defaultNS = ns;
      }
      hasLoadedNamespace(ns) {
        let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (!this.isInitialized) {
          this.logger.warn("hasLoadedNamespace: i18next was not initialized", this.languages);
          return false;
        }
        if (!this.languages || !this.languages.length) {
          this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty", this.languages);
          return false;
        }
        const lng = options.lng || this.resolvedLanguage || this.languages[0];
        const fallbackLng = this.options ? this.options.fallbackLng : false;
        const lastLng = this.languages[this.languages.length - 1];
        if (lng.toLowerCase() === "cimode") return true;
        const loadNotPending = (l, n) => {
          const loadState = this.services.backendConnector.state[`${l}|${n}`];
          return loadState === -1 || loadState === 0 || loadState === 2;
        };
        if (options.precheck) {
          const preResult = options.precheck(this, loadNotPending);
          if (preResult !== void 0) return preResult;
        }
        if (this.hasResourceBundle(lng, ns)) return true;
        if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
        if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
        return false;
      }
      loadNamespaces(ns, callback) {
        const deferred = defer();
        if (!this.options.ns) {
          if (callback) callback();
          return Promise.resolve();
        }
        if (isString(ns)) ns = [ns];
        ns.forEach((n) => {
          if (this.options.ns.indexOf(n) < 0) this.options.ns.push(n);
        });
        this.loadResources((err) => {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
      loadLanguages(lngs, callback) {
        const deferred = defer();
        if (isString(lngs)) lngs = [lngs];
        const preloaded = this.options.preload || [];
        const newLngs = lngs.filter((lng) => preloaded.indexOf(lng) < 0 && this.services.languageUtils.isSupportedCode(lng));
        if (!newLngs.length) {
          if (callback) callback();
          return Promise.resolve();
        }
        this.options.preload = preloaded.concat(newLngs);
        this.loadResources((err) => {
          deferred.resolve();
          if (callback) callback(err);
        });
        return deferred;
      }
      dir(lng) {
        if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
        if (!lng) return "rtl";
        const rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ug", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam", "ckb"];
        const languageUtils = this.services && this.services.languageUtils || new LanguageUtil(get());
        return rtlLngs.indexOf(languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf("-arab") > 1 ? "rtl" : "ltr";
      }
      static createInstance() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 ? arguments[1] : void 0;
        return new _I18n(options, callback);
      }
      cloneInstance() {
        let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        let callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
        const forkResourceStore = options.forkResourceStore;
        if (forkResourceStore) delete options.forkResourceStore;
        const mergedOptions = {
          ...this.options,
          ...options,
          ...{
            isClone: true
          }
        };
        const clone = new _I18n(mergedOptions);
        if (options.debug !== void 0 || options.prefix !== void 0) {
          clone.logger = clone.logger.clone(options);
        }
        const membersToCopy = ["store", "services", "language"];
        membersToCopy.forEach((m) => {
          clone[m] = this[m];
        });
        clone.services = {
          ...this.services
        };
        clone.services.utils = {
          hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
        };
        if (forkResourceStore) {
          clone.store = new ResourceStore(this.store.data, mergedOptions);
          clone.services.resourceStore = clone.store;
        }
        clone.translator = new Translator(clone.services, mergedOptions);
        clone.translator.on("*", function(event) {
          for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
            args[_key4 - 1] = arguments[_key4];
          }
          clone.emit(event, ...args);
        });
        clone.init(mergedOptions, callback);
        clone.translator.options = mergedOptions;
        clone.translator.backendConnector.services.utils = {
          hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
        };
        return clone;
      }
      toJSON() {
        return {
          options: this.options,
          store: this.store,
          language: this.language,
          languages: this.languages,
          resolvedLanguage: this.resolvedLanguage
        };
      }
    };
    var instance = I18n.createInstance();
    instance.createInstance = I18n.createInstance;
    module.exports = instance;
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/common.json
var require_common = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/common.json"(exports, module) {
    module.exports = {
      decadal: "大限",
      childhood: "童限",
      yearly: "流年",
      monthly: "流月",
      daily: "流日",
      hourly: "流时",
      turn: "小限",
      rat: "鼠",
      ox: "牛",
      tiger: "虎",
      rabbit: "兔",
      dragon: "龙",
      snake: "蛇",
      horse: "马",
      sheep: "羊",
      monkey: "猴",
      rooster: "鸡",
      dog: "狗",
      pig: "猪",
      earlyRatHour: "早子时",
      oxHour: "丑时",
      tigerHour: "寅时",
      rabbitHour: "卯时",
      dragonHour: "辰时",
      snakeHour: "巳时",
      horseHour: "午时",
      goatHour: "未时",
      monkeyHour: "申时",
      roosterHour: "酉时",
      dogHour: "戌时",
      pigHour: "亥时",
      lateRatHour: "晚子时",
      aries: "白羊座",
      taurus: "金牛座",
      gemini: "双子座",
      cancer: "巨蟹座",
      leo: "狮子座",
      virgo: "处女座",
      libra: "天秤座",
      scorpio: "天蝎座",
      sagittarius: "射手座",
      capricorn: "摩羯座",
      aquarius: "水瓶座",
      pisces: "双鱼座"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/brightness.js
var require_brightness = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      miao: "庙",
      wang: "旺",
      de: "得",
      li: "利",
      ping: "平",
      bu: "不",
      xian: "陷"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/earthlyBranch.js
var require_earthlyBranch = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/earthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziEarthly: "子",
      chouEarthly: "丑",
      yinEarthly: "寅",
      maoEarthly: "卯",
      chenEarthly: "辰",
      siEarthly: "巳",
      wuEarthly: "午",
      weiEarthly: "未",
      shenEarthly: "申",
      youEarthly: "酉",
      xuEarthly: "戌",
      haiEarthly: "亥"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/fiveElementsClass.js
var require_fiveElementsClass = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/fiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      water2nd: "水二局",
      wood3rd: "木三局",
      metal4th: "金四局",
      earth5th: "土五局",
      fire6th: "火六局"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/gender.js
var require_gender = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      male: "男",
      female: "女"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/heavenlyStem.js
var require_heavenlyStem = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/heavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      jiaHeavenly: "甲",
      yiHeavenly: "乙",
      bingHeavenly: "丙",
      dingHeavenly: "丁",
      wuHeavenly: "戊",
      jiHeavenly: "己",
      gengHeavenly: "庚",
      xinHeavenly: "辛",
      renHeavenly: "壬",
      guiHeavenly: "癸"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/mutagen.js
var require_mutagen = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      sihuaLu: "禄",
      sihuaQuan: "权",
      sihuaKe: "科",
      sihuaJi: "忌"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/palace.js
var require_palace = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      soulPalace: "命宫",
      bodyPalace: "身宫",
      siblingsPalace: "兄弟",
      spousePalace: "夫妻",
      childrenPalace: "子女",
      wealthPalace: "财帛",
      healthPalace: "疾厄",
      surfacePalace: "迁移",
      friendsPalace: "仆役",
      careerPalace: "官禄",
      propertyPalace: "田宅",
      spiritPalace: "福德",
      parentsPalace: "父母",
      originalPalace: "来因"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/star.js
var require_star = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziweiMaj: "紫微",
      tianjiMaj: "天机",
      taiyangMaj: "太阳",
      wuquMaj: "武曲",
      tiantongMaj: "天同",
      lianzhenMaj: "廉贞",
      tianfuMaj: "天府",
      taiyinMaj: "太阴",
      tanlangMaj: "贪狼",
      jumenMaj: "巨门",
      tianxiangMaj: "天相",
      tianliangMaj: "天梁",
      qishaMaj: "七杀",
      pojunMaj: "破军",
      zuofuMin: "左辅",
      youbiMin: "右弼",
      wenchangMin: "文昌",
      wenquMin: "文曲",
      lucunMin: "禄存",
      tianmaMin: "天马",
      qingyangMin: "擎羊",
      tuoluoMin: "陀罗",
      huoxingMin: "火星",
      lingxingMin: "铃星",
      tiankuiMin: "天魁",
      tianyueMin: "天钺",
      dikongMin: "地空",
      dijieMin: "地劫",
      jieshaAdj: "劫杀",
      tiankong: "天空",
      tianxing: "天刑",
      tianyao: "天姚",
      jieshen: "解神",
      yinsha: "阴煞",
      tianxi: "天喜",
      tianguan: "天官",
      tianfu: "天福",
      tianku: "天哭",
      tianxu: "天虚",
      longchi: "龙池",
      fengge: "凤阁",
      hongluan: "红鸾",
      guchen: "孤辰",
      guasu: "寡宿",
      feilian: "蜚廉",
      posui: "破碎",
      taifu: "台辅",
      fenggao: "封诰",
      tianwu: "天巫",
      tianyue: "天月",
      santai: "三台",
      bazuo: "八座",
      engguang: "恩光",
      tiangui: "天贵",
      tiancai: "天才",
      tianshou: "天寿",
      jiekong: "截空",
      xunzhong: "旬中",
      xunkong: "旬空",
      kongwang: "空亡",
      jielu: "截路",
      yuede: "月德",
      tianshang: "天伤",
      tianshi: "天使",
      tianchu: "天厨",
      changsheng: "长生",
      muyu: "沐浴",
      guandai: "冠带",
      linguan: "临官",
      diwang: "帝旺",
      shuai: "衰",
      bing: "病",
      si: "死",
      mu: "墓",
      jue: "绝",
      tai: "胎",
      yang: "养",
      boshi: "博士",
      lishi: "力士",
      qinglong: "青龙",
      xiaohao: "小耗",
      jiangjun: "将军",
      zhoushu: "奏书",
      faylian: "飞廉",
      xishen: "喜神",
      bingfu: "病符",
      dahao: "大耗",
      suipo: "岁破",
      fubing: "伏兵",
      guanfu: "官府",
      suijian: "岁建",
      huiqi: "晦气",
      sangmen: "丧门",
      guansuo: "贯索",
      gwanfu: "官符",
      longde: "龙德",
      baihu: "白虎",
      tiande: "天德",
      diaoke: "吊客",
      jiangxing: "将星",
      panan: "攀鞍",
      suiyi: "岁驿",
      xiishen: "息神",
      huagai: "华盖",
      jiesha: "劫煞",
      zhaisha: "灾煞",
      tiansha: "天煞",
      zhibei: "指背",
      xianchi: "咸池",
      yuesha: "月煞",
      wangshen: "亡神",
      yunkui: "运魁",
      yunyue: "运钺",
      yunchang: "运昌",
      yunqu: "运曲",
      yunluan: "运鸾",
      yunxi: "运喜",
      yunlu: "运禄",
      yunyang: "运羊",
      yuntuo: "运陀",
      yunma: "运马",
      liukui: "流魁",
      liuyue: "流钺",
      liuchang: "流昌",
      liuqu: "流曲",
      liuluan: "流鸾",
      liuxi: "流喜",
      liulu: "流禄",
      liuyang: "流羊",
      liutuo: "流陀",
      liuma: "流马",
      nianjie: "年解",
      yuekui: "月魁",
      yueyue: "月钺",
      yuechang: "月昌",
      yuequ: "月曲",
      yueluan: "月鸾",
      yuexi: "月喜",
      yuelu: "月禄",
      yueyang: "月羊",
      yuetuo: "月陀",
      yuema: "月马",
      rikui: "日魁",
      riyue: "日钺",
      richang: "日昌",
      riqu: "日曲",
      riluan: "日鸾",
      rixi: "日喜",
      rilu: "日禄",
      riyang: "日羊",
      rituo: "日陀",
      rima: "日马",
      shikui: "时魁",
      shiyue: "时钺",
      shichang: "时昌",
      shiqu: "时曲",
      shiluan: "时鸾",
      shixi: "时喜",
      shilu: "时禄",
      shiyang: "时羊",
      shituo: "时陀",
      shima: "时马"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-CN/index.js
var require_zh_CN = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-CN/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_json_1 = __importDefault(require_common());
    var brightness_1 = __importDefault(require_brightness());
    var earthlyBranch_1 = __importDefault(require_earthlyBranch());
    var fiveElementsClass_1 = __importDefault(require_fiveElementsClass());
    var gender_1 = __importDefault(require_gender());
    var heavenlyStem_1 = __importDefault(require_heavenlyStem());
    var mutagen_1 = __importDefault(require_mutagen());
    var palace_1 = __importDefault(require_palace());
    var star_1 = __importDefault(require_star());
    exports.default = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, common_json_1.default), fiveElementsClass_1.default), heavenlyStem_1.default), earthlyBranch_1.default), brightness_1.default), mutagen_1.default), star_1.default), palace_1.default), gender_1.default);
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/common.json
var require_common2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/common.json"(exports, module) {
    module.exports = {
      decadal: "大限",
      childhood: "童限",
      yearly: "流年",
      monthly: "流月",
      daily: "流日",
      hourly: "流時",
      turn: "小限",
      rat: "鼠",
      ox: "牛",
      tiger: "虎",
      rabbit: "兔",
      dragon: "龍",
      snake: "蛇",
      horse: "馬",
      sheep: "羊",
      monkey: "猴",
      rooster: "雞",
      dog: "狗",
      pig: "豬",
      earlyRatHour: "早子時",
      oxHour: "丑時",
      tigerHour: "寅時",
      rabbitHour: "卯時",
      dragonHour: "辰時",
      snakeHour: "巳時",
      horseHour: "午時",
      goatHour: "未時",
      monkeyHour: "申時",
      roosterHour: "酉時",
      dogHour: "戌時",
      pigHour: "亥時",
      lateRatHour: "晚子時",
      aries: "白羊座",
      taurus: "金牛座",
      gemini: "雙子座",
      cancer: "巨蟹座",
      leo: "獅子座",
      virgo: "處女座",
      libra: "天秤座",
      scorpio: "天蠍座",
      sagittarius: "射手座",
      capricorn: "摩羯座",
      aquarius: "水瓶座",
      pisces: "雙魚座"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/brightness.js
var require_brightness2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      miao: "廟",
      wang: "旺",
      de: "得",
      li: "利",
      ping: "平",
      bu: "不",
      xian: "陷"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/earthlyBranch.js
var require_earthlyBranch2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/earthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziEarthly: "子",
      chouEarthly: "丑",
      yinEarthly: "寅",
      maoEarthly: "卯",
      chenEarthly: "辰",
      siEarthly: "巳",
      wuEarthly: "午",
      weiEarthly: "未",
      shenEarthly: "申",
      youEarthly: "酉",
      xuEarthly: "戌",
      haiEarthly: "亥"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/fiveElementsClass.js
var require_fiveElementsClass2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/fiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      water2nd: "水二局",
      wood3rd: "木三局",
      metal4th: "金四局",
      earth5th: "土五局",
      fire6th: "火六局"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/gender.js
var require_gender2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      male: "男",
      female: "女"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/heavenlyStem.js
var require_heavenlyStem2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/heavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      jiaHeavenly: "甲",
      yiHeavenly: "乙",
      bingHeavenly: "丙",
      dingHeavenly: "丁",
      wuHeavenly: "戊",
      jiHeavenly: "己",
      gengHeavenly: "庚",
      xinHeavenly: "辛",
      renHeavenly: "壬",
      guiHeavenly: "癸"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/mutagen.js
var require_mutagen2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      sihuaLu: "祿",
      sihuaQuan: "權",
      sihuaKe: "科",
      sihuaJi: "忌"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/palace.js
var require_palace2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      soulPalace: "命宮",
      bodyPalace: "身宮",
      siblingsPalace: "兄弟",
      spousePalace: "夫妻",
      childrenPalace: "子女",
      wealthPalace: "財帛",
      healthPalace: "疾厄",
      surfacePalace: "遷移",
      friendsPalace: "僕役",
      careerPalace: "官祿",
      propertyPalace: "田宅",
      spiritPalace: "福德",
      parentsPalace: "父母",
      originalPalace: "来因"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/star.js
var require_star2 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziweiMaj: "紫微",
      tianjiMaj: "天機",
      taiyangMaj: "太陽",
      wuquMaj: "武曲",
      tiantongMaj: "天同",
      lianzhenMaj: "廉貞",
      tianfuMaj: "天府",
      taiyinMaj: "太陰",
      tanlangMaj: "貪狼",
      jumenMaj: "巨門",
      tianxiangMaj: "天相",
      tianliangMaj: "天梁",
      qishaMaj: "七殺",
      pojunMaj: "破軍",
      zuofuMin: "左輔",
      youbiMin: "右弼",
      wenchangMin: "文昌",
      wenquMin: "文曲",
      lucunMin: "祿存",
      tianmaMin: "天馬",
      qingyangMin: "擎羊",
      tuoluoMin: "陀羅",
      huoxingMin: "火星",
      lingxingMin: "鈴星",
      tiankuiMin: "天魁",
      tianyueMin: "天鉞",
      dikongMin: "地空",
      dijieMin: "地劫",
      jieshaAdj: "劫殺",
      tiankong: "天空",
      tianxing: "天刑",
      tianyao: "天姚",
      jieshen: "解神",
      yinsha: "陰煞",
      tianxi: "天喜",
      tianguan: "天官",
      tianfu: "天福",
      tianku: "天哭",
      tianxu: "天虛",
      longchi: "龍池",
      fengge: "鳳閣",
      hongluan: "紅鸞",
      guchen: "孤辰",
      guasu: "寡宿",
      feilian: "蜚廉",
      posui: "破碎",
      taifu: "台輔",
      fenggao: "封誥",
      tianwu: "天巫",
      tianyue: "天月",
      santai: "三台",
      bazuo: "八座",
      engguang: "恩光",
      tiangui: "天貴",
      tiancai: "天才",
      tianshou: "天壽",
      jiekong: "截空",
      xunzhong: "旬中",
      xunkong: "旬空",
      kongwang: "空亡",
      jielu: "截路",
      yuede: "月德",
      tianshang: "天傷",
      tianshi: "天使",
      tianchu: "天廚",
      changsheng: "長生",
      muyu: "沐浴",
      guandai: "冠帶",
      linguan: "臨官",
      diwang: "帝旺",
      shuai: "衰",
      bing: "病",
      si: "死",
      mu: "墓",
      jue: "絕",
      tai: "胎",
      yang: "養",
      boshi: "博士",
      lishi: "力士",
      qinglong: "青龍",
      xiaohao: "小耗",
      jiangjun: "將軍",
      zhoushu: "奏書",
      faylian: "飛廉",
      xishen: "喜神",
      bingfu: "病符",
      dahao: "大耗",
      suipo: "歲破",
      fubing: "伏兵",
      guanfu: "官府",
      suijian: "歲建",
      huiqi: "晦氣",
      sangmen: "喪門",
      guansuo: "貫索",
      gwanfu: "官符",
      longde: "龍德",
      baihu: "白虎",
      tiande: "天德",
      diaoke: "弔客",
      jiangxing: "將星",
      panan: "攀鞍",
      suiyi: "歲驛",
      xiishen: "息神",
      huagai: "華蓋",
      jiesha: "劫煞",
      zhaisha: "災煞",
      tiansha: "天煞",
      zhibei: "指背",
      xianchi: "咸池",
      yuesha: "月煞",
      wangshen: "亡神",
      yunkui: "運魁",
      yunyue: "運鉞",
      yunchang: "運昌",
      yunqu: "運曲",
      yunluan: "運鸞",
      yunxi: "運喜",
      yunlu: "運祿",
      yunyang: "運羊",
      yuntuo: "運陀",
      yunma: "運馬",
      liukui: "流魁",
      liuyue: "流鉞",
      liuchang: "流昌",
      liuqu: "流曲",
      liuluan: "流鸞",
      liuxi: "流喜",
      liulu: "流祿",
      liuyang: "流羊",
      liutuo: "流陀",
      liuma: "流馬",
      nianjie: "年解",
      yuekui: "月魁",
      yueyue: "月鉞",
      yuechang: "月昌",
      yuequ: "月曲",
      yueluan: "月鸞",
      yuexi: "月喜",
      yuelu: "月祿",
      yueyang: "月羊",
      yuetuo: "月陀",
      yuema: "月馬",
      rikui: "日魁",
      riyue: "日鉞",
      richang: "日昌",
      riqu: "日曲",
      riluan: "日鸞",
      rixi: "日喜",
      rilu: "日祿",
      riyang: "日羊",
      rituo: "日陀",
      rima: "日馬",
      shikui: "時魁",
      shiyue: "時鉞",
      shichang: "時昌",
      shiqu: "時曲",
      shiluan: "時鸞",
      shixi: "時喜",
      shilu: "時祿",
      shiyang: "時羊",
      shituo: "時陀",
      shima: "時馬"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/zh-TW/index.js
var require_zh_TW = __commonJS({
  "node_modules/iztro/lib/i18n/locales/zh-TW/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_json_1 = __importDefault(require_common2());
    var brightness_1 = __importDefault(require_brightness2());
    var earthlyBranch_1 = __importDefault(require_earthlyBranch2());
    var fiveElementsClass_1 = __importDefault(require_fiveElementsClass2());
    var gender_1 = __importDefault(require_gender2());
    var heavenlyStem_1 = __importDefault(require_heavenlyStem2());
    var mutagen_1 = __importDefault(require_mutagen2());
    var palace_1 = __importDefault(require_palace2());
    var star_1 = __importDefault(require_star2());
    exports.default = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, common_json_1.default), fiveElementsClass_1.default), heavenlyStem_1.default), earthlyBranch_1.default), brightness_1.default), mutagen_1.default), star_1.default), palace_1.default), gender_1.default);
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/common.json
var require_common3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/common.json"(exports, module) {
    module.exports = {
      decadal: "대한",
      childhood: "어린",
      yearly: "유년",
      monthly: "유월",
      daily: "유일",
      hourly: "유시",
      turn: "소한",
      rat: "쥐",
      ox: "소",
      tiger: "호랑이",
      rabbit: "토끼",
      dragon: "용",
      snake: "뱀",
      horse: "말",
      sheep: "양",
      monkey: "원숭이",
      rooster: "닭",
      dog: "개",
      pig: "돼지",
      earlyRatHour: "아침 자시",
      oxHour: "축시",
      tigerHour: "인시",
      rabbitHour: "묘시",
      dragonHour: "진시",
      snakeHour: "사시",
      horseHour: "오시",
      goatHour: "미시",
      monkeyHour: "신시",
      roosterHour: "유시",
      dogHour: "술시",
      pigHour: "해시",
      lateRatHour: "밤에 자시",
      aries: "백양궁",
      taurus: "금우궁",
      gemini: "쌍아궁",
      cancer: "거해궁",
      leo: "사자궁",
      virgo: "처녀궁",
      libra: "천칭궁",
      scorpio: "천갈궁",
      sagittarius: "인마궁",
      capricorn: "마갈궁",
      aquarius: "보병궁",
      pisces: "쌍어궁"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/brightness.js
var require_brightness3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      miao: "[+3]",
      wang: "[+2]",
      de: "[+1]",
      li: "[0]",
      ping: "[-1]",
      bu: "[-2]",
      xian: "[-3]"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/earthlyBranch.js
var require_earthlyBranch3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/earthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziEarthly: "자",
      chouEarthly: "축",
      yinEarthly: "인",
      maoEarthly: "묘",
      chenEarthly: "진",
      siEarthly: "사",
      wuEarthly: "오",
      weiEarthly: "미",
      shenEarthly: "신",
      youEarthly: "유",
      xuEarthly: "술",
      haiEarthly: "해"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/fiveElementsClass.js
var require_fiveElementsClass3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/fiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      water2nd: "수이국",
      wood3rd: "목삼국",
      metal4th: "금사국",
      earth5th: "토오국",
      fire6th: "화육국"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/gender.js
var require_gender3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      male: "남성",
      female: "여자"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/heavenlyStem.js
var require_heavenlyStem3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/heavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      jiaHeavenly: "갑",
      yiHeavenly: "을",
      bingHeavenly: "병",
      dingHeavenly: "정",
      wuHeavenly: "무",
      jiHeavenly: "기",
      gengHeavenly: "경",
      xinHeavenly: "신",
      renHeavenly: "임",
      guiHeavenly: "계"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/mutagen.js
var require_mutagen3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      sihuaLu: "록",
      sihuaQuan: "권",
      sihuaKe: "과",
      sihuaJi: "기"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/palace.js
var require_palace3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      soulPalace: "명궁",
      bodyPalace: "신궁",
      siblingsPalace: "형제",
      spousePalace: "부처",
      childrenPalace: "자녀",
      wealthPalace: "재백",
      healthPalace: "질액",
      surfacePalace: "천이",
      friendsPalace: "노복",
      careerPalace: "관록",
      propertyPalace: "전택",
      spiritPalace: "복덕",
      parentsPalace: "부모",
      originalPalace: "라인"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/star.js
var require_star3 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziweiMaj: "자미",
      tianjiMaj: "천기",
      taiyangMaj: "태양",
      wuquMaj: "무곡",
      tiantongMaj: "천동",
      lianzhenMaj: "염정",
      tianfuMaj: "천부",
      taiyinMaj: "태음",
      tanlangMaj: "탐랑",
      jumenMaj: "거문",
      tianxiangMaj: "천상",
      tianliangMaj: "천량",
      qishaMaj: "칠살",
      pojunMaj: "파군",
      zuofuMin: "좌보",
      youbiMin: "우필",
      wenchangMin: "문창",
      wenquMin: "문곡",
      lucunMin: "록존",
      tianmaMin: "천마",
      qingyangMin: "경양",
      tuoluoMin: "타라",
      huoxingMin: "화성",
      lingxingMin: "령성",
      tiankuiMin: "천괴",
      tianyueMin: "천월",
      dikongMin: "지공",
      dijieMin: "지겁",
      jieshaAdj: "겁살",
      tiankong: "천공",
      tianxing: "천형",
      tianyao: "천요",
      jieshen: "해신",
      yinsha: "음살",
      tianxi: "천희",
      tianguan: "천관",
      tianfu: "천복",
      tianku: "천곡",
      tianxu: "천허",
      longchi: "용지",
      fengge: "봉각",
      hongluan: "홍란",
      guchen: "고진",
      guasu: "과숙",
      feilian: "비렴",
      posui: "파쇄",
      taifu: "태보",
      fenggao: "봉고",
      tianwu: "천무",
      tianyue: "천월",
      santai: "삼태",
      bazuo: "팔좌",
      engguang: "은광",
      tiangui: "천귀",
      tiancai: "천재",
      tianshou: "천수",
      jiekong: "절중",
      xunzhong: "순중",
      xunkong: "순공",
      kongwang: "공망",
      jielu: "절로",
      yuede: "월덕",
      tianshang: "천상",
      tianshi: "천사",
      tianchu: "천주",
      changsheng: "장생",
      muyu: "목욕",
      guandai: "관대",
      linguan: "임관",
      diwang: "제왕",
      shuai: "쇠",
      bing: "병",
      si: "사",
      mu: "묘",
      jue: "절",
      tai: "태",
      yang: "양",
      boshi: "박사",
      lishi: "역사",
      qinglong: "청룡",
      xiaohao: "소모",
      jiangjun: "장군",
      zhoushu: "주서",
      faylian: "비렴",
      xishen: "희신",
      bingfu: "병부",
      dahao: "대모",
      suipo: "태파",
      fubing: "복병",
      guanfu: "관부",
      suijian: "태세",
      huiqi: "회기",
      sangmen: "상문",
      guansuo: "관색",
      gwanfu: "관부",
      longde: "용덕",
      baihu: "백호",
      tiande: "복덕",
      diaoke: "조객",
      jiangxing: "장성",
      panan: "반안",
      suiyi: "세역",
      xiishen: "식신",
      huagai: "화개",
      jiesha: "겁살",
      zhaisha: "재살",
      tiansha: "천살",
      zhibei: "지배",
      xianchi: "함지",
      yuesha: "월살",
      wangshen: "망신",
      yunkui: "천괴(십년)",
      yunyue: "천월(십년)",
      yunchang: "문창(십년)",
      yunqu: "문곡(십년)",
      yunluan: "홍란(십년)",
      yunxi: "천희(십년)",
      yunlu: "록존(십년)",
      yunyang: "경양(십년)",
      yuntuo: "타라(십년)",
      yunma: "천마(십년)",
      liukui: "천괴(년)",
      liuyue: "천월(년)",
      liuchang: "문창(년)",
      liuqu: "문곡(년)",
      liuluan: "홍란(년)",
      liuxi: "천희(년)",
      liulu: "록존(년)",
      liuyang: "경양(년)",
      liutuo: "타라(년)",
      liuma: "천마(년)",
      nianjie: "해신(년)",
      yuekui: "천괴(월)",
      yueyue: "천월(월)",
      yuechang: "문창(월)",
      yuequ: "문곡(월)",
      yueluan: "홍란(월)",
      yuexi: "천희(월)",
      yuelu: "록존(월)",
      yueyang: "경양(월)",
      yuetuo: "타라(월)",
      yuema: "천마(월)",
      rikui: "천괴(일)",
      riyue: "천월(일)",
      richang: "문창(일)",
      riqu: "문곡(일)",
      riluan: "홍란(일)",
      rixi: "천희(일)",
      rilu: "록존(일)",
      riyang: "경양(일)",
      rituo: "타라(일)",
      rima: "천마(일)",
      shikui: "천괴(시)",
      shiyue: "천월(시)",
      shichang: "문창(시)",
      shiqu: "문곡(시)",
      shiluan: "홍란(시)",
      shixi: "천희(시)",
      shilu: "록존(시)",
      shiyang: "경양(시)",
      shituo: "타라(시)",
      shima: "천마(시)"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ko-KR/index.js
var require_ko_KR = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ko-KR/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_json_1 = __importDefault(require_common3());
    var brightness_1 = __importDefault(require_brightness3());
    var earthlyBranch_1 = __importDefault(require_earthlyBranch3());
    var fiveElementsClass_1 = __importDefault(require_fiveElementsClass3());
    var gender_1 = __importDefault(require_gender3());
    var heavenlyStem_1 = __importDefault(require_heavenlyStem3());
    var mutagen_1 = __importDefault(require_mutagen3());
    var palace_1 = __importDefault(require_palace3());
    var star_1 = __importDefault(require_star3());
    exports.default = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, common_json_1.default), fiveElementsClass_1.default), heavenlyStem_1.default), earthlyBranch_1.default), brightness_1.default), mutagen_1.default), star_1.default), palace_1.default), gender_1.default);
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/common.json
var require_common4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/common.json"(exports, module) {
    module.exports = {
      decadal: "大限",
      childhood: "子供",
      yearly: "流年",
      monthly: "流月",
      daily: "流日",
      hourly: "流時",
      turn: "小限",
      rat: "鼠",
      ox: "牛",
      tiger: "虎",
      rabbit: "兎",
      dragon: "龍",
      snake: "蛇",
      horse: "馬",
      sheep: "羊",
      monkey: "猿",
      rooster: "雞",
      dog: "犬",
      pig: "豚",
      earlyRatHour: "早子時",
      oxHour: "丑時",
      tigerHour: "寅時",
      rabbitHour: "卯時",
      dragonHour: "辰時",
      snakeHour: "巳時",
      horseHour: "午時",
      goatHour: "未時",
      monkeyHour: "申時",
      roosterHour: "酉時",
      dogHour: "戌時",
      pigHour: "亥時",
      lateRatHour: "晚子時",
      aries: "おひつじ座",
      taurus: "おうし座",
      gemini: "ふたご座",
      cancer: "かに座",
      leo: "しし座",
      virgo: "おとめ座",
      libra: "てんびん座",
      scorpio: "さそり座",
      sagittarius: "いて座",
      capricorn: "やぎ座",
      aquarius: "みずがめ座",
      pisces: "うお座"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/brightness.js
var require_brightness4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      miao: "廟",
      wang: "旺",
      de: "得",
      li: "利",
      ping: "平",
      bu: "不",
      xian: "陷"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/earthlyBranch.js
var require_earthlyBranch4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/earthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziEarthly: "子",
      chouEarthly: "丑",
      yinEarthly: "寅",
      maoEarthly: "卯",
      chenEarthly: "辰",
      siEarthly: "巳",
      wuEarthly: "午",
      weiEarthly: "未",
      shenEarthly: "申",
      youEarthly: "酉",
      xuEarthly: "戌",
      haiEarthly: "亥"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/fiveElementsClass.js
var require_fiveElementsClass4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/fiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      water2nd: "水の二局",
      wood3rd: "木の三局",
      metal4th: "金の四局",
      earth5th: "土の五局",
      fire6th: "火の六局"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/gender.js
var require_gender4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      male: "男",
      female: "女"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/heavenlyStem.js
var require_heavenlyStem4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/heavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      jiaHeavenly: "甲",
      yiHeavenly: "乙",
      bingHeavenly: "丙",
      dingHeavenly: "丁",
      wuHeavenly: "戊",
      jiHeavenly: "己",
      gengHeavenly: "庚",
      xinHeavenly: "辛",
      renHeavenly: "壬",
      guiHeavenly: "癸"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/mutagen.js
var require_mutagen4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      sihuaLu: "祿",
      sihuaQuan: "權",
      sihuaKe: "科",
      sihuaJi: "忌"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/palace.js
var require_palace4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      soulPalace: "命宮",
      bodyPalace: "身宮",
      siblingsPalace: "兄弟",
      spousePalace: "夫妻",
      childrenPalace: "子女",
      wealthPalace: "財帛",
      healthPalace: "疾厄",
      surfacePalace: "遷移",
      friendsPalace: "僕役",
      careerPalace: "官祿",
      propertyPalace: "田宅",
      spiritPalace: "福德",
      parentsPalace: "父母",
      originalPalace: "来因"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/star.js
var require_star4 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziweiMaj: "紫微",
      tianjiMaj: "天機",
      taiyangMaj: "太陽",
      wuquMaj: "武曲",
      tiantongMaj: "天同",
      lianzhenMaj: "廉貞",
      tianfuMaj: "天府",
      taiyinMaj: "太陰",
      tanlangMaj: "貪狼",
      jumenMaj: "巨門",
      tianxiangMaj: "天相",
      tianliangMaj: "天梁",
      qishaMaj: "七殺",
      pojunMaj: "破軍",
      zuofuMin: "左輔",
      youbiMin: "右弼",
      wenchangMin: "文昌",
      wenquMin: "文曲",
      lucunMin: "祿存",
      tianmaMin: "天馬",
      qingyangMin: "擎羊",
      tuoluoMin: "陀羅",
      huoxingMin: "火星",
      lingxingMin: "鈴星",
      tiankuiMin: "天魁",
      tianyueMin: "天鉞",
      dikongMin: "地空",
      dijieMin: "地劫",
      jieshaAdj: "劫殺",
      tiankong: "天空",
      tianxing: "天刑",
      tianyao: "天姚",
      jieshen: "解神",
      yinsha: "陰煞",
      tianxi: "天喜",
      tianguan: "天官",
      tianfu: "天福",
      tianku: "天哭",
      tianxu: "天虛",
      longchi: "龍池",
      fengge: "鳳閣",
      hongluan: "紅鸞",
      guchen: "孤辰",
      guasu: "寡宿",
      feilian: "蜚廉",
      posui: "破碎",
      taifu: "台輔",
      fenggao: "封誥",
      tianwu: "天巫",
      tianyue: "天月",
      santai: "三台",
      bazuo: "八座",
      engguang: "恩光",
      tiangui: "天貴",
      tiancai: "天才",
      tianshou: "天壽",
      jiekong: "截空",
      xunzhong: "旬中",
      xunkong: "旬空",
      kongwang: "空亡",
      jielu: "截路",
      yuede: "月德",
      tianshang: "天傷",
      tianshi: "天使",
      tianchu: "天廚",
      changsheng: "長生",
      muyu: "沐浴",
      guandai: "冠帶",
      linguan: "臨官",
      diwang: "帝旺",
      shuai: "衰",
      bing: "病",
      si: "死",
      mu: "墓",
      jue: "絕",
      tai: "胎",
      yang: "養",
      boshi: "博士",
      lishi: "力士",
      qinglong: "青龍",
      xiaohao: "小耗",
      jiangjun: "將軍",
      zhoushu: "奏書",
      faylian: "飛廉",
      xishen: "喜神",
      bingfu: "病符",
      dahao: "大耗",
      suipo: "歲破",
      fubing: "伏兵",
      guanfu: "官府",
      suijian: "歲建",
      huiqi: "晦氣",
      sangmen: "喪門",
      guansuo: "貫索",
      gwanfu: "官符",
      longde: "龍德",
      baihu: "白虎",
      tiande: "天德",
      diaoke: "弔客",
      jiangxing: "將星",
      panan: "攀鞍",
      suiyi: "歲驛",
      xiishen: "息神",
      huagai: "華蓋",
      jiesha: "劫煞",
      zhaisha: "災煞",
      tiansha: "天煞",
      zhibei: "指背",
      xianchi: "咸池",
      yuesha: "月煞",
      wangshen: "亡神",
      yunkui: "限の魁",
      yunyue: "限の钺",
      yunchang: "限の昌",
      yunqu: "限の曲",
      yunluan: "限の鸾",
      yunxi: "限の喜",
      yunlu: "限の祿",
      yunyang: "限の羊",
      yuntuo: "限の陀",
      yunma: "限の馬",
      liukui: "年の魁",
      liuyue: "年の钺",
      liuchang: "年の昌",
      liuqu: "年の曲",
      liuluan: "年の鸾",
      liuxi: "年の喜",
      liulu: "年の祿",
      liuyang: "年の羊",
      liutuo: "年の陀",
      liuma: "年の馬",
      nianjie: "年の解",
      yuekui: "月の魁",
      yueyue: "月の钺",
      yuechang: "月の昌",
      yuequ: "月の曲",
      yueluan: "月の鸾",
      yuexi: "月の喜",
      yuelu: "月の祿",
      yueyang: "月の羊",
      yuetuo: "月の陀",
      yuema: "月の馬",
      rikui: "日の魁",
      riyue: "日の钺",
      richang: "日の昌",
      riqu: "日の曲",
      riluan: "日の鸾",
      rixi: "日の喜",
      rilu: "日の祿",
      riyang: "日の羊",
      rituo: "日の陀",
      rima: "日の馬",
      shikui: "時の魁",
      shiyue: "時の钺",
      shichang: "時の昌",
      shiqu: "時の曲",
      shiluan: "時の鸾",
      shixi: "時の喜",
      shilu: "時の祿",
      shiyang: "時の羊",
      shituo: "時の陀",
      shima: "時の馬"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/ja-JP/index.js
var require_ja_JP = __commonJS({
  "node_modules/iztro/lib/i18n/locales/ja-JP/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_json_1 = __importDefault(require_common4());
    var brightness_1 = __importDefault(require_brightness4());
    var earthlyBranch_1 = __importDefault(require_earthlyBranch4());
    var fiveElementsClass_1 = __importDefault(require_fiveElementsClass4());
    var gender_1 = __importDefault(require_gender4());
    var heavenlyStem_1 = __importDefault(require_heavenlyStem4());
    var mutagen_1 = __importDefault(require_mutagen4());
    var palace_1 = __importDefault(require_palace4());
    var star_1 = __importDefault(require_star4());
    exports.default = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, common_json_1.default), fiveElementsClass_1.default), heavenlyStem_1.default), earthlyBranch_1.default), brightness_1.default), mutagen_1.default), star_1.default), palace_1.default), gender_1.default);
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/common.json
var require_common5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/common.json"(exports, module) {
    module.exports = {
      decadal: "decadal",
      yearly: "yearly",
      monthly: "monthly",
      daily: "daily",
      hourly: "hourly",
      turn: "age",
      rat: "rat",
      ox: "ox",
      tiger: "tiger",
      rabbit: "rabbit",
      dragon: "dragon",
      snake: "snake",
      horse: "horse",
      sheep: "sheep",
      monkey: "monkey",
      rooster: "rooster",
      dog: "dog",
      pig: "pig",
      aries: "aries",
      taurus: "taurus",
      gemini: "gemini",
      cancer: "cancer",
      leo: "leo",
      virgo: "virgo",
      libra: "libra",
      scorpio: "scorpio",
      sagittarius: "sagittarius",
      capricorn: "capricorn",
      aquarius: "aquarius",
      pisces: "pisces",
      earlyRatHour: "early Rat hour",
      oxHour: "Ox hour",
      tigerHour: "Tiger hour",
      rabbitHour: "Rabbit hour",
      dragonHour: "Dragon hour",
      snakeHour: "Snake hour",
      horseHour: "Horse hour",
      goatHour: "Goat hour",
      monkeyHour: "Monkey hour",
      roosterHour: "Rooster hour",
      dogHour: "Dog hour",
      pigHour: "Pig hour",
      lateRatHour: "late Rat hour"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/brightness.js
var require_brightness5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      miao: "[+3]",
      wang: "[+2]",
      de: "[+1]",
      li: "[0]",
      ping: "[-1]",
      bu: "[-2]",
      xian: "[-3]"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/earthlyBranch.js
var require_earthlyBranch5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/earthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziEarthly: "zi",
      chouEarthly: "chou",
      yinEarthly: "yin",
      maoEarthly: "mao",
      chenEarthly: "chen",
      siEarthly: "si",
      wuEarthly: "woo",
      weiEarthly: "wei",
      shenEarthly: "shen",
      youEarthly: "you",
      xuEarthly: "xu",
      haiEarthly: "hai"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/fiveElementsClass.js
var require_fiveElementsClass5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/fiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      water2nd: "water 2nd",
      wood3rd: "wood 3rd",
      metal4th: "metal 4th",
      earth5th: "earth 5th",
      fire6th: "fire 6th"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/gender.js
var require_gender5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      male: "male",
      female: "female"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/heavenlyStem.js
var require_heavenlyStem5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/heavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      jiaHeavenly: "jia",
      yiHeavenly: "yi",
      bingHeavenly: "bing",
      dingHeavenly: "ding",
      wuHeavenly: "wu",
      jiHeavenly: "ji",
      gengHeavenly: "geng",
      xinHeavenly: "xin",
      renHeavenly: "ren",
      guiHeavenly: "gui"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/mutagen.js
var require_mutagen5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      sihuaLu: "A",
      sihuaQuan: "B",
      sihuaKe: "C",
      sihuaJi: "D"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/palace.js
var require_palace5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      soulPalace: "soul",
      bodyPalace: "body",
      siblingsPalace: "siblings",
      spousePalace: "spouse",
      childrenPalace: "children",
      wealthPalace: "wealth",
      healthPalace: "health",
      surfacePalace: "surface",
      friendsPalace: "friends",
      careerPalace: "career",
      propertyPalace: "property",
      spiritPalace: "spirit",
      parentsPalace: "parents",
      originalPalace: "origin"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/star.js
var require_star5 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziweiMaj: "emperor",
      tianjiMaj: "advisor",
      taiyangMaj: "sun",
      wuquMaj: "general",
      tiantongMaj: "fortunate",
      lianzhenMaj: "judge",
      tianfuMaj: "empress",
      taiyinMaj: "moon",
      tanlangMaj: "wolf",
      jumenMaj: "advocator",
      tianxiangMaj: "minister",
      tianliangMaj: "sage",
      qishaMaj: "marshal",
      pojunMaj: "rebel",
      zuofuMin: "officer",
      youbiMin: "helper",
      wenchangMin: "scholar",
      wenquMin: "artist",
      lucunMin: "money",
      tianmaMin: "horse",
      qingyangMin: "driven",
      tuoluoMin: "tangled",
      huoxingMin: "impulsive",
      lingxingMin: "spark",
      tiankuiMin: "assistant",
      tianyueMin: "aide",
      dikongMin: "ideologue",
      dijieMin: "fickle",
      jieshaAdj: "murder",
      tiankong: "utopian",
      tianxing: "serious",
      tianyao: "social",
      jieshen: "considery",
      yinsha: "gloomy",
      tianxi: "cheerful",
      tianguan: "solemn",
      tianfu: "lucky",
      tianku: "upset",
      tianxu: "frail",
      longchi: "talented",
      fengge: "refined",
      hongluan: "attractive",
      guchen: "alone",
      guasu: "lonely",
      feilian: "instigated",
      posui: "broken",
      taifu: "honorable",
      fenggao: "awarded",
      tianwu: "psychic",
      tianyue: "sickly",
      santai: "senior",
      bazuo: "dignified",
      engguang: "grateful",
      tiangui: "noble",
      tiancai: "gifted",
      tianshou: "ageless",
      jiekong: "interrupted",
      xunzhong: "meditative",
      xunkong: "fancied",
      kongwang: "bottomless",
      jielu: "intercepted",
      yuede: "peaceful",
      tianshang: "wounded",
      tianshi: "heaven",
      tianchu: "gourmet",
      changsheng: "born",
      muyu: "infancy",
      guandai: "adolescence",
      linguan: "adulthood",
      diwang: "prime",
      shuai: "weak",
      bing: "sick",
      si: "dead",
      mu: "buried",
      jue: "dissipated",
      tai: "embryo",
      yang: "molding",
      boshi: "doctor",
      lishi: "sumo",
      qinglong: "dragon",
      xiaohao: "consumer",
      jiangjun: "general",
      zhoushu: "book",
      faylian: "gossip",
      xishen: "happiness",
      bingfu: "illness",
      dahao: "wastrel",
      suipo: "wastrel",
      fubing: "ambush",
      guanfu: "government",
      suijian: "initial",
      huiqi: "unlucky",
      sangmen: "downcast",
      guansuo: "tied",
      gwanfu: "official",
      longde: "virtuous",
      baihu: "sinister",
      tiande: "blessed",
      diaoke: "sorrowing",
      jiangxing: "capable",
      panan: "admired",
      suiyi: "varied",
      xiishen: "listless",
      huagai: "religious",
      jiesha: "robbed",
      zhaisha: "disastery",
      tiansha: "condemned",
      zhibei: "insidious",
      xianchi: "passionate",
      yuesha: "hapless",
      wangshen: "perished",
      yunkui: "assistant(D)",
      yunyue: "aide(D)",
      yunchang: "scholar(D)",
      yunqu: "artist(D)",
      yunluan: "attractive(D)",
      yunxi: "cheerful(D)",
      yunlu: "money(D)",
      yunyang: "driven(D)",
      yuntuo: "tangled(D)",
      yunma: "horse(D)",
      liukui: "assistant(Y)",
      liuyue: "aide(Y)",
      liuchang: "scholar(Y)",
      liuqu: "artist(Y)",
      liuluan: "attractive(Y)",
      liuxi: "cheerful(Y)",
      liulu: "money(Y)",
      liuyang: "driven(Y)",
      liutuo: "tangled(Y)",
      liuma: "horse(Y)",
      nianjie: "considery(Y)",
      yuekui: "assistant(M)",
      yueyue: "aide(M)",
      yuechang: "scholar(M)",
      yuequ: "artist(M)",
      yueluan: "attractive(M)",
      yuexi: "cheerful(M)",
      yuelu: "money(M)",
      yueyang: "driven(M)",
      yuetuo: "tangled(M)",
      yuema: "horse(M)",
      rikui: "assistant(d)",
      riyue: "aide(d)",
      richang: "scholar(d)",
      riqu: "artist(d)",
      riluan: "attractive(d)",
      rixi: "cheerful(d)",
      rilu: "money(d)",
      riyang: "driven(d)",
      rituo: "tangled(d)",
      rima: "horse(d)",
      shikui: "assistant(H)",
      shiyue: "aide(H)",
      shichang: "scholar(H)",
      shiqu: "artist(H)",
      shiluan: "attractive(H)",
      shixi: "cheerful(H)",
      shilu: "money(H)",
      shiyang: "driven(H)",
      shituo: "tangled(H)",
      shima: "horse(H)"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/en-US/index.js
var require_en_US = __commonJS({
  "node_modules/iztro/lib/i18n/locales/en-US/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_json_1 = __importDefault(require_common5());
    var brightness_1 = __importDefault(require_brightness5());
    var earthlyBranch_1 = __importDefault(require_earthlyBranch5());
    var fiveElementsClass_1 = __importDefault(require_fiveElementsClass5());
    var gender_1 = __importDefault(require_gender5());
    var heavenlyStem_1 = __importDefault(require_heavenlyStem5());
    var mutagen_1 = __importDefault(require_mutagen5());
    var palace_1 = __importDefault(require_palace5());
    var star_1 = __importDefault(require_star5());
    exports.default = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, common_json_1.default), fiveElementsClass_1.default), heavenlyStem_1.default), earthlyBranch_1.default), brightness_1.default), mutagen_1.default), star_1.default), palace_1.default), gender_1.default);
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/common.json
var require_common6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/common.json"(exports, module) {
    module.exports = {
      decadal: "Đại Hạn",
      childhood: "đứa trẻ Hạn",
      yearly: "Lưu Niên",
      monthly: "Lưu Nguyệt",
      daily: "Lưu Nhật",
      hourly: "Lưu Thì",
      turn: "Tiểu Hạn",
      rat: "Chuột",
      ox: "Trâu",
      tiger: "Hổ",
      rabbit: "Mèo",
      dragon: "Rồng",
      snake: "Rắn",
      horse: "Ngựa",
      sheep: "Dê",
      monkey: "Khỉ",
      rooster: "Gà",
      dog: "Chó",
      pig: "Lợn",
      earlyRatHour: "Giờ tý sớm",
      oxHour: "Giờ sửu",
      tigerHour: "Giờ dần",
      rabbitHour: "Giờ mão",
      dragonHour: "Giờ thìn",
      snakeHour: "Giờ tỵ",
      horseHour: "Giờ ngọ",
      goatHour: "Giờ mùi",
      monkeyHour: "Giờ thân",
      roosterHour: "Giờ dậu",
      dogHour: "Giờ tuất",
      pigHour: "Giờ hợi",
      lateRatHour: "Giờ tý muộn",
      aries: "Cung Bạch Dương",
      taurus: "Cung Kim Ngưu",
      gemini: "Cung Song Tử",
      cancer: "Cung Cự Giải",
      leo: "Cung Sư Tử",
      virgo: "Cung Xử Nữ",
      libra: "Cung Thiên Bình",
      scorpio: "Cung Thiên Yết",
      sagittarius: "Cung Xạ Thủ",
      capricorn: "Cung Ma Kết",
      aquarius: "Cung Thủy Bình",
      pisces: "Cung Song Ngư"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/brightness.js
var require_brightness6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      miao: "Miếu",
      wang: "Vượng",
      de: "Đắc",
      li: "Lợi",
      ping: "Bình",
      bu: "Bất",
      xian: "Hạn"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/earthlyBranch.js
var require_earthlyBranch6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/earthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziEarthly: "Tý",
      chouEarthly: "Sửu",
      yinEarthly: "Dần",
      maoEarthly: "Mão",
      chenEarthly: "Thìn",
      siEarthly: "Tỵ",
      wuEarthly: "Ngọ",
      weiEarthly: "Mùi",
      shenEarthly: "Thân",
      youEarthly: "Dậu",
      xuEarthly: "Tuất",
      haiEarthly: "Hợi"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/fiveElementsClass.js
var require_fiveElementsClass6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/fiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      water2nd: "Thủy Nhị Cục",
      wood3rd: "Mộc Tam Cục",
      metal4th: "Kim Tứ Cục",
      earth5th: "Thổ Ngũ Cục",
      fire6th: "Hỏa Lục Cục"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/gender.js
var require_gender6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      male: "Nam",
      female: "Nữ"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/heavenlyStem.js
var require_heavenlyStem6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/heavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      jiaHeavenly: "Giáp",
      yiHeavenly: "Ất",
      bingHeavenly: "Bính",
      dingHeavenly: "Đinh",
      wuHeavenly: "Mậu",
      jiHeavenly: "Kỷ",
      gengHeavenly: "Canh",
      xinHeavenly: "Tân",
      renHeavenly: "Nhâm",
      guiHeavenly: "Quý"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/mutagen.js
var require_mutagen6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      sihuaLu: "Lộc",
      sihuaQuan: "Quyền",
      sihuaKe: "Khoa",
      sihuaJi: "Kỵ"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/palace.js
var require_palace6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      soulPalace: "Mệnh",
      bodyPalace: "Thân",
      siblingsPalace: "Huynh Đệ",
      spousePalace: "Phu Thê",
      childrenPalace: "Tử Nữ",
      wealthPalace: "Tài Bạch",
      healthPalace: "Tật Ách",
      surfacePalace: "Thiên Di",
      friendsPalace: "Nô Bộc",
      careerPalace: "Quan Lộc",
      propertyPalace: "Điền Trạch",
      spiritPalace: "Phúc Đức",
      parentsPalace: "Phụ Mẫu",
      originalPalace: "Lai Nhân"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/star.js
var require_star6 = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
      ziweiMaj: "Tử Vi",
      tianjiMaj: "Thiên Cơ",
      taiyangMaj: "Thái Dương",
      wuquMaj: "Vũ Khúc",
      tiantongMaj: "Thiên Đồng",
      lianzhenMaj: "Liêm Trinh",
      tianfuMaj: "Thiên Phủ",
      taiyinMaj: "Thái Âm",
      tanlangMaj: "Tham Lang",
      jumenMaj: "Cự Môn",
      tianxiangMaj: "Thiên Tướng",
      tianliangMaj: "Thiên Lương",
      qishaMaj: "Thất Sát",
      pojunMaj: "Phá Quân",
      zuofuMin: "Tả Phù",
      youbiMin: "Hữu Bật",
      wenchangMin: "Văn Xương",
      wenquMin: "Văn Khúc",
      lucunMin: "Lộc Tồn",
      tianmaMin: "Thiên Mã",
      qingyangMin: "Kình Dương",
      tuoluoMin: "Đà La",
      huoxingMin: "Hỏa Tinh",
      lingxingMin: "Linh Tinh",
      tiankuiMin: "Thiên Khôi",
      tianyueMin: "Thiên Việt",
      dikongMin: "Địa Không",
      dijieMin: "Địa Kiếp",
      jieshaAdj: "Kiếp Sát",
      tiankong: "Thiên Không",
      tianxing: "Thiên Hình",
      tianyao: "Thiên Diêu",
      jieshen: "Giải Thần",
      yinsha: "Âm Sát",
      tianxi: "Thiên Hỷ",
      tianguan: "Thiên Quan",
      tianfu: "Thiên Phúc",
      tianku: "Thiên Khốc",
      tianxu: "Thiên Hư",
      longchi: "Long Trì",
      fengge: "Phụng Các",
      hongluan: "Hồng Loan",
      guchen: "Cô Thần",
      guasu: "Quả Tú",
      feilian: "Phi Liêm",
      posui: "Phá Toái",
      taifu: "Đài Phụ",
      fenggao: "Phong Cáo",
      tianwu: "Thiên Vu",
      tianyue: "Thiên Nguyệt",
      santai: "Tam Thai",
      bazuo: "Bát Tọa",
      engguang: "Ân Quang",
      tiangui: "Thiên Quý",
      tiancai: "Thiên Tài",
      tianshou: "Thiên Thọ",
      jiekong: "Triệt Không",
      xunzhong: "Tuần Trung",
      xunkong: "Tuần Không",
      kongwang: "Không Vong",
      jielu: "Triệt Lộ",
      yuede: "Nguyệt Đức",
      tianshang: "Thiên Thương",
      tianshi: "Thiên Sứ",
      tianchu: "Thiên Trù",
      changsheng: "Trường Sinh",
      muyu: "Mục Dục",
      guandai: "Quan Đới",
      linguan: "Lâm Quan",
      diwang: "Đế Vượng",
      shuai: "Suy",
      bing: "Bệnh",
      si: "Tử",
      mu: "Mộ",
      jue: "Tuyệt",
      tai: "Thai",
      yang: "Dưỡng",
      boshi: "Bác Sỹ",
      lishi: "Lực Sỹ",
      qinglong: "Thanh Long",
      xiaohao: "Tiểu Hao",
      jiangjun: "Tướng Quân",
      zhoushu: "Tấu Thư",
      faylian: "Phi Liêm",
      xishen: "Hỷ Thần",
      bingfu: "Bệnh Phù",
      dahao: "Đại Hao",
      suipo: "Tuế Phá",
      fubing: "Phục Binh",
      guanfu: "Quan Phủ",
      suijian: "Tuế Kiện",
      huiqi: "Hối Khí",
      sangmen: "Tang Môn",
      guansuo: "Quán Tác",
      gwanfu: "Quan Phù",
      longde: "Long Đức",
      baihu: "Bạch Hổ",
      tiande: "Thiên Đức",
      diaoke: "Điếu Khách",
      jiangxing: "Tướng Tinh",
      panan: "Phan Án",
      suiyi: "Tuế Dịch",
      xiishen: "Tức Thần",
      huagai: "Hoa Cái",
      jiesha: "Kiếp Sát",
      zhaisha: "Tai Sát",
      tiansha: "Thiên Sát",
      zhibei: "Chỉ Bối",
      xianchi: "Hàm Trì",
      yuesha: "Nguyệt Sát",
      wangshen: "Vong Thần",
      yunkui: "Vận Khôi",
      yunyue: "Vận Việt",
      yunchang: "Vận Xương",
      yunqu: "Vận Khúc",
      yunluan: "Vận Loan",
      yunxi: "Vận Hỷ",
      yunlu: "Vận Lộc",
      yunyang: "Vận Dương",
      yuntuo: "Vận Đà",
      yunma: "Vận Mã",
      liukui: "Lưu Khôi",
      liuyue: "Lưu Việt",
      liuchang: "Lưu Xương",
      liuqu: "Lưu Khúc",
      liuluan: "Lưu Loan",
      liuxi: "Lưu Hỷ",
      liulu: "Lưu Lộc",
      liuyang: "Lưu Dương",
      liutuo: "Lưu Đà",
      liuma: "Lưu Mã",
      nianjie: "Niên Giải",
      yuekui: "Thiên Khôi(M)",
      yueyue: "Thiên Nguyệt(M)",
      yuechang: "Văn Xương(M)",
      yuequ: "Văn Khúc(M)",
      yueluan: "Hồng Loan(M)",
      yuexi: "Thiên Hỷ(M)",
      yuelu: "Lộc Tồn(M)",
      yueyang: "Kình Dương(M)",
      yuetuo: "Đà La(M)",
      yuema: "Thiên Mã(M)",
      rikui: "Thiên Khôi(d)",
      riyue: "Thiên Nguyệt(d)",
      richang: "Văn Xương(d)",
      riqu: "Văn Khúc(d)",
      riluan: "Hồng Loan(d)",
      rixi: "Thiên Hỷ(d)",
      rilu: "Lộc Tồn(d)",
      riyang: "Kình Dương(d)",
      rituo: "Đà La(d)",
      rima: "Thiên Mã(d)",
      shikui: "Thiên Khôi(H)",
      shiyue: "Thiên Nguyệt(H)",
      shichang: "Văn Xương(H)",
      shiqu: "Văn Khúc(H)",
      shiluan: "Hồng Loan(H)",
      shixi: "Thiên Hỷ(H)",
      shilu: "Lộc Tồn(H)",
      shiyang: "Kình Dương(H)",
      shituo: "Đà La(H)",
      shima: "Thiên Mã(H)"
    };
  }
});

// node_modules/iztro/lib/i18n/locales/vi-VN/index.js
var require_vi_VN = __commonJS({
  "node_modules/iztro/lib/i18n/locales/vi-VN/index.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var common_json_1 = __importDefault(require_common6());
    var brightness_1 = __importDefault(require_brightness6());
    var earthlyBranch_1 = __importDefault(require_earthlyBranch6());
    var fiveElementsClass_1 = __importDefault(require_fiveElementsClass6());
    var gender_1 = __importDefault(require_gender6());
    var heavenlyStem_1 = __importDefault(require_heavenlyStem6());
    var mutagen_1 = __importDefault(require_mutagen6());
    var palace_1 = __importDefault(require_palace6());
    var star_1 = __importDefault(require_star6());
    exports.default = __assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, common_json_1.default), fiveElementsClass_1.default), heavenlyStem_1.default), earthlyBranch_1.default), brightness_1.default), mutagen_1.default), star_1.default), palace_1.default), gender_1.default);
  }
});

// node_modules/iztro/lib/i18n/types/Brightness.js
var require_Brightness = __commonJS({
  "node_modules/iztro/lib/i18n/types/Brightness.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/EarthlyBranch.js
var require_EarthlyBranch = __commonJS({
  "node_modules/iztro/lib/i18n/types/EarthlyBranch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/FiveElementsClass.js
var require_FiveElementsClass = __commonJS({
  "node_modules/iztro/lib/i18n/types/FiveElementsClass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/Gender.js
var require_Gender = __commonJS({
  "node_modules/iztro/lib/i18n/types/Gender.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/HeavenlyStem.js
var require_HeavenlyStem = __commonJS({
  "node_modules/iztro/lib/i18n/types/HeavenlyStem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/Palace.js
var require_Palace = __commonJS({
  "node_modules/iztro/lib/i18n/types/Palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/Star.js
var require_Star = __commonJS({
  "node_modules/iztro/lib/i18n/types/Star.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/mutagen.js
var require_mutagen7 = __commonJS({
  "node_modules/iztro/lib/i18n/types/mutagen.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/iztro/lib/i18n/types/index.js
var require_types = __commonJS({
  "node_modules/iztro/lib/i18n/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Brightness(), exports);
    __exportStar(require_EarthlyBranch(), exports);
    __exportStar(require_FiveElementsClass(), exports);
    __exportStar(require_Gender(), exports);
    __exportStar(require_HeavenlyStem(), exports);
    __exportStar(require_Palace(), exports);
    __exportStar(require_Star(), exports);
    __exportStar(require_mutagen7(), exports);
  }
});

// node_modules/iztro/lib/i18n/index.js
var require_i18n = __commonJS({
  "node_modules/iztro/lib/i18n/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.kot = exports.t = exports.setLanguage = void 0;
    var i18next_1 = __importDefault(require_i18next());
    var zh_CN_1 = __importDefault(require_zh_CN());
    var zh_TW_1 = __importDefault(require_zh_TW());
    var ko_KR_1 = __importDefault(require_ko_KR());
    var ja_JP_1 = __importDefault(require_ja_JP());
    var en_US_1 = __importDefault(require_en_US());
    var vi_VN_1 = __importDefault(require_vi_VN());
    var resources = {
      "en-US": {
        translation: en_US_1.default
      },
      "ja-JP": {
        translation: ja_JP_1.default
      },
      "ko-KR": {
        translation: ko_KR_1.default
      },
      "zh-CN": {
        translation: zh_CN_1.default
      },
      "zh-TW": {
        translation: zh_TW_1.default
      },
      "vi-VN": {
        translation: vi_VN_1.default
      }
    };
    i18next_1.default.init({ lng: "zh-CN", resources });
    var setLanguage = function(language) {
      i18next_1.default.changeLanguage(language);
    };
    exports.setLanguage = setLanguage;
    var t = function(str) {
      if (!str) {
        return "";
      }
      return i18next_1.default.t(str);
    };
    exports.t = t;
    var kot = function(value, k) {
      var res = value;
      for (var _i = 0, _a = Object.entries(resources); _i < _a.length; _i++) {
        var _b = _a[_i], item = _b[1];
        for (var _c = 0, _d = Object.entries(item.translation); _c < _d.length; _c++) {
          var _e = _d[_c], transKey = _e[0], trans = _e[1];
          if ((k && transKey.includes(k) || !k) && trans === value) {
            res = transKey;
            return res;
          }
        }
      }
      return res;
    };
    exports.kot = kot;
    __exportStar(require_types(), exports);
    exports.default = i18next_1.default;
  }
});

// node_modules/iztro/lib/utils/index.js
var require_utils = __commonJS({
  "node_modules/iztro/lib/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.translateChineseDate = exports.getAgeIndex = exports.timeToIndex = exports.mergeStars = exports.fixLunarDayIndex = exports.fixLunarMonthIndex = exports.fixEarthlyBranchIndex = exports.getMutagensByHeavenlyStem = exports.getMutagen = exports.getBrightness = exports.earthlyBranchIndexToPalaceIndex = exports.fixIndex = void 0;
    var data_1 = require_data();
    var star_1 = require_star7();
    var i18n_1 = require_i18n();
    var lunar_lite_1 = require_lib();
    var astro_1 = require_astro2();
    var getTargetMutagens = function(heavenlyStem) {
      var _a, _b;
      var mutagens = (0, astro_1.getConfig)().mutagens;
      var result;
      if (mutagens && mutagens[heavenlyStem]) {
        result = (_a = mutagens[heavenlyStem]) !== null && _a !== void 0 ? _a : [];
      } else {
        result = (_b = data_1.heavenlyStems[heavenlyStem].mutagen) !== null && _b !== void 0 ? _b : [];
      }
      return result;
    };
    var fixIndex = function(index, max) {
      if (max === void 0) {
        max = 12;
      }
      if (index < 0) {
        return (0, exports.fixIndex)(index + max, max);
      }
      if (index > max - 1) {
        return (0, exports.fixIndex)(index - max, max);
      }
      var res = 1 / index === -Infinity ? 0 : index;
      return res;
    };
    exports.fixIndex = fixIndex;
    var earthlyBranchIndexToPalaceIndex = function(earthlyBranchName) {
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      var yin = (0, i18n_1.kot)("yinEarthly", "Earthly");
      return (0, exports.fixIndex)(data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch) - data_1.EARTHLY_BRANCHES.indexOf(yin));
    };
    exports.earthlyBranchIndexToPalaceIndex = earthlyBranchIndexToPalaceIndex;
    var getBrightness = function(starName, index) {
      var _a;
      var star = (0, i18n_1.kot)(starName);
      var brightness = (0, astro_1.getConfig)().brightness;
      var targetBrightness = brightness[star] ? brightness[star] : (_a = data_1.STARS_INFO[star]) === null || _a === void 0 ? void 0 : _a.brightness;
      if (!targetBrightness) {
        return "";
      }
      return (0, i18n_1.t)(targetBrightness[(0, exports.fixIndex)(index)]);
    };
    exports.getBrightness = getBrightness;
    var getMutagen = function(starName, heavenlyStemName) {
      var heavenlyStem = (0, i18n_1.kot)(heavenlyStemName, "Heavenly");
      var starKey = (0, i18n_1.kot)(starName);
      var target = getTargetMutagens(heavenlyStem);
      return (0, i18n_1.t)(data_1.MUTAGEN[target.indexOf(starKey)]);
    };
    exports.getMutagen = getMutagen;
    var getMutagensByHeavenlyStem = function(heavenlyStemName) {
      var heavenlyStem = (0, i18n_1.kot)(heavenlyStemName, "Heavenly");
      var target = getTargetMutagens(heavenlyStem);
      return target.map(function(star) {
        return (0, i18n_1.t)(star);
      });
    };
    exports.getMutagensByHeavenlyStem = getMutagensByHeavenlyStem;
    var fixEarthlyBranchIndex = function(earthlyBranchName) {
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      return (0, exports.fixIndex)(data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch) - data_1.EARTHLY_BRANCHES.indexOf("yinEarthly"));
    };
    exports.fixEarthlyBranchIndex = fixEarthlyBranchIndex;
    var fixLunarMonthIndex = function(solarDateStr, timeIndex, fixLeap) {
      var _a = (0, lunar_lite_1.solar2lunar)(solarDateStr), lunarMonth = _a.lunarMonth, lunarDay = _a.lunarDay, isLeap = _a.isLeap;
      var firstIndex = data_1.EARTHLY_BRANCHES.indexOf("yinEarthly");
      var needToAdd = isLeap && fixLeap && lunarDay > 15 && timeIndex !== 12;
      return (0, exports.fixIndex)(lunarMonth + 1 - firstIndex + (needToAdd ? 1 : 0));
    };
    exports.fixLunarMonthIndex = fixLunarMonthIndex;
    var fixLunarDayIndex = function(lunarDay, timeIndex) {
      return timeIndex >= 12 ? lunarDay : lunarDay - 1;
    };
    exports.fixLunarDayIndex = fixLunarDayIndex;
    var mergeStars = function() {
      var stars = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        stars[_i] = arguments[_i];
      }
      var finalStars = (0, star_1.initStars)();
      stars.forEach(function(item) {
        item.forEach(function(subItem, index) {
          Array.prototype.push.apply(finalStars[index], subItem);
        });
      });
      return finalStars;
    };
    exports.mergeStars = mergeStars;
    var timeToIndex = function(hour) {
      if (hour === 0) {
        return 0;
      }
      if (hour === 23) {
        return 12;
      }
      return Math.floor((hour + 1) / 2);
    };
    exports.timeToIndex = timeToIndex;
    var getAgeIndex = function(earthlyBranchName) {
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      var ageIdx = -1;
      if (["yinEarthly", "wuEarthly", "xuEarthly"].includes(earthlyBranch)) {
        ageIdx = (0, exports.fixEarthlyBranchIndex)("chen");
      } else if (["shenEarthly", "ziEarthly", "chenEarthly"].includes(earthlyBranch)) {
        ageIdx = (0, exports.fixEarthlyBranchIndex)("xu");
      } else if (["siEarthly", "youEarthly", "chouEarthly"].includes(earthlyBranch)) {
        ageIdx = (0, exports.fixEarthlyBranchIndex)("wei");
      } else if (["haiEarthly", "maoEarthly", "weiEarthly"].includes(earthlyBranch)) {
        ageIdx = (0, exports.fixIndex)((0, exports.fixEarthlyBranchIndex)("chou"));
      }
      return ageIdx;
    };
    exports.getAgeIndex = getAgeIndex;
    var translateChineseDate = function(chineseDate) {
      var yearly = chineseDate.yearly, monthly = chineseDate.monthly, daily = chineseDate.daily, hourly = chineseDate.hourly;
      if (yearly.some(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item)).length > 1;
      }) || monthly.some(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item)).length > 1;
      }) || daily.some(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item)).length > 1;
      }) || hourly.some(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item)).length > 1;
      })) {
        return "".concat(yearly.map(function(item) {
          return (0, i18n_1.t)((0, i18n_1.kot)(item));
        }).join(" "), " - ").concat(monthly.map(function(item) {
          return (0, i18n_1.t)((0, i18n_1.kot)(item));
        }).join(" "), " - ").concat(daily.map(function(item) {
          return (0, i18n_1.t)((0, i18n_1.kot)(item));
        }).join(" "), " - ").concat(hourly.map(function(item) {
          return (0, i18n_1.t)((0, i18n_1.kot)(item));
        }).join(" "));
      }
      return "".concat(yearly.map(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item));
      }).join(""), " ").concat(monthly.map(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item));
      }).join(""), " ").concat(daily.map(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item));
      }).join(""), " ").concat(hourly.map(function(item) {
        return (0, i18n_1.t)((0, i18n_1.kot)(item));
      }).join(""));
    };
    exports.translateChineseDate = translateChineseDate;
  }
});

// node_modules/iztro/lib/astro/FunctionalSurpalaces.js
var require_FunctionalSurpalaces = __commonJS({
  "node_modules/iztro/lib/astro/FunctionalSurpalaces.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FunctionalSurpalaces = void 0;
    var analyzer_1 = require_analyzer();
    var FunctionalSurpalaces = (
      /** @class */
      /* @__PURE__ */ function() {
        function FunctionalSurpalaces2(_a) {
          var _this = this;
          var target = _a.target, opposite = _a.opposite, wealth = _a.wealth, career = _a.career;
          this.have = function(stars) {
            return (0, analyzer_1.isSurroundedByStars)(_this, stars);
          };
          this.notHave = function(stars) {
            return (0, analyzer_1.notSurroundedByStars)(_this, stars);
          };
          this.haveOneOf = function(stars) {
            return (0, analyzer_1.isSurroundedByOneOfStars)(_this, stars);
          };
          this.haveMutagen = function(mutagen) {
            return _this.target.hasMutagen(mutagen) || _this.opposite.hasMutagen(mutagen) || _this.wealth.hasMutagen(mutagen) || _this.career.hasMutagen(mutagen);
          };
          this.notHaveMutagen = function(mutagen) {
            return !_this.haveMutagen(mutagen);
          };
          this.target = target;
          this.opposite = opposite;
          this.wealth = wealth;
          this.career = career;
        }
        return FunctionalSurpalaces2;
      }()
    );
    exports.FunctionalSurpalaces = FunctionalSurpalaces;
  }
});

// node_modules/iztro/lib/astro/analyzer.js
var require_analyzer = __commonJS({
  "node_modules/iztro/lib/astro/analyzer.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mutagensToStars = exports.notSurroundedByStars = exports.isSurroundedByOneOfStars = exports.isSurroundedByStars = exports.hasOneOfStars = exports.notHaveStars = exports.notHaveMutagenInPalce = exports.hasMutagenInPlace = exports.hasStars = exports.getPalace = exports.getSurroundedPalaces = void 0;
    var data_1 = require_data();
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var FunctionalSurpalaces_1 = require_FunctionalSurpalaces();
    var _concatStars = function() {
      var stars = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        stars[_i] = arguments[_i];
      }
      return Array.from(stars).reduce(function(prev, next) {
        return __spreadArray(__spreadArray([], prev, true), next, true);
      }, []).map(function(item) {
        return (0, i18n_1.kot)(item.name);
      });
    };
    var _includeAll = function(allStarsInPalace, targetStars) {
      var starKeys = targetStars.map(function(item) {
        return (0, i18n_1.kot)(item);
      });
      return starKeys.every(function(star) {
        return allStarsInPalace.includes(star);
      });
    };
    var _excludeAll = function(allStarsInPalace, targetStars) {
      var starKeys = targetStars.map(function(item) {
        return (0, i18n_1.kot)(item);
      });
      return starKeys.every(function(star) {
        return !allStarsInPalace.includes(star);
      });
    };
    var _includeOneOf = function(allStarsInPalace, targetStars) {
      var starKeys = targetStars.map(function(item) {
        return (0, i18n_1.kot)(item);
      });
      return starKeys.some(function(star) {
        return allStarsInPalace.includes(star);
      });
    };
    var _includeMutagen = function(stars, mutagen) {
      var mutagenKey = (0, i18n_1.kot)(mutagen);
      return stars.some(function(star) {
        return star.mutagen && (0, i18n_1.kot)(star.mutagen) === mutagenKey;
      });
    };
    var _getAllStarsInSurroundedPalaces = function(_a) {
      var target = _a.target, opposite = _a.opposite, wealth = _a.wealth, career = _a.career;
      return _concatStars(target.majorStars, target.minorStars, target.adjectiveStars, opposite.majorStars, opposite.minorStars, opposite.adjectiveStars, wealth.majorStars, wealth.minorStars, wealth.adjectiveStars, career.majorStars, career.minorStars, career.adjectiveStars);
    };
    var getSurroundedPalaces = function($, indexOrName) {
      var palace = (0, exports.getPalace)($, indexOrName);
      if (!palace) {
        throw new Error("indexOrName is inccorrect.");
      }
      var palaceIndex = (0, utils_1.fixEarthlyBranchIndex)(palace.earthlyBranch);
      var palace6 = (0, exports.getPalace)($, (0, utils_1.fixIndex)(palaceIndex + 6));
      var palace4 = (0, exports.getPalace)($, (0, utils_1.fixIndex)(palaceIndex + 4));
      var palace8 = (0, exports.getPalace)($, (0, utils_1.fixIndex)(palaceIndex + 8));
      if (!palace4 || !palace6 || !palace8) {
        throw new Error("indexOrName is inccorrect.");
      }
      return new FunctionalSurpalaces_1.FunctionalSurpalaces({
        target: palace,
        wealth: palace8,
        opposite: palace6,
        career: palace4
      });
    };
    exports.getSurroundedPalaces = getSurroundedPalaces;
    var getPalace = function($, indexOrName) {
      var palace;
      if (typeof indexOrName === "number") {
        if (indexOrName < 0 || indexOrName > 11) {
          throw new Error("invalid palace index.");
        }
        palace = $.palaces[indexOrName];
      } else {
        palace = $.palaces.find(function(item) {
          if ((0, i18n_1.kot)(indexOrName) === "originalPalace" && item.isOriginalPalace) {
            return item;
          }
          if ((0, i18n_1.kot)(indexOrName) === "bodyPalace" && item.isBodyPalace) {
            return item;
          }
          if ((0, i18n_1.kot)(item.name) === (0, i18n_1.kot)(indexOrName)) {
            return item;
          }
        });
      }
      palace === null || palace === void 0 ? void 0 : palace.setAstrolabe($);
      return palace;
    };
    exports.getPalace = getPalace;
    var hasStars = function($, stars) {
      var allStarsInPalace = _concatStars($.majorStars, $.minorStars, $.adjectiveStars);
      return _includeAll(allStarsInPalace, stars);
    };
    exports.hasStars = hasStars;
    var hasMutagenInPlace = function($, mutagen) {
      var allStarsInPalace = __spreadArray(__spreadArray([], $.majorStars, true), $.minorStars, true);
      return _includeMutagen(allStarsInPalace, mutagen);
    };
    exports.hasMutagenInPlace = hasMutagenInPlace;
    var notHaveMutagenInPalce = function($, mutagen) {
      return !(0, exports.hasMutagenInPlace)($, mutagen);
    };
    exports.notHaveMutagenInPalce = notHaveMutagenInPalce;
    var notHaveStars = function($, stars) {
      var allStarsInPalace = _concatStars($.majorStars, $.minorStars, $.adjectiveStars);
      return _excludeAll(allStarsInPalace, stars);
    };
    exports.notHaveStars = notHaveStars;
    var hasOneOfStars = function($, stars) {
      var allStarsInPalace = _concatStars($.majorStars, $.minorStars, $.adjectiveStars);
      return _includeOneOf(allStarsInPalace, stars);
    };
    exports.hasOneOfStars = hasOneOfStars;
    var isSurroundedByStars = function($, stars) {
      var allStarsInPalace = _getAllStarsInSurroundedPalaces($);
      return _includeAll(allStarsInPalace, stars);
    };
    exports.isSurroundedByStars = isSurroundedByStars;
    var isSurroundedByOneOfStars = function($, stars) {
      var allStarsInPalace = _getAllStarsInSurroundedPalaces($);
      return _includeOneOf(allStarsInPalace, stars);
    };
    exports.isSurroundedByOneOfStars = isSurroundedByOneOfStars;
    var notSurroundedByStars = function($, stars) {
      var allStarsInPalace = _getAllStarsInSurroundedPalaces($);
      return _excludeAll(allStarsInPalace, stars);
    };
    exports.notSurroundedByStars = notSurroundedByStars;
    var mutagensToStars = function(heavenlyStem, mutagens) {
      var muts = Array.isArray(mutagens) ? mutagens : [mutagens];
      var stars = [];
      var mutagenStars = (0, utils_1.getMutagensByHeavenlyStem)(heavenlyStem);
      muts.forEach(function(withMutagen) {
        var mutagenIndex = data_1.MUTAGEN.indexOf((0, i18n_1.kot)(withMutagen));
        if (!mutagenStars[mutagenIndex]) {
          return;
        }
        stars.push(mutagenStars[mutagenIndex]);
      });
      return stars;
    };
    exports.mutagensToStars = mutagensToStars;
  }
});

// node_modules/iztro/lib/astro/FunctionalHoroscope.js
var require_FunctionalHoroscope = __commonJS({
  "node_modules/iztro/lib/astro/FunctionalHoroscope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var data_1 = require_data();
    var _getHoroscopePalaceIndex = function($, scope, palaceName) {
      var palaceIndex = -1;
      if (scope === "origin") {
        $.astrolabe.palaces.some(function(p, idx) {
          if (p.name === palaceName) {
            palaceIndex = idx;
            return true;
          }
          return false;
        });
      } else {
        palaceIndex = $[scope].palaceNames.indexOf(palaceName);
      }
      return palaceIndex;
    };
    var FunctionalHoroscope = (
      /** @class */
      /* @__PURE__ */ function() {
        function FunctionalHoroscope2(data, astrolabe) {
          var _this = this;
          this.agePalace = function() {
            return _this.astrolabe.palace(_this.age.index);
          };
          this.palace = function(palaceName, scope) {
            if (scope === "origin") {
              return _this.astrolabe.palace(palaceName);
            }
            var targetPalaceindex = _this[scope].palaceNames.indexOf(palaceName);
            return _this.astrolabe.palace(targetPalaceindex);
          };
          this.surroundPalaces = function(palaceName, scope) {
            if (scope === "origin") {
              return _this.astrolabe.surroundedPalaces(palaceName);
            }
            var targetPalaceindex = _this[scope].palaceNames.indexOf(palaceName);
            return _this.astrolabe.surroundedPalaces(targetPalaceindex);
          };
          this.hasHoroscopeStars = function(palaceName, scope, horoscopeStar) {
            if (!_this.decadal.stars || !_this.yearly.stars) {
              return false;
            }
            var palaceIndex = _getHoroscopePalaceIndex(_this, scope, palaceName);
            var stars = (0, utils_1.mergeStars)(_this.decadal.stars, _this.yearly.stars)[palaceIndex];
            var starKeys = stars.map(function(item) {
              return (0, i18n_1.kot)(item.name);
            });
            var horoscopeStarKeys = horoscopeStar.map(function(item) {
              return (0, i18n_1.kot)(item);
            });
            return horoscopeStarKeys.every(function(star) {
              return starKeys.includes(star);
            });
          };
          this.notHaveHoroscopeStars = function(palaceName, scope, horoscopeStar) {
            if (!_this.decadal.stars || !_this.yearly.stars) {
              return false;
            }
            var palaceIndex = _getHoroscopePalaceIndex(_this, scope, palaceName);
            var stars = (0, utils_1.mergeStars)(_this.decadal.stars, _this.yearly.stars)[palaceIndex];
            var starKeys = stars.map(function(item) {
              return (0, i18n_1.kot)(item.name);
            });
            var horoscopeStarKeys = horoscopeStar.map(function(item) {
              return (0, i18n_1.kot)(item);
            });
            return horoscopeStarKeys.every(function(star) {
              return !starKeys.includes(star);
            });
          };
          this.hasOneOfHoroscopeStars = function(palaceName, scope, horoscopeStar) {
            if (!_this.decadal.stars || !_this.yearly.stars) {
              return false;
            }
            var palaceIndex = _getHoroscopePalaceIndex(_this, scope, palaceName);
            var stars = (0, utils_1.mergeStars)(_this.decadal.stars, _this.yearly.stars)[palaceIndex];
            var starKeys = stars.map(function(item) {
              return (0, i18n_1.kot)(item.name);
            });
            var horoscopeStarKeys = horoscopeStar.map(function(item) {
              return (0, i18n_1.kot)(item);
            });
            return horoscopeStarKeys.some(function(star) {
              return starKeys.includes(star);
            });
          };
          this.hasHoroscopeMutagen = function(palaceName, scope, horoscopeMutagen) {
            var _a, _b, _c, _d;
            if (scope === "origin") {
              return false;
            }
            var palaceIndex = _getHoroscopePalaceIndex(_this, scope, palaceName);
            var majorStars = (_b = (_a = _this.astrolabe.palace(palaceIndex)) === null || _a === void 0 ? void 0 : _a.majorStars) !== null && _b !== void 0 ? _b : [];
            var minorStars = (_d = (_c = _this.astrolabe.palace(palaceIndex)) === null || _c === void 0 ? void 0 : _c.minorStars) !== null && _d !== void 0 ? _d : [];
            var stars = (0, utils_1.mergeStars)([majorStars], [minorStars])[0].map(function(star) {
              return (0, i18n_1.kot)(star.name);
            });
            var mutagenIndex = data_1.MUTAGEN.indexOf((0, i18n_1.kot)(horoscopeMutagen));
            return stars.includes((0, i18n_1.kot)(_this[scope].mutagen[mutagenIndex]));
          };
          this.lunarDate = data.lunarDate;
          this.solarDate = data.solarDate;
          this.decadal = data.decadal;
          this.age = data.age;
          this.yearly = data.yearly;
          this.monthly = data.monthly;
          this.daily = data.daily;
          this.hourly = data.hourly;
          this.astrolabe = astrolabe;
          return this;
        }
        return FunctionalHoroscope2;
      }()
    );
    exports.default = FunctionalHoroscope;
  }
});

// node_modules/iztro/lib/astro/FunctionalAstrolabe.js
var require_FunctionalAstrolabe = __commonJS({
  "node_modules/iztro/lib/astro/FunctionalAstrolabe.js"(exports) {
    "use strict";
    var __spreadArray = exports && exports.__spreadArray || function(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var dayjs_1 = __importDefault(require_dayjs_min());
    var lunar_lite_1 = require_lib();
    var data_1 = require_data();
    var i18n_1 = require_i18n();
    var star_1 = require_star7();
    var utils_1 = require_utils();
    var analyzer_1 = require_analyzer();
    var palace_1 = require_palace7();
    var FunctionalHoroscope_1 = __importDefault(require_FunctionalHoroscope());
    var astro_1 = require_astro();
    var _getHoroscopeBySolarDate = function($, targetDate, timeIndex) {
      if (targetDate === void 0) {
        targetDate = /* @__PURE__ */ new Date();
      }
      var _birthday = (0, lunar_lite_1.solar2lunar)($.solarDate);
      var _date = (0, lunar_lite_1.solar2lunar)(targetDate);
      var convertTimeIndex = (0, utils_1.timeToIndex)((0, dayjs_1.default)(targetDate).hour());
      var _a = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(targetDate, timeIndex || convertTimeIndex, {
        // 运限是以立春为界，但为了满足部分流派允许配置
        year: (0, astro_1.getConfig)().horoscopeDivide
      }), yearly = _a.yearly, monthly = _a.monthly, daily = _a.daily, hourly = _a.hourly;
      var nominalAge = _date.lunarYear - _birthday.lunarYear;
      var isChildhood = false;
      if ((0, astro_1.getConfig)().ageDivide === "birthday") {
        if (_date.lunarYear === _birthday.lunarYear && _date.lunarMonth === _birthday.lunarMonth && _date.lunarDay > _birthday.lunarDay || _date.lunarMonth > _birthday.lunarMonth) {
          nominalAge += 1;
        }
      } else {
        nominalAge += 1;
      }
      var decadalIndex = -1;
      var heavenlyStemOfDecade = "jia";
      var earthlyBranchOfDecade = "zi";
      var ageIndex = -1;
      var yearlyIndex = (0, utils_1.fixEarthlyBranchIndex)(yearly[1]);
      var monthlyIndex = -1;
      var dailyIndex = -1;
      var hourlyIndex = -1;
      var heavenlyStemOfAge = "jia";
      var earthlyBranchOfAge = "zi";
      $.palaces.some(function(_a2, index) {
        var decadal = _a2.decadal;
        if (nominalAge >= decadal.range[0] && nominalAge <= decadal.range[1]) {
          decadalIndex = index;
          heavenlyStemOfDecade = decadal.heavenlyStem;
          earthlyBranchOfDecade = decadal.earthlyBranch;
          return true;
        }
      });
      if (decadalIndex < 0) {
        var palaces = ["命宫", "财帛", "疾厄", "夫妻", "福德", "官禄"];
        var targetIndex = palaces[nominalAge - 1];
        var targetPalace = $.palace(targetIndex);
        if (targetPalace) {
          isChildhood = true;
          decadalIndex = targetPalace.index;
          heavenlyStemOfDecade = targetPalace.heavenlyStem;
          earthlyBranchOfDecade = targetPalace.earthlyBranch;
        }
      }
      $.palaces.some(function(_a2, index) {
        var ages = _a2.ages, heavenlyStem = _a2.heavenlyStem, earthlyBranch = _a2.earthlyBranch;
        if (ages.includes(nominalAge)) {
          ageIndex = index;
          heavenlyStemOfAge = heavenlyStem;
          earthlyBranchOfAge = earthlyBranch;
          return true;
        }
      });
      monthlyIndex = (0, utils_1.fixIndex)(yearlyIndex - _birthday.lunarMonth + data_1.EARTHLY_BRANCHES.indexOf((0, i18n_1.kot)($.rawDates.chineseDate.hourly[1])) + _date.lunarMonth);
      dailyIndex = (0, utils_1.fixIndex)(monthlyIndex + _date.lunarDay - 1);
      hourlyIndex = (0, utils_1.fixIndex)(dailyIndex + data_1.EARTHLY_BRANCHES.indexOf((0, i18n_1.kot)(hourly[1], "Earthly")));
      var scope = {
        solarDate: (0, lunar_lite_1.normalizeDateStr)(targetDate).slice(0, 3).join("-"),
        lunarDate: _date.toString(true),
        decadal: {
          index: decadalIndex,
          name: isChildhood ? (0, i18n_1.t)("childhood") : (0, i18n_1.t)("decadal"),
          heavenlyStem: (0, i18n_1.t)((0, i18n_1.kot)(heavenlyStemOfDecade, "Heavnly")),
          earthlyBranch: (0, i18n_1.t)((0, i18n_1.kot)(earthlyBranchOfDecade, "Earthly")),
          palaceNames: (0, palace_1.getPalaceNames)(decadalIndex),
          mutagen: (0, utils_1.getMutagensByHeavenlyStem)(heavenlyStemOfDecade),
          stars: (0, star_1.getHoroscopeStar)(heavenlyStemOfDecade, earthlyBranchOfDecade, "decadal")
        },
        age: {
          index: ageIndex,
          nominalAge,
          name: (0, i18n_1.t)("turn"),
          heavenlyStem: heavenlyStemOfAge,
          earthlyBranch: earthlyBranchOfAge,
          palaceNames: (0, palace_1.getPalaceNames)(ageIndex),
          mutagen: (0, utils_1.getMutagensByHeavenlyStem)(heavenlyStemOfAge)
        },
        yearly: {
          index: yearlyIndex,
          name: (0, i18n_1.t)("yearly"),
          heavenlyStem: (0, i18n_1.t)((0, i18n_1.kot)(yearly[0], "Heavenly")),
          earthlyBranch: (0, i18n_1.t)((0, i18n_1.kot)(yearly[1], "Earthly")),
          palaceNames: (0, palace_1.getPalaceNames)(yearlyIndex),
          mutagen: (0, utils_1.getMutagensByHeavenlyStem)(yearly[0]),
          stars: (0, star_1.getHoroscopeStar)(yearly[0], yearly[1], "yearly"),
          yearlyDecStar: (0, star_1.getYearly12)(targetDate)
        },
        monthly: {
          index: monthlyIndex,
          name: (0, i18n_1.t)("monthly"),
          heavenlyStem: (0, i18n_1.t)((0, i18n_1.kot)(monthly[0], "Heavenly")),
          earthlyBranch: (0, i18n_1.t)((0, i18n_1.kot)(monthly[1], "Earthly")),
          palaceNames: (0, palace_1.getPalaceNames)(monthlyIndex),
          mutagen: (0, utils_1.getMutagensByHeavenlyStem)(monthly[0]),
          stars: (0, star_1.getHoroscopeStar)(monthly[0], monthly[1], "monthly")
        },
        daily: {
          index: dailyIndex,
          name: (0, i18n_1.t)("daily"),
          heavenlyStem: (0, i18n_1.t)((0, i18n_1.kot)(daily[0], "Heavenly")),
          earthlyBranch: (0, i18n_1.t)((0, i18n_1.kot)(daily[1], "Earthly")),
          palaceNames: (0, palace_1.getPalaceNames)(dailyIndex),
          mutagen: (0, utils_1.getMutagensByHeavenlyStem)(daily[0]),
          stars: (0, star_1.getHoroscopeStar)(daily[0], daily[1], "daily")
        },
        hourly: {
          index: hourlyIndex,
          name: (0, i18n_1.t)("hourly"),
          heavenlyStem: (0, i18n_1.t)((0, i18n_1.kot)(hourly[0], "Heavenly")),
          earthlyBranch: (0, i18n_1.t)((0, i18n_1.kot)(hourly[1], "Earthly")),
          palaceNames: (0, palace_1.getPalaceNames)(hourlyIndex),
          mutagen: (0, utils_1.getMutagensByHeavenlyStem)(hourly[0]),
          stars: (0, star_1.getHoroscopeStar)(hourly[0], hourly[1], "hourly")
        }
      };
      return new FunctionalHoroscope_1.default(scope, $);
    };
    var FunctionalAstrolabe = (
      /** @class */
      function() {
        function FunctionalAstrolabe2(data) {
          var _this = this;
          this.plugins = [];
          this.star = function(starName) {
            var targetStar;
            _this.palaces.some(function(p) {
              __spreadArray(__spreadArray(__spreadArray([], p.majorStars, true), p.minorStars, true), p.adjectiveStars, true).some(function(item) {
                if ((0, i18n_1.kot)(item.name) === (0, i18n_1.kot)(starName)) {
                  targetStar = item;
                  targetStar.setPalace(p);
                  targetStar.setAstrolabe(_this);
                }
              });
            });
            if (!targetStar) {
              throw new Error("invalid star name.");
            }
            return targetStar;
          };
          this.horoscope = function(targetDate, timeIndexOfTarget) {
            if (targetDate === void 0) {
              targetDate = /* @__PURE__ */ new Date();
            }
            return _getHoroscopeBySolarDate(_this, targetDate, timeIndexOfTarget);
          };
          this.palace = function(indexOrName) {
            return (0, analyzer_1.getPalace)(_this, indexOrName);
          };
          this.surroundedPalaces = function(indexOrName) {
            return (0, analyzer_1.getSurroundedPalaces)(_this, indexOrName);
          };
          this.isSurrounded = function(indexOrName, stars) {
            return _this.surroundedPalaces(indexOrName).have(stars);
          };
          this.isSurroundedOneOf = function(indexOrName, stars) {
            return _this.surroundedPalaces(indexOrName).haveOneOf(stars);
          };
          this.notSurrounded = function(indexOrName, stars) {
            return _this.surroundedPalaces(indexOrName).notHave(stars);
          };
          this.gender = data.gender;
          this.solarDate = data.solarDate;
          this.lunarDate = data.lunarDate;
          this.chineseDate = data.chineseDate;
          this.rawDates = data.rawDates;
          this.time = data.time;
          this.timeRange = data.timeRange;
          this.sign = data.sign;
          this.zodiac = data.zodiac;
          this.earthlyBranchOfBodyPalace = data.earthlyBranchOfBodyPalace;
          this.earthlyBranchOfSoulPalace = data.earthlyBranchOfSoulPalace;
          this.soul = data.soul;
          this.body = data.body;
          this.fiveElementsClass = data.fiveElementsClass;
          this.palaces = data.palaces;
          this.copyright = data.copyright;
          return this;
        }
        FunctionalAstrolabe2.prototype.use = function(plugin) {
          this.plugins.push(plugin);
          plugin.apply(this);
        };
        return FunctionalAstrolabe2;
      }()
    );
    exports.default = FunctionalAstrolabe;
  }
});

// node_modules/iztro/lib/astro/FunctionalPalace.js
var require_FunctionalPalace = __commonJS({
  "node_modules/iztro/lib/astro/FunctionalPalace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var analyzer_1 = require_analyzer();
    var FunctionalPalace = (
      /** @class */
      /* @__PURE__ */ function() {
        function FunctionalPalace2(data) {
          var _this = this;
          this.has = function(stars) {
            return (0, analyzer_1.hasStars)(_this, stars);
          };
          this.notHave = function(stars) {
            return (0, analyzer_1.notHaveStars)(_this, stars);
          };
          this.hasOneOf = function(stars) {
            return (0, analyzer_1.hasOneOfStars)(_this, stars);
          };
          this.hasMutagen = function(mutagen) {
            return (0, analyzer_1.hasMutagenInPlace)(_this, mutagen);
          };
          this.notHaveMutagen = function(mutagen) {
            return (0, analyzer_1.notHaveMutagenInPalce)(_this, mutagen);
          };
          this.isEmpty = function(excludeStars) {
            var _a;
            if ((_a = _this.majorStars) === null || _a === void 0 ? void 0 : _a.filter(function(star) {
              return star.type === "major";
            }).length) {
              return false;
            }
            if ((excludeStars === null || excludeStars === void 0 ? void 0 : excludeStars.length) && _this.hasOneOf(excludeStars)) {
              return false;
            }
            return true;
          };
          this.setAstrolabe = function(astro) {
            return _this._astrolabe = astro;
          };
          this.astrolabe = function() {
            return _this._astrolabe;
          };
          this.fliesTo = function(to, withMutagens) {
            var _a;
            var toPalace = (_a = _this.astrolabe()) === null || _a === void 0 ? void 0 : _a.palace(to);
            if (!toPalace) {
              return false;
            }
            var heavenlyStem = _this.heavenlyStem;
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, withMutagens);
            if (!stars || !stars.length) {
              return false;
            }
            return toPalace.has(stars);
          };
          this.fliesOneOfTo = function(to, withMutagens) {
            var _a;
            var toPalace = (_a = _this.astrolabe()) === null || _a === void 0 ? void 0 : _a.palace(to);
            if (!toPalace) {
              return false;
            }
            var heavenlyStem = _this.heavenlyStem;
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, withMutagens);
            if (!stars || !stars.length) {
              return true;
            }
            return toPalace.hasOneOf(stars);
          };
          this.notFlyTo = function(to, withMutagens) {
            var _a;
            var toPalace = (_a = _this.astrolabe()) === null || _a === void 0 ? void 0 : _a.palace(to);
            if (!toPalace) {
              return false;
            }
            var heavenlyStem = _this.heavenlyStem;
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, withMutagens);
            if (!stars || !stars.length) {
              return true;
            }
            return toPalace.notHave(stars);
          };
          this.selfMutaged = function(withMutagens) {
            var heavenlyStem = _this.heavenlyStem;
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, withMutagens);
            return _this.has(stars);
          };
          this.selfMutagedOneOf = function(withMutagens) {
            var muts = [];
            if (!withMutagens || !withMutagens.length) {
              muts = ["禄", "权", "科", "忌"];
            } else {
              muts = withMutagens;
            }
            var heavenlyStem = _this.heavenlyStem;
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, muts);
            return _this.hasOneOf(stars);
          };
          this.notSelfMutaged = function(withMutagens) {
            var muts = [];
            if (!withMutagens || !withMutagens.length) {
              muts = ["禄", "权", "科", "忌"];
            } else {
              muts = withMutagens;
            }
            var heavenlyStem = _this.heavenlyStem;
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, muts);
            return _this.notHave(stars);
          };
          this.mutagedPlaces = function() {
            var heavenlyStem = _this.heavenlyStem;
            var astrolabe = _this.astrolabe();
            if (!astrolabe) {
              return [];
            }
            var stars = (0, analyzer_1.mutagensToStars)(heavenlyStem, ["禄", "权", "科", "忌"]);
            return stars.map(function(star) {
              return astrolabe.star(star).palace();
            });
          };
          this.index = data.index;
          this.name = data.name;
          this.isBodyPalace = data.isBodyPalace;
          this.isOriginalPalace = data.isOriginalPalace;
          this.heavenlyStem = data.heavenlyStem;
          this.earthlyBranch = data.earthlyBranch;
          this.majorStars = data.majorStars;
          this.minorStars = data.minorStars;
          this.adjectiveStars = data.adjectiveStars;
          this.changsheng12 = data.changsheng12;
          this.boshi12 = data.boshi12;
          this.jiangqian12 = data.jiangqian12;
          this.suiqian12 = data.suiqian12;
          this.decadal = data.decadal;
          this.ages = data.ages;
          return this;
        }
        return FunctionalPalace2;
      }()
    );
    exports.default = FunctionalPalace;
  }
});

// node_modules/iztro/lib/astro/astro.js
var require_astro = __commonJS({
  "node_modules/iztro/lib/astro/astro.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMajorStarByLunarDate = exports.getMajorStarBySolarDate = exports.getSignByLunarDate = exports.getSignBySolarDate = exports.getZodiacBySolarDate = exports.withOptions = exports.rearrangeAstrolable = exports.byLunar = exports.astrolabeByLunarDate = exports.bySolar = exports.astrolabeBySolarDate = exports.getConfig = exports.config = exports.loadPlugin = exports.loadPlugins = void 0;
    var lunar_lite_1 = require_lib();
    var data_1 = require_data();
    var i18n_1 = require_i18n();
    var star_1 = require_star7();
    var utils_1 = require_utils();
    var FunctionalAstrolabe_1 = __importDefault(require_FunctionalAstrolabe());
    var FunctionalPalace_1 = __importDefault(require_FunctionalPalace());
    var palace_1 = require_palace7();
    var _plugins = [];
    var _mutagens = {};
    var _brightness = {};
    var _yearDivide = "exact";
    var _horoscopeDivide = "exact";
    var _ageDivide = "normal";
    var _algorithm = "default";
    var loadPlugins = function(plugins) {
      Array.prototype.push.apply(_plugins, plugins);
    };
    exports.loadPlugins = loadPlugins;
    var loadPlugin = function(plugin) {
      _plugins.push(plugin);
    };
    exports.loadPlugin = loadPlugin;
    var config = function(_a) {
      var mutagens = _a.mutagens, brightness = _a.brightness, _b = _a.yearDivide, yearDivide = _b === void 0 ? _yearDivide : _b, _c = _a.ageDivide, ageDivide = _c === void 0 ? _ageDivide : _c, _d = _a.horoscopeDivide, horoscopeDivide = _d === void 0 ? _horoscopeDivide : _d, _e = _a.algorithm, algorithm = _e === void 0 ? _algorithm : _e;
      if (mutagens) {
        Object.entries(mutagens).forEach(function(_a2) {
          var _b2;
          var key = _a2[0], value = _a2[1];
          _mutagens[(0, i18n_1.kot)(key)] = (_b2 = value.map(function(item) {
            return (0, i18n_1.kot)(item);
          })) !== null && _b2 !== void 0 ? _b2 : [];
        });
      }
      if (brightness) {
        Object.entries(brightness).forEach(function(_a2) {
          var _b2;
          var key = _a2[0], value = _a2[1];
          _brightness[(0, i18n_1.kot)(key)] = (_b2 = value.map(function(item) {
            return (0, i18n_1.kot)(item);
          })) !== null && _b2 !== void 0 ? _b2 : [];
        });
      }
      _yearDivide = yearDivide;
      _horoscopeDivide = horoscopeDivide;
      _ageDivide = ageDivide;
      _algorithm = algorithm;
    };
    exports.config = config;
    var getConfig = function() {
      return {
        mutagens: _mutagens,
        brightness: _brightness,
        yearDivide: _yearDivide,
        ageDivide: _ageDivide,
        horoscopeDivide: _horoscopeDivide,
        algorithm: _algorithm
      };
    };
    exports.getConfig = getConfig;
    function astrolabeBySolarDate(solarDateStr, timeIndex, gender, fixLeap, language) {
      if (fixLeap === void 0) {
        fixLeap = true;
      }
      return bySolar(solarDateStr, timeIndex, gender, fixLeap, language);
    }
    exports.astrolabeBySolarDate = astrolabeBySolarDate;
    function bySolar(solarDate, timeIndex, gender, fixLeap, language) {
      if (fixLeap === void 0) {
        fixLeap = true;
      }
      language && (0, i18n_1.setLanguage)(language);
      var palaces = [];
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        year: (0, exports.getConfig)().yearDivide
      }).yearly;
      var earthlyBranchOfYear = (0, i18n_1.kot)(yearly[1], "Earthly");
      var heavenlyStemOfYear = (0, i18n_1.kot)(yearly[0], "Heavenly");
      var _a = (0, palace_1.getSoulAndBody)({
        solarDate,
        timeIndex,
        fixLeap
      }), bodyIndex = _a.bodyIndex, soulIndex = _a.soulIndex, heavenlyStemOfSoul = _a.heavenlyStemOfSoul, earthlyBranchOfSoul = _a.earthlyBranchOfSoul;
      var palaceNames = (0, palace_1.getPalaceNames)(soulIndex);
      var majorStars = (0, star_1.getMajorStar)({ solarDate, timeIndex, fixLeap });
      var minorStars = (0, star_1.getMinorStar)(solarDate, timeIndex, fixLeap);
      var adjectiveStars = (0, star_1.getAdjectiveStar)({
        solarDate,
        timeIndex,
        gender,
        fixLeap
      });
      var changsheng12 = (0, star_1.getchangsheng12)({
        solarDate,
        timeIndex,
        gender,
        fixLeap
      });
      var boshi12 = (0, star_1.getBoShi12)(solarDate, gender);
      var _b = (0, star_1.getYearly12)(solarDate), jiangqian12 = _b.jiangqian12, suiqian12 = _b.suiqian12;
      var _c = (0, palace_1.getHoroscope)({ solarDate, timeIndex, gender, fixLeap }), decadals = _c.decadals, ages = _c.ages;
      for (var i = 0; i < 12; i++) {
        var heavenlyStemOfPalace = data_1.HEAVENLY_STEMS[(0, utils_1.fixIndex)(data_1.HEAVENLY_STEMS.indexOf((0, i18n_1.kot)(heavenlyStemOfSoul, "Heavenly")) - soulIndex + i, 10)];
        var earthlyBranchOfPalace = data_1.EARTHLY_BRANCHES[(0, utils_1.fixIndex)(2 + i)];
        palaces.push(new FunctionalPalace_1.default({
          index: i,
          name: palaceNames[i],
          isBodyPalace: bodyIndex === i,
          isOriginalPalace: !["ziEarthly", "chouEarthly"].includes(earthlyBranchOfPalace) && heavenlyStemOfPalace === heavenlyStemOfYear,
          heavenlyStem: (0, i18n_1.t)(heavenlyStemOfPalace),
          earthlyBranch: (0, i18n_1.t)(earthlyBranchOfPalace),
          majorStars: majorStars[i],
          minorStars: minorStars[i],
          adjectiveStars: adjectiveStars[i],
          changsheng12: changsheng12[i],
          boshi12: boshi12[i],
          jiangqian12: jiangqian12[i],
          suiqian12: suiqian12[i],
          decadal: decadals[i],
          ages: ages[i]
        }));
      }
      var earthlyBranchOfSoulPalace = data_1.EARTHLY_BRANCHES[(0, utils_1.fixIndex)(soulIndex + 2)];
      var earthlyBranchOfBodyPalace = (0, i18n_1.t)(data_1.EARTHLY_BRANCHES[(0, utils_1.fixIndex)(bodyIndex + 2)]);
      var chineseDate = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        year: (0, exports.getConfig)().yearDivide
      });
      var lunarDate = (0, lunar_lite_1.solar2lunar)(solarDate);
      var result = new FunctionalAstrolabe_1.default({
        gender: (0, i18n_1.t)((0, i18n_1.kot)(gender)),
        solarDate,
        lunarDate: lunarDate.toString(true),
        chineseDate: (0, utils_1.translateChineseDate)(chineseDate),
        rawDates: { lunarDate, chineseDate },
        time: (0, i18n_1.t)(data_1.CHINESE_TIME[timeIndex]),
        timeRange: data_1.TIME_RANGE[timeIndex],
        sign: (0, exports.getSignBySolarDate)(solarDate, language),
        zodiac: (0, exports.getZodiacBySolarDate)(solarDate, language),
        earthlyBranchOfSoulPalace: (0, i18n_1.t)(earthlyBranchOfSoulPalace),
        earthlyBranchOfBodyPalace,
        soul: (0, i18n_1.t)(data_1.earthlyBranches[earthlyBranchOfSoulPalace].soul),
        body: (0, i18n_1.t)(data_1.earthlyBranches[earthlyBranchOfYear].body),
        fiveElementsClass: (0, palace_1.getFiveElementsClass)(heavenlyStemOfSoul, earthlyBranchOfSoul),
        palaces,
        copyright: "copyright © 2023-".concat((/* @__PURE__ */ new Date()).getFullYear(), " iztro (https://github.com/SylarLong/iztro)")
      });
      _plugins.map(function(plugin) {
        return result.use(plugin);
      });
      return result;
    }
    exports.bySolar = bySolar;
    function astrolabeByLunarDate(lunarDateStr, timeIndex, gender, isLeapMonth, fixLeap, language) {
      if (isLeapMonth === void 0) {
        isLeapMonth = false;
      }
      if (fixLeap === void 0) {
        fixLeap = true;
      }
      return byLunar(lunarDateStr, timeIndex, gender, isLeapMonth, fixLeap, language);
    }
    exports.astrolabeByLunarDate = astrolabeByLunarDate;
    function byLunar(lunarDateStr, timeIndex, gender, isLeapMonth, fixLeap, language) {
      if (isLeapMonth === void 0) {
        isLeapMonth = false;
      }
      if (fixLeap === void 0) {
        fixLeap = true;
      }
      var solarDate = (0, lunar_lite_1.lunar2solar)(lunarDateStr, isLeapMonth);
      return bySolar(solarDate.toString(), timeIndex, gender, fixLeap, language);
    }
    exports.byLunar = byLunar;
    function rearrangeAstrolable(_a) {
      var from = _a.from, astrolable = _a.astrolable, option = _a.option;
      var timeIndex = option.timeIndex, fixLeap = option.fixLeap;
      var _b = (0, palace_1.getSoulAndBody)({
        solarDate: astrolable.solarDate,
        timeIndex,
        fixLeap,
        from
      }), soulIndex = _b.soulIndex, bodyIndex = _b.bodyIndex;
      var fiveElementsClass = (0, palace_1.getFiveElementsClass)(from.heavenlyStem, from.earthlyBranch);
      var palaceNames = (0, palace_1.getPalaceNames)(soulIndex);
      var majorStars = (0, star_1.getMajorStar)({ solarDate: astrolable.solarDate, timeIndex, fixLeap, from });
      var changsheng12 = (0, star_1.getchangsheng12)({ solarDate: astrolable.solarDate, timeIndex, fixLeap, from });
      var _c = (0, palace_1.getHoroscope)({
        solarDate: astrolable.solarDate,
        timeIndex,
        gender: astrolable.gender,
        fixLeap,
        from
      }), decadals = _c.decadals, ages = _c.ages;
      astrolable.fiveElementsClass = fiveElementsClass;
      astrolable.palaces.forEach(function(palace, i) {
        palace.name = palaceNames[i];
        palace.majorStars = majorStars[i];
        palace.changsheng12 = changsheng12[i];
        palace.decadal = decadals[i];
        palace.ages = ages[i];
        palace.isBodyPalace = bodyIndex === i;
      });
      return astrolable;
    }
    exports.rearrangeAstrolable = rearrangeAstrolable;
    function withOptions(option) {
      var _a = option.type, type = _a === void 0 ? "solar" : _a, dateStr = option.dateStr, timeIndex = option.timeIndex, gender = option.gender, isLeapMonth = option.isLeapMonth, fixLeap = option.fixLeap, language = option.language, astroType = option.astroType, cfg = option.config;
      if (cfg) {
        (0, exports.config)(cfg);
      }
      var result;
      if (type === "solar") {
        result = bySolar(dateStr, timeIndex, gender, fixLeap, language);
      } else {
        result = byLunar(dateStr, timeIndex, gender, isLeapMonth, fixLeap, language);
      }
      switch (astroType) {
        case "earth": {
          var bodyPalace = result.palace("身宫");
          var _b = bodyPalace, heavenlyStem = _b.heavenlyStem, earthlyBranch = _b.earthlyBranch;
          return rearrangeAstrolable({ from: { heavenlyStem, earthlyBranch }, astrolable: result, option });
        }
        case "human": {
          var bodyPalace = result.palace("福德");
          var _c = bodyPalace, heavenlyStem = _c.heavenlyStem, earthlyBranch = _c.earthlyBranch;
          return rearrangeAstrolable({ from: { heavenlyStem, earthlyBranch }, astrolable: result, option });
        }
        default: {
          return result;
        }
      }
    }
    exports.withOptions = withOptions;
    var getZodiacBySolarDate = function(solarDateStr, language) {
      language && (0, i18n_1.setLanguage)(language);
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDateStr, 0, {
        year: (0, exports.getConfig)().yearDivide
      }).yearly;
      return (0, i18n_1.t)((0, i18n_1.kot)((0, lunar_lite_1.getZodiac)(yearly[1])));
    };
    exports.getZodiacBySolarDate = getZodiacBySolarDate;
    var getSignBySolarDate = function(solarDateStr, language) {
      language && (0, i18n_1.setLanguage)(language);
      return (0, i18n_1.t)((0, i18n_1.kot)((0, lunar_lite_1.getSign)(solarDateStr)));
    };
    exports.getSignBySolarDate = getSignBySolarDate;
    var getSignByLunarDate = function(lunarDateStr, isLeapMonth, language) {
      language && (0, i18n_1.setLanguage)(language);
      var solarDate = (0, lunar_lite_1.lunar2solar)(lunarDateStr, isLeapMonth);
      return (0, exports.getSignBySolarDate)(solarDate.toString(), language);
    };
    exports.getSignByLunarDate = getSignByLunarDate;
    var getMajorStarBySolarDate = function(solarDateStr, timeIndex, fixLeap, language) {
      if (fixLeap === void 0) {
        fixLeap = true;
      }
      language && (0, i18n_1.setLanguage)(language);
      var bodyIndex = (0, palace_1.getSoulAndBody)({ solarDate: solarDateStr, timeIndex, fixLeap }).bodyIndex;
      var majorStars = (0, star_1.getMajorStar)({ solarDate: solarDateStr, timeIndex, fixLeap });
      var stars = majorStars[bodyIndex].filter(function(star) {
        return star.type === "major";
      });
      if (stars.length) {
        return stars.map(function(star) {
          return (0, i18n_1.t)(star.name);
        }).join(",");
      }
      return majorStars[(0, utils_1.fixIndex)(bodyIndex + 6)].filter(function(star) {
        return star.type === "major";
      }).map(function(star) {
        return (0, i18n_1.t)(star.name);
      }).join(",");
    };
    exports.getMajorStarBySolarDate = getMajorStarBySolarDate;
    var getMajorStarByLunarDate = function(lunarDateStr, timeIndex, isLeapMonth, fixLeap, language) {
      if (isLeapMonth === void 0) {
        isLeapMonth = false;
      }
      if (fixLeap === void 0) {
        fixLeap = true;
      }
      var solarDate = (0, lunar_lite_1.lunar2solar)(lunarDateStr, isLeapMonth);
      return (0, exports.getMajorStarBySolarDate)(solarDate.toString(), timeIndex, fixLeap, language);
    };
    exports.getMajorStarByLunarDate = getMajorStarByLunarDate;
  }
});

// node_modules/iztro/lib/astro/palace.js
var require_palace7 = __commonJS({
  "node_modules/iztro/lib/astro/palace.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHoroscope = exports.getPalaceNames = exports.getFiveElementsClass = exports.getSoulAndBody = void 0;
    var lunar_lite_1 = require_lib();
    var data_1 = require_data();
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var astro_1 = require_astro();
    var getSoulAndBody = function(param) {
      var solarDate = param.solarDate, timeIndex = param.timeIndex, fixLeap = param.fixLeap, from = param.from;
      var _a = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        year: (0, astro_1.getConfig)().yearDivide
      }), yearly = _a.yearly, hourly = _a.hourly;
      var earthlyBranchOfTime = (0, i18n_1.kot)(hourly[1], "Earthly");
      var heavenlyStemOfYear = (0, i18n_1.kot)(yearly[0], "Heavenly");
      var firstIndex = data_1.EARTHLY_BRANCHES.indexOf("yinEarthly");
      var monthIndex = (0, utils_1.fixLunarMonthIndex)(solarDate, timeIndex, fixLeap);
      var soulIndex = (0, utils_1.fixIndex)(monthIndex - data_1.EARTHLY_BRANCHES.indexOf(earthlyBranchOfTime));
      var bodyIndex = (0, utils_1.fixIndex)(monthIndex + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranchOfTime));
      if ((from === null || from === void 0 ? void 0 : from.heavenlyStem) && (from === null || from === void 0 ? void 0 : from.earthlyBranch)) {
        soulIndex = (0, utils_1.fixEarthlyBranchIndex)(from.earthlyBranch);
        var bodyOffset = [0, 2, 4, 6, 8, 10, 0, 2, 4, 6, 8, 10, 0];
        bodyIndex = (0, utils_1.fixIndex)(bodyOffset[timeIndex] + soulIndex);
      }
      var startHevenlyStem = data_1.TIGER_RULE[heavenlyStemOfYear];
      var heavenlyStemOfSoulIndex = (0, utils_1.fixIndex)(data_1.HEAVENLY_STEMS.indexOf(startHevenlyStem) + soulIndex, 10);
      var heavenlyStemOfSoul = (0, i18n_1.t)(data_1.HEAVENLY_STEMS[heavenlyStemOfSoulIndex]);
      var earthlyBranchOfSoul = (0, i18n_1.t)(data_1.EARTHLY_BRANCHES[(0, utils_1.fixIndex)(soulIndex + firstIndex)]);
      return {
        soulIndex,
        bodyIndex,
        heavenlyStemOfSoul,
        earthlyBranchOfSoul
      };
    };
    exports.getSoulAndBody = getSoulAndBody;
    var getFiveElementsClass = function(heavenlyStemName, earthlyBranchName) {
      var fiveElementsTable = ["wood3rd", "metal4th", "water2nd", "fire6th", "earth5th"];
      var heavenlyStem = (0, i18n_1.kot)(heavenlyStemName, "Heavenly");
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      var heavenlyStemNumber = Math.floor(data_1.HEAVENLY_STEMS.indexOf(heavenlyStem) / 2) + 1;
      var earthlyBranchNumber = Math.floor((0, utils_1.fixIndex)(data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch), 6) / 2) + 1;
      var index = heavenlyStemNumber + earthlyBranchNumber;
      while (index > 5) {
        index -= 5;
      }
      return (0, i18n_1.t)(fiveElementsTable[index - 1]);
    };
    exports.getFiveElementsClass = getFiveElementsClass;
    var getPalaceNames = function(fromIndex) {
      var names = [];
      for (var i = 0; i < data_1.PALACES.length; i++) {
        var idx = (0, utils_1.fixIndex)(i - fromIndex);
        names[i] = (0, i18n_1.t)(data_1.PALACES[idx]);
      }
      return names;
    };
    exports.getPalaceNames = getPalaceNames;
    var getHoroscope = function(param) {
      var _a, _b;
      var solarDate = param.solarDate, timeIndex = param.timeIndex, gender = param.gender, from = param.from;
      var decadals = [];
      var genderKey = (0, i18n_1.kot)(gender);
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        // 起大限应该与配置同步
        year: (0, astro_1.getConfig)().yearDivide
      }).yearly;
      var heavenlyStem = (0, i18n_1.kot)(yearly[0], "Heavenly");
      var earthlyBranch = (0, i18n_1.kot)(yearly[1], "Earthly");
      var _c = (0, exports.getSoulAndBody)(param), soulIndex = _c.soulIndex, heavenlyStemOfSoul = _c.heavenlyStemOfSoul, earthlyBranchOfSoul = _c.earthlyBranchOfSoul;
      var fiveElementsClass = (0, i18n_1.kot)((0, exports.getFiveElementsClass)((_a = from === null || from === void 0 ? void 0 : from.heavenlyStem) !== null && _a !== void 0 ? _a : heavenlyStemOfSoul, (_b = from === null || from === void 0 ? void 0 : from.earthlyBranch) !== null && _b !== void 0 ? _b : earthlyBranchOfSoul));
      var startHeavenlyStem = data_1.TIGER_RULE[heavenlyStem];
      for (var i = 0; i < 12; i++) {
        var idx = data_1.GENDER[genderKey] === data_1.earthlyBranches[earthlyBranch].yinYang ? (0, utils_1.fixIndex)(soulIndex + i) : (0, utils_1.fixIndex)(soulIndex - i);
        var start = data_1.FiveElementsClass[fiveElementsClass] + 10 * i;
        var heavenlyStemIndex = (0, utils_1.fixIndex)(data_1.HEAVENLY_STEMS.indexOf(startHeavenlyStem) + idx, 10);
        var earthlyBranchIndex = (0, utils_1.fixIndex)(data_1.EARTHLY_BRANCHES.indexOf("yinEarthly") + idx);
        decadals[idx] = {
          range: [start, start + 9],
          heavenlyStem: (0, i18n_1.t)(data_1.HEAVENLY_STEMS[heavenlyStemIndex]),
          earthlyBranch: (0, i18n_1.t)(data_1.EARTHLY_BRANCHES[earthlyBranchIndex])
        };
      }
      var ageIdx = (0, utils_1.getAgeIndex)(yearly[1]);
      var ages = [];
      for (var i = 0; i < 12; i++) {
        var age = [];
        for (var j = 0; j < 10; j++) {
          age.push(12 * j + i + 1);
        }
        var idx = (0, i18n_1.kot)(gender) === "male" ? (0, utils_1.fixIndex)(ageIdx + i) : (0, utils_1.fixIndex)(ageIdx - i);
        ages[idx] = age;
      }
      return { decadals, ages };
    };
    exports.getHoroscope = getHoroscope;
  }
});

// node_modules/iztro/lib/astro/index.js
var require_astro2 = __commonJS({
  "node_modules/iztro/lib/astro/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_palace7(), exports);
    __exportStar(require_astro(), exports);
  }
});

// node_modules/iztro/lib/star/location.js
var require_location = __commonJS({
  "node_modules/iztro/lib/star/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getChangQuIndexByHeavenlyStem = exports.getMonthlyStarIndex = exports.getNianjieIndex = exports.getYearlyStarIndex = exports.getDahaoIndex = exports.getJieshaAdjIndex = exports.getGuGuaIndex = exports.getHuagaiXianchiIndex = exports.getLuanXiIndex = exports.getHuoLingIndex = exports.getKongJieIndex = exports.getTimelyStarIndex = exports.getDailyStarIndex = exports.getChangQuIndex = exports.getZuoYouIndex = exports.getKuiYueIndex = exports.getLuYangTuoMaIndex = exports.getStartIndex = void 0;
    var lunar_lite_1 = require_lib();
    var astro_1 = require_astro2();
    var data_1 = require_data();
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var getStartIndex = function(param) {
      var _a, _b;
      var solarDate = param.solarDate, timeIndex = param.timeIndex, fixLeap = param.fixLeap, from = param.from;
      var _c = (0, astro_1.getSoulAndBody)({ solarDate, timeIndex, fixLeap }), heavenlyStemOfSoul = _c.heavenlyStemOfSoul, earthlyBranchOfSoul = _c.earthlyBranchOfSoul;
      var lunarDay = (0, lunar_lite_1.solar2lunar)(solarDate).lunarDay;
      var baseHeavenlyStem = (_a = from === null || from === void 0 ? void 0 : from.heavenlyStem) !== null && _a !== void 0 ? _a : heavenlyStemOfSoul;
      var baseEarthlyBranch = (_b = from === null || from === void 0 ? void 0 : from.earthlyBranch) !== null && _b !== void 0 ? _b : earthlyBranchOfSoul;
      var fiveElements = (0, i18n_1.kot)((0, astro_1.getFiveElementsClass)(baseHeavenlyStem, baseEarthlyBranch));
      var fiveElementsValue = data_1.FiveElementsClass[fiveElements];
      var remainder = -1;
      var quotient;
      var offset = -1;
      var maxDays = (0, lunar_lite_1.getTotalDaysOfLunarMonth)(solarDate);
      var _day = timeIndex === 12 ? lunarDay + 1 : lunarDay;
      if (_day > maxDays) {
        _day -= maxDays;
      }
      do {
        offset++;
        var divisor = _day + offset;
        quotient = Math.floor(divisor / fiveElementsValue);
        remainder = divisor % fiveElementsValue;
      } while (remainder !== 0);
      quotient %= 12;
      var ziweiIndex = quotient - 1;
      if (offset % 2 === 0) {
        ziweiIndex += offset;
      } else {
        ziweiIndex -= offset;
      }
      ziweiIndex = (0, utils_1.fixIndex)(ziweiIndex);
      var tianfuIndex = (0, utils_1.fixIndex)(12 - ziweiIndex);
      return { ziweiIndex, tianfuIndex };
    };
    exports.getStartIndex = getStartIndex;
    var getLuYangTuoMaIndex = function(heavenlyStemName, earthlyBranchName) {
      var luIndex = -1;
      var maIndex = 0;
      var heavenlyStem = (0, i18n_1.kot)(heavenlyStemName, "Heavenly");
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      switch (earthlyBranch) {
        case "yinEarthly":
        case "wuEarthly":
        case "xuEarthly":
          maIndex = (0, utils_1.fixEarthlyBranchIndex)("shen");
          break;
        case "shenEarthly":
        case "ziEarthly":
        case "chenEarthly":
          maIndex = (0, utils_1.fixEarthlyBranchIndex)("yin");
          break;
        case "siEarthly":
        case "youEarthly":
        case "chouEarthly":
          maIndex = (0, utils_1.fixEarthlyBranchIndex)("hai");
          break;
        case "haiEarthly":
        case "maoEarthly":
        case "weiEarthly":
          maIndex = (0, utils_1.fixEarthlyBranchIndex)("si");
          break;
      }
      switch (heavenlyStem) {
        case "jiaHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("yin");
          break;
        }
        case "yiHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("mao");
          break;
        }
        case "bingHeavenly":
        case "wuHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("si");
          break;
        }
        case "dingHeavenly":
        case "jiHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("woo");
          break;
        }
        case "gengHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("shen");
          break;
        }
        case "xinHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("you");
          break;
        }
        case "renHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("hai");
          break;
        }
        case "guiHeavenly": {
          luIndex = (0, utils_1.fixEarthlyBranchIndex)("zi");
          break;
        }
      }
      return {
        luIndex,
        maIndex,
        yangIndex: (0, utils_1.fixIndex)(luIndex + 1),
        tuoIndex: (0, utils_1.fixIndex)(luIndex - 1)
      };
    };
    exports.getLuYangTuoMaIndex = getLuYangTuoMaIndex;
    var getKuiYueIndex = function(heavenlyStemName) {
      var kuiIndex = -1;
      var yueIndex = -1;
      var heavenlyStem = (0, i18n_1.kot)(heavenlyStemName, "Heavenly");
      switch (heavenlyStem) {
        case "jiaHeavenly":
        case "wuHeavenly":
        case "gengHeavenly":
          kuiIndex = (0, utils_1.fixEarthlyBranchIndex)("chou");
          yueIndex = (0, utils_1.fixEarthlyBranchIndex)("wei");
          break;
        case "yiHeavenly":
        case "jiHeavenly":
          kuiIndex = (0, utils_1.fixEarthlyBranchIndex)("zi");
          yueIndex = (0, utils_1.fixEarthlyBranchIndex)("shen");
          break;
        case "xinHeavenly":
          kuiIndex = (0, utils_1.fixEarthlyBranchIndex)("woo");
          yueIndex = (0, utils_1.fixEarthlyBranchIndex)("yin");
          break;
        case "bingHeavenly":
        case "dingHeavenly":
          kuiIndex = (0, utils_1.fixEarthlyBranchIndex)("hai");
          yueIndex = (0, utils_1.fixEarthlyBranchIndex)("you");
          break;
        case "renHeavenly":
        case "guiHeavenly":
          kuiIndex = (0, utils_1.fixEarthlyBranchIndex)("mao");
          yueIndex = (0, utils_1.fixEarthlyBranchIndex)("si");
          break;
      }
      return { kuiIndex, yueIndex };
    };
    exports.getKuiYueIndex = getKuiYueIndex;
    var getZuoYouIndex = function(lunarMonth) {
      var zuoIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("chen") + (lunarMonth - 1));
      var youIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("xu") - (lunarMonth - 1));
      return { zuoIndex, youIndex };
    };
    exports.getZuoYouIndex = getZuoYouIndex;
    var getChangQuIndex = function(timeIndex) {
      var changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("xu") - (0, utils_1.fixIndex)(timeIndex));
      var quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("chen") + (0, utils_1.fixIndex)(timeIndex));
      return { changIndex, quIndex };
    };
    exports.getChangQuIndex = getChangQuIndex;
    var getDailyStarIndex = function(solarDateStr, timeIndex, fixLeap) {
      var lunarDay = (0, lunar_lite_1.solar2lunar)(solarDateStr).lunarDay;
      var monthIndex = (0, utils_1.fixLunarMonthIndex)(solarDateStr, timeIndex, fixLeap);
      var _a = (0, exports.getZuoYouIndex)(monthIndex + 1), zuoIndex = _a.zuoIndex, youIndex = _a.youIndex;
      var _b = (0, exports.getChangQuIndex)(timeIndex), changIndex = _b.changIndex, quIndex = _b.quIndex;
      var dayIndex = (0, utils_1.fixLunarDayIndex)(lunarDay, timeIndex);
      var santaiIndex = (0, utils_1.fixIndex)((zuoIndex + dayIndex) % 12);
      var bazuoIndex = (0, utils_1.fixIndex)((youIndex - dayIndex) % 12);
      var enguangIndex = (0, utils_1.fixIndex)((changIndex + dayIndex) % 12 - 1);
      var tianguiIndex = (0, utils_1.fixIndex)((quIndex + dayIndex) % 12 - 1);
      return { santaiIndex, bazuoIndex, enguangIndex, tianguiIndex };
    };
    exports.getDailyStarIndex = getDailyStarIndex;
    var getTimelyStarIndex = function(timeIndex) {
      var taifuIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("woo") + (0, utils_1.fixIndex)(timeIndex));
      var fenggaoIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("yin") + (0, utils_1.fixIndex)(timeIndex));
      return { taifuIndex, fenggaoIndex };
    };
    exports.getTimelyStarIndex = getTimelyStarIndex;
    var getKongJieIndex = function(timeIndex) {
      var fixedTimeIndex = (0, utils_1.fixIndex)(timeIndex);
      var haiIndex = (0, utils_1.fixEarthlyBranchIndex)("hai");
      var kongIndex = (0, utils_1.fixIndex)(haiIndex - fixedTimeIndex);
      var jieIndex = (0, utils_1.fixIndex)(haiIndex + fixedTimeIndex);
      return { kongIndex, jieIndex };
    };
    exports.getKongJieIndex = getKongJieIndex;
    var getHuoLingIndex = function(earthlyBranchName, timeIndex) {
      var huoIndex = -1;
      var lingIndex = -1;
      var fixedTimeIndex = (0, utils_1.fixIndex)(timeIndex);
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      switch (earthlyBranch) {
        case "yinEarthly":
        case "wuEarthly":
        case "xuEarthly": {
          huoIndex = (0, utils_1.fixEarthlyBranchIndex)("chou") + fixedTimeIndex;
          lingIndex = (0, utils_1.fixEarthlyBranchIndex)("mao") + fixedTimeIndex;
          break;
        }
        case "shenEarthly":
        case "ziEarthly":
        case "chenEarthly": {
          huoIndex = (0, utils_1.fixEarthlyBranchIndex)("yin") + fixedTimeIndex;
          lingIndex = (0, utils_1.fixEarthlyBranchIndex)("xu") + fixedTimeIndex;
          break;
        }
        case "siEarthly":
        case "youEarthly":
        case "chouEarthly": {
          huoIndex = (0, utils_1.fixEarthlyBranchIndex)("mao") + fixedTimeIndex;
          lingIndex = (0, utils_1.fixEarthlyBranchIndex)("xu") + fixedTimeIndex;
          break;
        }
        case "haiEarthly":
        case "weiEarthly":
        case "maoEarthly": {
          huoIndex = (0, utils_1.fixEarthlyBranchIndex)("you") + fixedTimeIndex;
          lingIndex = (0, utils_1.fixEarthlyBranchIndex)("xu") + fixedTimeIndex;
          break;
        }
      }
      return {
        huoIndex: (0, utils_1.fixIndex)(huoIndex),
        lingIndex: (0, utils_1.fixIndex)(lingIndex)
      };
    };
    exports.getHuoLingIndex = getHuoLingIndex;
    var getLuanXiIndex = function(earthlyBranchName) {
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      var hongluanIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("mao") - data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tianxiIndex = (0, utils_1.fixIndex)(hongluanIndex + 6);
      return { hongluanIndex, tianxiIndex };
    };
    exports.getLuanXiIndex = getLuanXiIndex;
    var getHuagaiXianchiIndex = function(earthlyBranchName) {
      var hgIdx = -1;
      var xcIdx = -1;
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      switch (earthlyBranch) {
        case "yinEarthly":
        case "wuEarthly":
        case "xuEarthly": {
          hgIdx = (0, utils_1.fixEarthlyBranchIndex)("xu");
          xcIdx = (0, utils_1.fixEarthlyBranchIndex)("mao");
          break;
        }
        case "shenEarthly":
        case "ziEarthly":
        case "chenEarthly": {
          hgIdx = (0, utils_1.fixEarthlyBranchIndex)("chen");
          xcIdx = (0, utils_1.fixEarthlyBranchIndex)("you");
          break;
        }
        case "siEarthly":
        case "youEarthly":
        case "chouEarthly": {
          hgIdx = (0, utils_1.fixEarthlyBranchIndex)("chou");
          xcIdx = (0, utils_1.fixEarthlyBranchIndex)("woo");
          break;
        }
        case "haiEarthly":
        case "weiEarthly":
        case "maoEarthly": {
          hgIdx = (0, utils_1.fixEarthlyBranchIndex)("wei");
          xcIdx = (0, utils_1.fixEarthlyBranchIndex)("zi");
          break;
        }
      }
      return {
        huagaiIndex: (0, utils_1.fixIndex)(hgIdx),
        xianchiIndex: (0, utils_1.fixIndex)(xcIdx)
      };
    };
    exports.getHuagaiXianchiIndex = getHuagaiXianchiIndex;
    var getGuGuaIndex = function(earthlyBranchName) {
      var guIdx = -1;
      var guaIdx = -1;
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      switch (earthlyBranch) {
        case "yinEarthly":
        case "maoEarthly":
        case "chenEarthly": {
          guIdx = (0, utils_1.fixEarthlyBranchIndex)("si");
          guaIdx = (0, utils_1.fixEarthlyBranchIndex)("chou");
          break;
        }
        case "siEarthly":
        case "wuEarthly":
        case "weiEarthly": {
          guIdx = (0, utils_1.fixEarthlyBranchIndex)("shen");
          guaIdx = (0, utils_1.fixEarthlyBranchIndex)("chen");
          break;
        }
        case "shenEarthly":
        case "youEarthly":
        case "xuEarthly": {
          guIdx = (0, utils_1.fixEarthlyBranchIndex)("hai");
          guaIdx = (0, utils_1.fixEarthlyBranchIndex)("wei");
          break;
        }
        case "haiEarthly":
        case "ziEarthly":
        case "chouEarthly": {
          guIdx = (0, utils_1.fixEarthlyBranchIndex)("yin");
          guaIdx = (0, utils_1.fixEarthlyBranchIndex)("xu");
          break;
        }
      }
      return {
        guchenIndex: (0, utils_1.fixIndex)(guIdx),
        guasuIndex: (0, utils_1.fixIndex)(guaIdx)
      };
    };
    exports.getGuGuaIndex = getGuGuaIndex;
    var getJieshaAdjIndex = function(earthlyBranchKey) {
      switch (earthlyBranchKey) {
        case "shenEarthly":
        case "ziEarthly":
        case "chenEarthly":
          return 3;
        case "haiEarthly":
        case "maoEarthly":
        case "weiEarthly":
          return 6;
        case "yinEarthly":
        case "wuEarthly":
        case "xuEarthly":
          return 9;
        case "siEarthly":
        case "youEarthly":
        case "chouEarthly":
          return 0;
      }
    };
    exports.getJieshaAdjIndex = getJieshaAdjIndex;
    var getDahaoIndex = function(earthlyBranchKey) {
      var matched = [
        "weiEarthly",
        "wuEarthly",
        "youEarthly",
        "shenEarthly",
        "haiEarthly",
        "xuEarthly",
        "chouEarthly",
        "ziEarthly",
        "maoEarthly",
        "yinEarthly",
        "siEarthly",
        "chenEarthly"
      ][data_1.EARTHLY_BRANCHES.indexOf(earthlyBranchKey)];
      return (0, utils_1.fixIndex)(data_1.EARTHLY_BRANCHES.indexOf(matched) - 2);
    };
    exports.getDahaoIndex = getDahaoIndex;
    var getYearlyStarIndex = function(param) {
      var _a;
      var solarDate = param.solarDate, timeIndex = param.timeIndex, gender = param.gender, fixLeap = param.fixLeap;
      var _b = (0, astro_1.getConfig)(), horoscopeDivide = _b.horoscopeDivide, algorithm = _b.algorithm;
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        // 流耀应该用立春为界，但为了满足不同流派的需求允许配置
        year: horoscopeDivide
      }).yearly;
      var _c = (0, astro_1.getSoulAndBody)({ solarDate, timeIndex, fixLeap }), soulIndex = _c.soulIndex, bodyIndex = _c.bodyIndex;
      var heavenlyStem = (0, i18n_1.kot)(yearly[0], "Heavenly");
      var earthlyBranch = (0, i18n_1.kot)(yearly[1], "Earthly");
      var _d = (0, exports.getHuagaiXianchiIndex)(yearly[1]), huagaiIndex = _d.huagaiIndex, xianchiIndex = _d.xianchiIndex;
      var _e = (0, exports.getGuGuaIndex)(yearly[1]), guchenIndex = _e.guchenIndex, guasuIndex = _e.guasuIndex;
      var tiancaiIndex = (0, utils_1.fixIndex)(soulIndex + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tianshouIndex = (0, utils_1.fixIndex)(bodyIndex + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tianchuIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["si", "woo", "zi", "si", "woo", "shen", "yin", "woo", "you", "hai"][data_1.HEAVENLY_STEMS.indexOf(heavenlyStem)]));
      var posuiIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["si", "chou", "you"][data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch) % 3]));
      var feilianIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["shen", "you", "xu", "si", "woo", "wei", "yin", "mao", "chen", "hai", "zi", "chou"][data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch)]));
      var longchiIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("chen") + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var fenggeIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("xu") - data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tiankuIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("woo") - data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tianxuIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("woo") + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tianguanIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["wei", "chen", "si", "yin", "mao", "you", "hai", "you", "xu", "woo"][data_1.HEAVENLY_STEMS.indexOf(heavenlyStem)]));
      var tianfuIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["you", "shen", "zi", "hai", "mao", "yin", "woo", "si", "woo", "si"][data_1.HEAVENLY_STEMS.indexOf(heavenlyStem)]));
      var tiandeIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("you") + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var yuedeIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("si") + data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch));
      var tiankongIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(yearly[1]) + 1);
      var jieluIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["shen", "woo", "chen", "yin", "zi"][data_1.HEAVENLY_STEMS.indexOf(heavenlyStem) % 5]));
      var kongwangIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["you", "wei", "si", "mao", "chou"][data_1.HEAVENLY_STEMS.indexOf(heavenlyStem) % 5]));
      var xunkongIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(yearly[1]) + data_1.HEAVENLY_STEMS.indexOf("guiHeavenly") - data_1.HEAVENLY_STEMS.indexOf(heavenlyStem) + 1);
      var yinyang = data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch) % 2;
      if (yinyang !== xunkongIndex % 2) {
        xunkongIndex = (0, utils_1.fixIndex)(xunkongIndex + 1);
      }
      var jiekongIndex = yinyang === 0 ? jieluIndex : kongwangIndex;
      var jieshaAdjIndex = (0, exports.getJieshaAdjIndex)(earthlyBranch);
      var nianjieIndex = (0, exports.getNianjieIndex)(yearly[1]);
      var dahaoAdjIndex = (0, exports.getDahaoIndex)(earthlyBranch);
      var genderYinyang = ["male", "female"];
      var sameYinyang = yinyang === genderYinyang.indexOf((0, i18n_1.kot)(gender));
      var tianshangIndex = (0, utils_1.fixIndex)(data_1.PALACES.indexOf("friendsPalace") + soulIndex);
      var tianshiIndex = (0, utils_1.fixIndex)(data_1.PALACES.indexOf("healthPalace") + soulIndex);
      if (algorithm === "zhongzhou" && !sameYinyang) {
        _a = [tianshangIndex, tianshiIndex], tianshiIndex = _a[0], tianshangIndex = _a[1];
      }
      return {
        xianchiIndex,
        huagaiIndex,
        guchenIndex,
        guasuIndex,
        tiancaiIndex,
        tianshouIndex,
        tianchuIndex,
        posuiIndex,
        feilianIndex,
        longchiIndex,
        fenggeIndex,
        tiankuIndex,
        tianxuIndex,
        tianguanIndex,
        tianfuIndex,
        tiandeIndex,
        yuedeIndex,
        tiankongIndex,
        jieluIndex,
        kongwangIndex,
        xunkongIndex,
        tianshangIndex,
        tianshiIndex,
        jiekongIndex,
        jieshaAdjIndex,
        nianjieIndex,
        dahaoAdjIndex
      };
    };
    exports.getYearlyStarIndex = getYearlyStarIndex;
    var getNianjieIndex = function(earthlyBranchName) {
      var earthlyBranch = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      return (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["xu", "you", "shen", "wei", "woo", "si", "chen", "mao", "yin", "chou", "zi", "hai"][data_1.EARTHLY_BRANCHES.indexOf(earthlyBranch)]));
    };
    exports.getNianjieIndex = getNianjieIndex;
    var getMonthlyStarIndex = function(solarDate, timeIndex, fixLeap) {
      var monthIndex = (0, utils_1.fixLunarMonthIndex)(solarDate, timeIndex, fixLeap);
      var jieshenIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["shen", "xu", "zi", "yin", "chen", "woo"][Math.floor(monthIndex / 2)]));
      var tianyaoIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("chou") + monthIndex);
      var tianxingIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("you") + monthIndex);
      var yinshaIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["yin", "zi", "xu", "shen", "woo", "chen"][monthIndex % 6]));
      var tianyueIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["xu", "si", "chen", "yin", "wei", "mao", "hai", "wei", "yin", "woo", "xu", "yin"][monthIndex]));
      var tianwuIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(["si", "shen", "yin", "hai"][monthIndex % 4]));
      return {
        yuejieIndex: jieshenIndex,
        tianyaoIndex,
        tianxingIndex,
        yinshaIndex,
        tianyueIndex,
        tianwuIndex
      };
    };
    exports.getMonthlyStarIndex = getMonthlyStarIndex;
    var getChangQuIndexByHeavenlyStem = function(heavenlyStemName) {
      var changIndex = -1;
      var quIndex = -1;
      var heavenlyStem = (0, i18n_1.kot)(heavenlyStemName, "Heavenly");
      switch (heavenlyStem) {
        case "jiaHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("si"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("you"));
          break;
        case "yiHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("woo"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("shen"));
          break;
        case "bingHeavenly":
        case "wuHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("shen"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("woo"));
          break;
        case "dingHeavenly":
        case "jiHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("you"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("si"));
          break;
        case "gengHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("hai"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("mao"));
          break;
        case "xinHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("zi"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("yin"));
          break;
        case "renHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("yin"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("zi"));
          break;
        case "guiHeavenly":
          changIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("mao"));
          quIndex = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)("hai"));
          break;
      }
      return { changIndex, quIndex };
    };
    exports.getChangQuIndexByHeavenlyStem = getChangQuIndexByHeavenlyStem;
  }
});

// node_modules/iztro/lib/star/FunctionalStar.js
var require_FunctionalStar = __commonJS({
  "node_modules/iztro/lib/star/FunctionalStar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var i18n_1 = require_i18n();
    var FunctionalStar = (
      /** @class */
      /* @__PURE__ */ function() {
        function FunctionalStar2(data) {
          var _this = this;
          this.oppositePalace = function() {
            if (!_this._palace || !_this._astrolabe) {
              return void 0;
            }
            return _this._astrolabe.surroundedPalaces(_this._palace.name).opposite;
          };
          this.setPalace = function(p) {
            _this._palace = p;
          };
          this.setAstrolabe = function(a) {
            _this._astrolabe = a;
          };
          this.palace = function() {
            return _this._palace;
          };
          this.surroundedPalaces = function() {
            var _a;
            if (!_this._palace) {
              return void 0;
            }
            return (_a = _this._astrolabe) === null || _a === void 0 ? void 0 : _a.surroundedPalaces(_this._palace.name);
          };
          this.withMutagen = function(mutagen) {
            if (Array.isArray(mutagen)) {
              return mutagen.some(function(mtg) {
                return _this.mutagen && (0, i18n_1.kot)(mtg) === (0, i18n_1.kot)(_this.mutagen);
              });
            }
            return !!_this.mutagen && (0, i18n_1.kot)(mutagen) === (0, i18n_1.kot)(_this.mutagen);
          };
          this.withBrightness = function(brightness) {
            if (Array.isArray(brightness)) {
              return brightness.some(function(brit) {
                return _this.brightness != void 0 && (0, i18n_1.kot)(brit) === (0, i18n_1.kot)(_this.brightness);
              });
            }
            return !!_this.brightness && (0, i18n_1.kot)(brightness) === (0, i18n_1.kot)(_this.brightness);
          };
          this.name = data.name;
          this.type = data.type;
          this.scope = data.scope;
          this.brightness = data.brightness;
          this.mutagen = data.mutagen;
          return this;
        }
        return FunctionalStar2;
      }()
    );
    exports.default = FunctionalStar;
  }
});

// node_modules/iztro/lib/star/majorStar.js
var require_majorStar = __commonJS({
  "node_modules/iztro/lib/star/majorStar.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMajorStar = void 0;
    var lunar_lite_1 = require_lib();
    var _1 = require_star7();
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var FunctionalStar_1 = __importDefault(require_FunctionalStar());
    var location_1 = require_location();
    var astro_1 = require_astro2();
    var getMajorStar = function(param) {
      var solarDate = param.solarDate, timeIndex = param.timeIndex;
      var _a = (0, location_1.getStartIndex)(param), ziweiIndex = _a.ziweiIndex, tianfuIndex = _a.tianfuIndex;
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        year: (0, astro_1.getConfig)().yearDivide
      }).yearly;
      var stars = (0, _1.initStars)();
      var ziweiGroup = [
        "ziweiMaj",
        "tianjiMaj",
        "",
        "taiyangMaj",
        "wuquMaj",
        "tiantongMaj",
        "",
        "",
        "lianzhenMaj"
      ];
      var tianfuGroup = [
        "tianfuMaj",
        "taiyinMaj",
        "tanlangMaj",
        "jumenMaj",
        "tianxiangMaj",
        "tianliangMaj",
        "qishaMaj",
        "",
        "",
        "",
        "pojunMaj"
      ];
      ziweiGroup.forEach(function(s, i) {
        if (s !== "") {
          stars[(0, utils_1.fixIndex)(ziweiIndex - i)].push(new FunctionalStar_1.default({
            name: (0, i18n_1.t)(s),
            type: "major",
            scope: "origin",
            brightness: (0, utils_1.getBrightness)((0, i18n_1.t)(s), (0, utils_1.fixIndex)(ziweiIndex - i)),
            mutagen: (0, utils_1.getMutagen)((0, i18n_1.t)(s), yearly[0])
          }));
        }
      });
      tianfuGroup.forEach(function(s, i) {
        if (s !== "") {
          stars[(0, utils_1.fixIndex)(tianfuIndex + i)].push(new FunctionalStar_1.default({
            name: (0, i18n_1.t)(s),
            type: "major",
            scope: "origin",
            brightness: (0, utils_1.getBrightness)((0, i18n_1.t)(s), (0, utils_1.fixIndex)(tianfuIndex + i)),
            mutagen: (0, utils_1.getMutagen)((0, i18n_1.t)(s), yearly[0])
          }));
        }
      });
      return stars;
    };
    exports.getMajorStar = getMajorStar;
  }
});

// node_modules/iztro/lib/star/minorStar.js
var require_minorStar = __commonJS({
  "node_modules/iztro/lib/star/minorStar.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getMinorStar = void 0;
    var lunar_lite_1 = require_lib();
    var _1 = require_star7();
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var FunctionalStar_1 = __importDefault(require_FunctionalStar());
    var location_1 = require_location();
    var astro_1 = require_astro2();
    var getMinorStar = function(solarDateStr, timeIndex, fixLeap) {
      var stars = (0, _1.initStars)();
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDateStr, timeIndex, {
        year: (0, astro_1.getConfig)().yearDivide
      }).yearly;
      var monthIndex = (0, utils_1.fixLunarMonthIndex)(solarDateStr, timeIndex, fixLeap);
      var _a = (0, location_1.getZuoYouIndex)(monthIndex + 1), zuoIndex = _a.zuoIndex, youIndex = _a.youIndex;
      var _b = (0, location_1.getChangQuIndex)(timeIndex), changIndex = _b.changIndex, quIndex = _b.quIndex;
      var _c = (0, location_1.getKuiYueIndex)(yearly[0]), kuiIndex = _c.kuiIndex, yueIndex = _c.yueIndex;
      var _d = (0, location_1.getHuoLingIndex)(yearly[1], timeIndex), huoIndex = _d.huoIndex, lingIndex = _d.lingIndex;
      var _e = (0, location_1.getKongJieIndex)(timeIndex), kongIndex = _e.kongIndex, jieIndex = _e.jieIndex;
      var _f = (0, location_1.getLuYangTuoMaIndex)(yearly[0], yearly[1]), luIndex = _f.luIndex, yangIndex = _f.yangIndex, tuoIndex = _f.tuoIndex, maIndex = _f.maIndex;
      stars[zuoIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("zuofuMin"),
        type: "soft",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("左辅", zuoIndex),
        mutagen: (0, utils_1.getMutagen)("左辅", yearly[0])
      }));
      stars[youIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("youbiMin"),
        type: "soft",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("右弼", youIndex),
        mutagen: (0, utils_1.getMutagen)("右弼", yearly[0])
      }));
      stars[changIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("wenchangMin"),
        type: "soft",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("文昌", changIndex),
        mutagen: (0, utils_1.getMutagen)("文昌", yearly[0])
      }));
      stars[quIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("wenquMin"),
        type: "soft",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("文曲", quIndex),
        mutagen: (0, utils_1.getMutagen)("文曲", yearly[0])
      }));
      stars[kuiIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("tiankuiMin"),
        type: "soft",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("天魁", kuiIndex)
      }));
      stars[yueIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("tianyueMin"),
        type: "soft",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("天钺", yueIndex)
      }));
      stars[luIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("lucunMin"),
        type: "lucun",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("禄存", luIndex)
      }));
      stars[maIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("tianmaMin"),
        type: "tianma",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("天马", maIndex)
      }));
      stars[kongIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("dikongMin"),
        type: "tough",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("地空", kongIndex)
      }));
      stars[jieIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("dijieMin"),
        type: "tough",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("地劫", jieIndex)
      }));
      stars[huoIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("huoxingMin"),
        type: "tough",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("火星", huoIndex)
      }));
      stars[lingIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("lingxingMin"),
        type: "tough",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("铃星", lingIndex)
      }));
      stars[yangIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("qingyangMin"),
        type: "tough",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("擎羊", yangIndex)
      }));
      stars[tuoIndex].push(new FunctionalStar_1.default({
        name: (0, i18n_1.t)("tuoluoMin"),
        type: "tough",
        scope: "origin",
        brightness: (0, utils_1.getBrightness)("陀罗", tuoIndex)
      }));
      return stars;
    };
    exports.getMinorStar = getMinorStar;
  }
});

// node_modules/iztro/lib/star/adjectiveStar.js
var require_adjectiveStar = __commonJS({
  "node_modules/iztro/lib/star/adjectiveStar.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getAdjectiveStar = void 0;
    var lunar_lite_1 = require_lib();
    var _1 = require_star7();
    var i18n_1 = require_i18n();
    var FunctionalStar_1 = __importDefault(require_FunctionalStar());
    var location_1 = require_location();
    var astro_1 = require_astro2();
    var getAdjectiveStar = function(param) {
      var solarDate = param.solarDate, timeIndex = param.timeIndex, fixLeap = param.fixLeap;
      var algorithm = (0, astro_1.getConfig)().algorithm;
      var stars = (0, _1.initStars)();
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, timeIndex, {
        year: (0, astro_1.getConfig)().yearDivide
      }).yearly;
      var yearlyIndex = (0, location_1.getYearlyStarIndex)(param);
      var monthlyIndex = (0, location_1.getMonthlyStarIndex)(solarDate, timeIndex, fixLeap);
      var dailyIndex = (0, location_1.getDailyStarIndex)(solarDate, timeIndex, fixLeap);
      var timelyIndex = (0, location_1.getTimelyStarIndex)(timeIndex);
      var _a = (0, location_1.getLuanXiIndex)(yearly[1]), hongluanIndex = _a.hongluanIndex, tianxiIndex = _a.tianxiIndex;
      var suiqian12 = (0, _1.getYearly12)(solarDate).suiqian12;
      stars[hongluanIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("hongluan"), type: "flower", scope: "origin" }));
      stars[tianxiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianxi"), type: "flower", scope: "origin" }));
      stars[monthlyIndex.tianyaoIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianyao"), type: "flower", scope: "origin" }));
      stars[yearlyIndex.xianchiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("xianchi"), type: "flower", scope: "origin" }));
      stars[monthlyIndex.yuejieIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("jieshen"), type: "helper", scope: "origin" }));
      stars[dailyIndex.santaiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("santai"), type: "adjective", scope: "origin" }));
      stars[dailyIndex.bazuoIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("bazuo"), type: "adjective", scope: "origin" }));
      stars[dailyIndex.enguangIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("engguang"), type: "adjective", scope: "origin" }));
      stars[dailyIndex.tianguiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tiangui"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.longchiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("longchi"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.fenggeIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("fengge"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tiancaiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tiancai"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianshouIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianshou"), type: "adjective", scope: "origin" }));
      stars[timelyIndex.taifuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("taifu"), type: "adjective", scope: "origin" }));
      stars[timelyIndex.fenggaoIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("fenggao"), type: "adjective", scope: "origin" }));
      stars[monthlyIndex.tianwuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianwu"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.huagaiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("huagai"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianguanIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianguan"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianfuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianfu"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianchuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianchu"), type: "adjective", scope: "origin" }));
      stars[monthlyIndex.tianyueIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianyue"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tiandeIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tiande"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.yuedeIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("yuede"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tiankongIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tiankong"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.xunkongIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("xunkong"), type: "adjective", scope: "origin" }));
      if (algorithm !== "zhongzhou") {
        stars[yearlyIndex.jieluIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("jielu"), type: "adjective", scope: "origin" }));
        stars[yearlyIndex.kongwangIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("kongwang"), type: "adjective", scope: "origin" }));
      } else {
        stars[suiqian12.indexOf((0, i18n_1.t)((0, i18n_1.kot)("longde")))].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("longde"), type: "adjective", scope: "origin" }));
        stars[yearlyIndex.jiekongIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("jiekong"), type: "adjective", scope: "origin" }));
        stars[yearlyIndex.jieshaAdjIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("jieshaAdj"), type: "adjective", scope: "origin" }));
        stars[yearlyIndex.dahaoAdjIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("dahao"), type: "adjective", scope: "origin" }));
      }
      stars[yearlyIndex.guchenIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("guchen"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.guasuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("guasu"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.feilianIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("feilian"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.posuiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("posui"), type: "adjective", scope: "origin" }));
      stars[monthlyIndex.tianxingIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianxing"), type: "adjective", scope: "origin" }));
      stars[monthlyIndex.yinshaIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("yinsha"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tiankuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianku"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianxuIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianxu"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianshiIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianshi"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.tianshangIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("tianshang"), type: "adjective", scope: "origin" }));
      stars[yearlyIndex.nianjieIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("nianjie"), type: "helper", scope: "origin" }));
      return stars;
    };
    exports.getAdjectiveStar = getAdjectiveStar;
  }
});

// node_modules/iztro/lib/star/decorativeStar.js
var require_decorativeStar = __commonJS({
  "node_modules/iztro/lib/star/decorativeStar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getYearly12 = exports.getJiangqian12StartIndex = exports.getBoShi12 = exports.getchangsheng12 = exports.getChangesheng12StartIndex = void 0;
    var lunar_lite_1 = require_lib();
    var astro_1 = require_astro2();
    var data_1 = require_data();
    var i18n_1 = require_i18n();
    var utils_1 = require_utils();
    var location_1 = require_location();
    var getChangesheng12StartIndex = function(fiveElementClassName) {
      var fiveElementClass = (0, i18n_1.kot)(fiveElementClassName);
      var startIdx = 0;
      switch (data_1.FiveElementsClass[fiveElementClass]) {
        case 2: {
          startIdx = (0, utils_1.fixEarthlyBranchIndex)("shen");
          break;
        }
        case 3: {
          startIdx = (0, utils_1.fixEarthlyBranchIndex)("hai");
          break;
        }
        case 4: {
          startIdx = (0, utils_1.fixEarthlyBranchIndex)("si");
          break;
        }
        case 5: {
          startIdx = (0, utils_1.fixEarthlyBranchIndex)("shen");
          break;
        }
        case 6: {
          startIdx = (0, utils_1.fixEarthlyBranchIndex)("yin");
          break;
        }
      }
      return startIdx;
    };
    exports.getChangesheng12StartIndex = getChangesheng12StartIndex;
    var getchangsheng12 = function(param) {
      var solarDate = param.solarDate, gender = param.gender;
      var changsheng12 = [];
      var genderKey = (0, i18n_1.kot)(gender);
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDate, 0, {
        year: (0, astro_1.getConfig)().yearDivide
      }).yearly;
      var earthlyBranchNameOfYear = yearly[1];
      var earthlyBranchOfYear = (0, i18n_1.kot)(earthlyBranchNameOfYear, "Earthly");
      var _a = (0, astro_1.getSoulAndBody)(param), heavenlyStemOfSoul = _a.heavenlyStemOfSoul, earthlyBranchOfSoul = _a.earthlyBranchOfSoul;
      var fiveElementClass = (0, astro_1.getFiveElementsClass)(heavenlyStemOfSoul, earthlyBranchOfSoul);
      var stars = [
        "changsheng",
        "muyu",
        "guandai",
        "linguan",
        "diwang",
        "shuai",
        "bing",
        "si",
        "mu",
        "jue",
        "tai",
        "yang"
      ];
      var startIdx = (0, exports.getChangesheng12StartIndex)(fiveElementClass);
      for (var i = 0; i < stars.length; i++) {
        var idx = 0;
        if (data_1.GENDER[genderKey] === data_1.earthlyBranches[earthlyBranchOfYear].yinYang) {
          idx = (0, utils_1.fixIndex)(i + startIdx);
        } else {
          idx = (0, utils_1.fixIndex)(startIdx - i);
        }
        changsheng12[idx] = (0, i18n_1.t)(stars[i]);
      }
      return changsheng12;
    };
    exports.getchangsheng12 = getchangsheng12;
    var getBoShi12 = function(solarDateStr, gender) {
      var genderKey = (0, i18n_1.kot)(gender);
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDateStr, 0, {
        year: (0, astro_1.getConfig)().yearDivide
      }).yearly;
      var heavenlyStemNameOfYear = yearly[0], earthlyBranchNameOfYear = yearly[1];
      var earthlyBranchOfYear = (0, i18n_1.kot)(earthlyBranchNameOfYear, "Earthly");
      var stars = [
        "boshi",
        "lishi",
        "qinglong",
        "xiaohao",
        "jiangjun",
        "zhoushu",
        "faylian",
        "xishen",
        "bingfu",
        "dahao",
        "fubing",
        "guanfu"
      ];
      var luIndex = (0, location_1.getLuYangTuoMaIndex)(heavenlyStemNameOfYear, earthlyBranchNameOfYear).luIndex;
      var boshi12 = [];
      for (var i = 0; i < stars.length; i++) {
        var idx = (0, utils_1.fixIndex)(data_1.GENDER[genderKey] === data_1.earthlyBranches[earthlyBranchOfYear].yinYang ? luIndex + i : luIndex - i);
        boshi12[idx] = (0, i18n_1.t)(stars[i]);
      }
      return boshi12;
    };
    exports.getBoShi12 = getBoShi12;
    var getJiangqian12StartIndex = function(earthlyBranchName) {
      var jqStartIdx = -1;
      var earthlyBranchOfYear = (0, i18n_1.kot)(earthlyBranchName, "Earthly");
      if (["yinEarthly", "wuEarthly", "xuEarthly"].includes(earthlyBranchOfYear)) {
        jqStartIdx = (0, utils_1.fixEarthlyBranchIndex)("woo");
      } else if (["shenEarthly", "ziEarthly", "chenEarthly"].includes(earthlyBranchOfYear)) {
        jqStartIdx = (0, utils_1.fixEarthlyBranchIndex)("zi");
      } else if (["siEarthly", "youEarthly", "chouEarthly"].includes(earthlyBranchOfYear)) {
        jqStartIdx = (0, utils_1.fixEarthlyBranchIndex)("you");
      } else if (["haiEarthly", "maoEarthly", "weiEarthly"].includes(earthlyBranchOfYear)) {
        jqStartIdx = (0, utils_1.fixEarthlyBranchIndex)("mao");
      }
      return (0, utils_1.fixIndex)(jqStartIdx);
    };
    exports.getJiangqian12StartIndex = getJiangqian12StartIndex;
    var getYearly12 = function(solarDateStr) {
      var jiangqian12 = [];
      var suiqian12 = [];
      var algorithm = (0, astro_1.getConfig)().algorithm;
      var yearly = (0, lunar_lite_1.getHeavenlyStemAndEarthlyBranchBySolarDate)(solarDateStr, 0, {
        // 流年神煞应该用立春为界，但为了满足不同流派的需求允许配置
        year: (0, astro_1.getConfig)().horoscopeDivide
      }).yearly;
      var ts12shen = algorithm === "zhongzhou" ? [
        "suijian",
        "huiqi",
        "sangmen",
        "guansuo",
        "gwanfu",
        "xiaohao",
        "suipo",
        "longde",
        "baihu",
        "tiande",
        "diaoke",
        "bingfu"
      ] : [
        "suijian",
        "huiqi",
        "sangmen",
        "guansuo",
        "gwanfu",
        "xiaohao",
        "dahao",
        "longde",
        "baihu",
        "tiande",
        "diaoke",
        "bingfu"
      ];
      for (var i = 0; i < ts12shen.length; i++) {
        var idx = (0, utils_1.fixIndex)((0, utils_1.fixEarthlyBranchIndex)(yearly[1]) + i);
        suiqian12[idx] = (0, i18n_1.t)(ts12shen[i]);
      }
      var jq12shen = [
        "jiangxing",
        "panan",
        "suiyi",
        "xiishen",
        "huagai",
        "jiesha",
        "zhaisha",
        "tiansha",
        "zhibei",
        "xianchi",
        "yuesha",
        "wangshen"
      ];
      var jiangqian12StartIndex = (0, exports.getJiangqian12StartIndex)(yearly[1]);
      for (var i = 0; i < jq12shen.length; i++) {
        var idx = (0, utils_1.fixIndex)(jiangqian12StartIndex + i);
        jiangqian12[idx] = (0, i18n_1.t)(jq12shen[i]);
      }
      return { suiqian12, jiangqian12 };
    };
    exports.getYearly12 = getYearly12;
  }
});

// node_modules/iztro/lib/star/horoscopeStar.js
var require_horoscopeStar = __commonJS({
  "node_modules/iztro/lib/star/horoscopeStar.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getHoroscopeStar = void 0;
    var _1 = require_star7();
    var i18n_1 = require_i18n();
    var FunctionalStar_1 = __importDefault(require_FunctionalStar());
    var location_1 = require_location();
    var getHoroscopeStar = function(heavenlyStem, earthlyBranch, scope) {
      var _a = (0, location_1.getKuiYueIndex)(heavenlyStem), kuiIndex = _a.kuiIndex, yueIndex = _a.yueIndex;
      var _b = (0, location_1.getChangQuIndexByHeavenlyStem)(heavenlyStem), changIndex = _b.changIndex, quIndex = _b.quIndex;
      var _c = (0, location_1.getLuYangTuoMaIndex)(heavenlyStem, earthlyBranch), luIndex = _c.luIndex, yangIndex = _c.yangIndex, tuoIndex = _c.tuoIndex, maIndex = _c.maIndex;
      var _d = (0, location_1.getLuanXiIndex)(earthlyBranch), hongluanIndex = _d.hongluanIndex, tianxiIndex = _d.tianxiIndex;
      var stars = (0, _1.initStars)();
      var trans = {
        origin: {
          tiankui: (0, i18n_1.t)("tiankuiMin"),
          tianyue: (0, i18n_1.t)("tianyueMin"),
          wenchang: (0, i18n_1.t)("wenchangMin"),
          wenqu: (0, i18n_1.t)("wenquMin"),
          lucun: (0, i18n_1.t)("lucunMin"),
          qingyang: (0, i18n_1.t)("qingyangMin"),
          tuoluo: (0, i18n_1.t)("tuoluoMin"),
          tianma: (0, i18n_1.t)("tianmaMin"),
          hongluan: (0, i18n_1.t)("hongluanMin"),
          tianxi: (0, i18n_1.t)("tianxi")
        },
        decadal: {
          tiankui: (0, i18n_1.t)("yunkui"),
          tianyue: (0, i18n_1.t)("yunyue"),
          wenchang: (0, i18n_1.t)("yunchang"),
          wenqu: (0, i18n_1.t)("yunqu"),
          lucun: (0, i18n_1.t)("yunlu"),
          qingyang: (0, i18n_1.t)("yunyang"),
          tuoluo: (0, i18n_1.t)("yuntuo"),
          tianma: (0, i18n_1.t)("yunma"),
          hongluan: (0, i18n_1.t)("yunluan"),
          tianxi: (0, i18n_1.t)("yunxi")
        },
        yearly: {
          tiankui: (0, i18n_1.t)("liukui"),
          tianyue: (0, i18n_1.t)("liuyue"),
          wenchang: (0, i18n_1.t)("liuchang"),
          wenqu: (0, i18n_1.t)("liuqu"),
          lucun: (0, i18n_1.t)("liulu"),
          qingyang: (0, i18n_1.t)("liuyang"),
          tuoluo: (0, i18n_1.t)("liutuo"),
          tianma: (0, i18n_1.t)("liuma"),
          hongluan: (0, i18n_1.t)("liuluan"),
          tianxi: (0, i18n_1.t)("liuxi")
        },
        monthly: {
          tiankui: (0, i18n_1.t)("yuekui"),
          tianyue: (0, i18n_1.t)("yueyue"),
          wenchang: (0, i18n_1.t)("yuechang"),
          wenqu: (0, i18n_1.t)("yuequ"),
          lucun: (0, i18n_1.t)("yuelu"),
          qingyang: (0, i18n_1.t)("yueyang"),
          tuoluo: (0, i18n_1.t)("yuetuo"),
          tianma: (0, i18n_1.t)("yuema"),
          hongluan: (0, i18n_1.t)("yueluan"),
          tianxi: (0, i18n_1.t)("yuexi")
        },
        daily: {
          tiankui: (0, i18n_1.t)("rikui"),
          tianyue: (0, i18n_1.t)("riyue"),
          wenchang: (0, i18n_1.t)("richang"),
          wenqu: (0, i18n_1.t)("riqu"),
          lucun: (0, i18n_1.t)("rilu"),
          qingyang: (0, i18n_1.t)("riyang"),
          tuoluo: (0, i18n_1.t)("rituo"),
          tianma: (0, i18n_1.t)("rima"),
          hongluan: (0, i18n_1.t)("riluan"),
          tianxi: (0, i18n_1.t)("rixi")
        },
        hourly: {
          tiankui: (0, i18n_1.t)("shikui"),
          tianyue: (0, i18n_1.t)("shiyue"),
          wenchang: (0, i18n_1.t)("shichang"),
          wenqu: (0, i18n_1.t)("shiqu"),
          lucun: (0, i18n_1.t)("shilu"),
          qingyang: (0, i18n_1.t)("shiyang"),
          tuoluo: (0, i18n_1.t)("shituo"),
          tianma: (0, i18n_1.t)("shima"),
          hongluan: (0, i18n_1.t)("shiluan"),
          tianxi: (0, i18n_1.t)("shixi")
        }
      };
      if (scope === "yearly") {
        var nianjieIndex = (0, location_1.getNianjieIndex)(earthlyBranch);
        stars[nianjieIndex].push(new FunctionalStar_1.default({ name: (0, i18n_1.t)("nianjie"), type: "helper", scope: "yearly" }));
      }
      stars[kuiIndex].push(new FunctionalStar_1.default({ name: trans[scope].tiankui, type: "soft", scope }));
      stars[yueIndex].push(new FunctionalStar_1.default({ name: trans[scope].tianyue, type: "soft", scope }));
      stars[changIndex].push(new FunctionalStar_1.default({ name: trans[scope].wenchang, type: "soft", scope }));
      stars[quIndex].push(new FunctionalStar_1.default({ name: trans[scope].wenqu, type: "soft", scope }));
      stars[luIndex].push(new FunctionalStar_1.default({ name: trans[scope].lucun, type: "lucun", scope }));
      stars[yangIndex].push(new FunctionalStar_1.default({ name: trans[scope].qingyang, type: "tough", scope }));
      stars[tuoIndex].push(new FunctionalStar_1.default({ name: trans[scope].tuoluo, type: "tough", scope }));
      stars[maIndex].push(new FunctionalStar_1.default({ name: trans[scope].tianma, type: "tianma", scope }));
      stars[hongluanIndex].push(new FunctionalStar_1.default({ name: trans[scope].hongluan, type: "flower", scope }));
      stars[tianxiIndex].push(new FunctionalStar_1.default({ name: trans[scope].tianxi, type: "flower", scope }));
      return stars;
    };
    exports.getHoroscopeStar = getHoroscopeStar;
  }
});

// node_modules/iztro/lib/star/index.js
var require_star7 = __commonJS({
  "node_modules/iztro/lib/star/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.initStars = void 0;
    var initStars = function() {
      return [[], [], [], [], [], [], [], [], [], [], [], []];
    };
    exports.initStars = initStars;
    __exportStar(require_location(), exports);
    __exportStar(require_majorStar(), exports);
    __exportStar(require_minorStar(), exports);
    __exportStar(require_adjectiveStar(), exports);
    __exportStar(require_decorativeStar(), exports);
    __exportStar(require_horoscopeStar(), exports);
  }
});

// node_modules/iztro/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/iztro/lib/index.js"(exports) {
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.astro = exports.util = exports.star = exports.data = void 0;
    exports.data = __importStar(require_data());
    exports.star = __importStar(require_star7());
    exports.util = __importStar(require_utils());
    exports.astro = __importStar(require_astro2());
  }
});
export default require_lib2();
//# sourceMappingURL=iztro.js.map
